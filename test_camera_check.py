#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–∞–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤–µ–±-–∫–∞–º–µ—Ä—ã –Ω–∞ —Ä–æ–±–æ—Ç–µ
"""

import cv2
import time
import sys

def test_camera(camera_index=0):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã"""
    print(f"üé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã {camera_index}...")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–º–µ—Ä–µ
    camera = cv2.VideoCapture(camera_index)
    
    if not camera.isOpened():
        print(f"‚ùå –ö–∞–º–µ—Ä–∞ {camera_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–µ—Ä–µ
    width = camera.get(cv2.CAP_PROP_FRAME_WIDTH)
    height = camera.get(cv2.CAP_PROP_FRAME_HEIGHT)
    fps = camera.get(cv2.CAP_PROP_FPS)
    
    print(f"‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞!")
    print(f"üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {int(width)}x{int(height)}")
    print(f"üé¨ FPS: {fps}")
    
    # –¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤...")
    
    successful_frames = 0
    total_attempts = 10
    
    for i in range(total_attempts):
        ret, frame = camera.read()
        if ret:
            successful_frames += 1
            print(f"‚úÖ –ö–∞–¥—Ä {i+1}: OK ({frame.shape[1]}x{frame.shape[0]})")
        else:
            print(f"‚ùå –ö–∞–¥—Ä {i+1}: –û–®–ò–ë–ö–ê")
        
        time.sleep(0.1)
    
    camera.release()
    
    success_rate = (successful_frames / total_attempts) * 100
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful_frames}/{total_attempts} –∫–∞–¥—Ä–æ–≤ ({success_rate:.1f}%)")
    
    if success_rate >= 80:
        print("‚úÖ –ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–º–µ—Ä–æ–π!")
        return False

def find_all_cameras():
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"""
    print("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä...")
    
    found_cameras = []
    
    for i in range(10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã 0-9
        camera = cv2.VideoCapture(i)
        if camera.isOpened():
            ret, frame = camera.read()
            if ret:
                found_cameras.append(i)
                print(f"‚úÖ –ö–∞–º–µ—Ä–∞ {i}: –ù–∞–π–¥–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ {i}: –ù–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–¥—Ä—ã")
            camera.release()
        else:
            # –ù–µ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–µ—Ä
            pass
    
    if not found_cameras:
        print("‚ùå –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    else:
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {len(found_cameras)}")
        print(f"üìç –ò–Ω–¥–µ–∫—Å—ã: {found_cameras}")
    
    return found_cameras

def main():
    print("ü§ñ –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã —Ä–æ–±–æ—Ç–∞")
    print("=" * 40)
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–∞–º–µ—Ä
    cameras = find_all_cameras()
    
    if not cameras:
        print("\n‚ùå –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
        sys.exit(1)
    
    print("\n" + "=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã
    camera_index = cameras[0]
    success = test_camera(camera_index)
    
    if success:
        print(f"\n‚úÖ –ö–∞–º–µ—Ä–∞ {camera_index} –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ optimized_video_client.py —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --camera {camera_index}")
    else:
        print(f"\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–º–µ—Ä–æ–π {camera_index}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–∞–º–µ—Ä—ã
        if len(cameras) > 1:
            print("üîÑ –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–∞–º–µ—Ä—ã...")
            for cam_idx in cameras[1:]:
                if test_camera(cam_idx):
                    print(f"\n‚úÖ –ö–∞–º–µ—Ä–∞ {cam_idx} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    print(f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä --camera {cam_idx}")
                    break

if __name__ == "__main__":
    main() 