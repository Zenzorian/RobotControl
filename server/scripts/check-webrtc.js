#!/usr/bin/env node

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ WebRTC –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebRTC –±–∏–±–ª–∏–æ—Ç–µ–∫
let webrtcAvailable = false;
let webrtcLibrary = null;

// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ WebRTC –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const webrtcLibraries = [
  { name: 'wrtc', package: 'wrtc' },
  { name: 'node-webrtc', package: 'node-webrtc' },
  { name: '@koush/wrtc', package: '@koush/wrtc' }
];

for (const lib of webrtcLibraries) {
  try {
    require.resolve(lib.package);
    webrtcLibrary = lib;
    webrtcAvailable = true;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ WebRTC –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: ${lib.name}`);
    break;
  } catch (error) {
    // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  }
}

if (!webrtcAvailable) {
  console.log('‚ö†Ô∏è  WebRTC –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  console.log('üìã –î–ª—è –ø–æ–ª–Ω–æ–π WebRTC –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫:');
  console.log('   npm install wrtc');
  console.log('   npm install node-webrtc');
  console.log('   npm install @koush/wrtc');
  console.log('');
  console.log('üéØ –°–ò–ì–ù–ê–õ–ò–ù–ì –°–ï–†–í–ï–† –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ MediaPeer (—Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã)');
  console.log('   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
}

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WebRTC
const fs = require('fs');
const path = require('path');

const webrtcConfig = {
  available: webrtcAvailable,
  library: webrtcLibrary,
  signalingOnly: !webrtcAvailable,
  checked: new Date().toISOString()
};

const configPath = path.join(__dirname, '../src/config/webrtc-config.json');
fs.writeFileSync(configPath, JSON.stringify(webrtcConfig, null, 2));

console.log(`üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${configPath}`);
console.log('üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–æ–º!'); 