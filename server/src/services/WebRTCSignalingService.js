const { v4: uuidv4 } = require('uuid');

/**
 * WebRTC Signaling Service
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP)
 * –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å TURN-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è NAT traversal
 */
class WebRTCSignalingService {
  constructor(clientManager, turnServerService = null) {
    this.clientManager = clientManager;
    this.turnServerService = turnServerService;
    this.sessions = new Map(); // sessionId -> { robot, controller, state }
    this.stats = {
      sessionsCreated: 0,
      sessionsCompleted: 0,
      sessionsFailed: 0,
      signalsProcessed: 0,
      turnConnectionsUsed: 0
    };
    
    console.log('üéØ WebRTC Signaling Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (this.turnServerService) {
      console.log('üîÑ TURN-—Å–µ—Ä–≤–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  async handleWebRTCSignal(ws, signalType, data) {
    try {
      this.stats.signalsProcessed++;
      
      console.log(`üì° WebRTC —Å–∏–≥–Ω–∞–ª: ${signalType} –æ—Ç ${ws.clientType}`);
      
      switch (signalType) {
        case 'offer':
          return await this.handleOffer(ws, data);
          
        case 'answer':
          return await this.handleAnswer(ws, data);
          
        case 'ice-candidate':
          return await this.handleIceCandidate(ws, data);
          
        case 'request_video':
          return await this.handleRequestVideo(ws, data);
          
        case 'session-start':
          return await this.handleSessionStart(ws, data);
          
        case 'session-end':
          return await this.handleSessionEnd(ws, data);
          
        case 'ice-configuration':
          return await this.handleICEConfigurationRequest(ws, data);
          
        default:
          console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π WebRTC —Å–∏–≥–Ω–∞–ª: ${signalType}`);
          return false;
      }
    } catch (error) {
      console.error(`üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebRTC —Å–∏–≥–Ω–∞–ª–∞ ${signalType}:`, error);
      this.stats.sessionsFailed++;
      return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC offer –æ—Ç —Ä–æ–±–æ—Ç–∞
   */
  async handleOffer(ws, data) {
    if (ws.clientType !== 'robot') {
      console.log('‚ùå Offer –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ä–æ–±–æ—Ç');
      return false;
    }

    const sessionId = data.sessionId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º sessionId –æ—Ç —Ä–æ–±–æ—Ç–∞, –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π!
    
    if (!sessionId) {
      console.log('‚ùå Offer –±–µ–∑ sessionId –æ—Ç —Ä–æ–±–æ—Ç–∞');
      return false;
    }
    
    console.log(`üì° –ü–æ–ª—É—á–µ–Ω offer –æ—Ç —Ä–æ–±–æ—Ç–∞ —Å sessionId: ${sessionId}`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    this.sessions.set(sessionId, {
      robot: ws,
      controller: null,
      state: 'offer-created',
      createdAt: Date.now(),
      offer: data
    });
    
    this.stats.sessionsCreated++;
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º offer –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É (–ù–ï —Ä–æ–±–æ—Ç—É!)
    const controllerClient = this.clientManager.clients.controller;
    console.log(`üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è offer: ${controllerClient ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}, readyState: ${controllerClient?.readyState}`);
    
    if (controllerClient && controllerClient.readyState === 1) {
      const offerMessage = {
        type: 'webrtc-signal',
        signalType: 'offer',
        sessionId: sessionId,
        data: data
      };
      
      controllerClient.send(JSON.stringify(offerMessage));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
      const session = this.sessions.get(sessionId);
      session.controller = controllerClient;
      session.state = 'offer-sent';
      
      console.log(`‚úÖ WebRTC offer –ø–µ—Ä–µ—Å–ª–∞–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É (session: ${sessionId})`);
      return true;
    } else {
      console.log('‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è WebRTC offer');
      this.sessions.delete(sessionId);
      return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC answer –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
   */
  async handleAnswer(ws, data) {
    if (ws.clientType !== 'controller') {
      console.log('‚ùå Answer –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä');
      return false;
    }

    const sessionId = data.sessionId;
    const session = this.sessions.get(sessionId);
    
    if (!session) {
      console.log(`‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${sessionId}`);
      return false;
    }

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º answer —Ä–æ–±–æ—Ç—É
    if (session.robot) {
      const answerMessage = {
        type: 'webrtc-signal',
        signalType: 'answer',
        sessionId: sessionId,
        data: data
      };
      
      session.robot.send(JSON.stringify(answerMessage));
      session.state = 'answer-sent';
      session.answer = data;
      
      console.log(`‚úÖ WebRTC answer –ø–µ—Ä–µ—Å–ª–∞–Ω —Ä–æ–±–æ—Ç—É (session: ${sessionId})`);
      return true;
    } else {
      console.log('‚ùå –†–æ–±–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è WebRTC answer');
      return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
   */
  async handleIceCandidate(ws, data) {
    const sessionId = data.sessionId;
    const session = this.sessions.get(sessionId);
    
    if (!session) {
      console.log(`‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ICE: ${sessionId}`);
      return false;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    let targetClient = null;
    if (ws.clientType === 'robot' && session.controller) {
      targetClient = session.controller;
    } else if (ws.clientType === 'controller' && session.robot) {
      targetClient = session.robot;
    }

    if (targetClient) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö
      const iceMessage = {
        type: 'webrtc-signal',
        signalType: 'ice-candidate',
        sessionId: sessionId,
        data: data
      };
      
      targetClient.send(JSON.stringify(iceMessage));
      console.log(`üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω (${ws.clientType} -> ${targetClient.clientType})`);
      return true;
    } else {
      console.log('‚ùå –¶–µ–ª–µ–≤–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
      return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–µ–æ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
   */
  async handleRequestVideo(ws, data) {
    if (ws.clientType !== 'controller') {
      console.log('‚ùå –ó–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä');
      return false;
    }

    // –ù–∞–π—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞
    const robotClient = this.clientManager.getTargetClient('controller');
    console.log(`üîç –ü–æ–∏—Å–∫ —Ä–æ–±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–µ–æ...`);
    console.log(`üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${JSON.stringify(this.clientManager.getStats())}`);
    
    if (!robotClient) {
      console.log('‚ùå –†–æ–±–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–µ–æ');
      ws.send(JSON.stringify({
        type: 'webrtc-signal',
        signalType: 'error',
        data: { message: 'Robot not connected' }
      }));
      return false;
    }
    
    console.log(`‚úÖ –†–æ–±–æ—Ç –Ω–∞–π–¥–µ–Ω: ${robotClient.clientType}, readyState: ${robotClient.readyState}`);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º sessionId
    const sessionId = data.sessionId || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log(`üìπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ —Å sessionId: ${sessionId}`);

    // –ü–µ—Ä–µ—Å–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–æ–±–æ—Ç—É —Å sessionId (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const requestMessage = {
      type: 'webrtc-signal',
      signalType: 'request_video',
      sessionId: sessionId,
      data: data || {}
    };

    try {
      robotClient.send(JSON.stringify(requestMessage));
      console.log(`üìπ –ó–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ –ø–µ—Ä–µ—Å–ª–∞–Ω —Ä–æ–±–æ—Ç—É —Å sessionId: ${sessionId}`);
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${JSON.stringify(requestMessage)}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–±–æ—Ç—É: ${error.message}`);
      return false;
    }
    
    return true;
  }

  /**
   * –ù–∞—á–∞–ª–æ WebRTC —Å–µ—Å—Å–∏–∏
   */
  async handleSessionStart(ws, data) {
    const sessionId = data.sessionId;
    const session = this.sessions.get(sessionId);
    
    if (session) {
      session.state = 'connected';
      session.connectedAt = Date.now();
      console.log(`üéâ WebRTC —Å–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${sessionId}`);
    }
    
    return true;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ WebRTC —Å–µ—Å—Å–∏–∏
   */
  async handleSessionEnd(ws, data) {
    const sessionId = data.sessionId;
    const session = this.sessions.get(sessionId);
    
    if (session) {
      session.state = 'ended';
      session.endedAt = Date.now();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      const otherClient = ws.clientType === 'robot' ? session.controller : session.robot;
      if (otherClient) {
        const endMessage = {
          type: 'webrtc-signal',
          signalType: 'session-end',
          sessionId: sessionId,
          data: { reason: 'peer-disconnected' }
        };
        
        otherClient.send(JSON.stringify(endMessage));
      }
      
      this.sessions.delete(sessionId);
      this.stats.sessionsCompleted++;
      
      console.log(`üèÅ WebRTC —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${sessionId}`);
    }
    
    return true;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
   */
  handleClientDisconnection(ws) {
    // –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    for (const [sessionId, session] of this.sessions.entries()) {
      if (session.robot === ws || session.controller === ws) {
        console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ WebRTC —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: ${sessionId}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const otherClient = session.robot === ws ? session.controller : session.robot;
        if (otherClient) {
          const endMessage = {
            type: 'webrtc-signal',
            signalType: 'session-end',
            sessionId: sessionId,
            data: { reason: 'peer-disconnected' }
          };
          
          try {
            otherClient.send(JSON.stringify(endMessage));
          } catch (error) {
            // –ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω
          }
        }
        
        this.sessions.delete(sessionId);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebRTC
   */
  getStats() {
    const activeSessions = Array.from(this.sessions.values()).filter(
      session => session.state === 'connected'
    ).length;
    
    return {
      activeSessions,
      totalSessions: this.sessions.size,
      stats: {
        ...this.stats,
        activeSessionsCount: activeSessions
      },
      sessions: Array.from(this.sessions.entries()).map(([id, session]) => ({
        id,
        state: session.state,
        createdAt: session.createdAt,
        connectedAt: session.connectedAt,
        duration: session.connectedAt ? Date.now() - session.connectedAt : 0
      }))
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
   */
  cleanup() {
    const now = Date.now();
    const maxAge = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    
    for (const [sessionId, session] of this.sessions.entries()) {
      if (now - session.createdAt > maxAge && session.state !== 'connected') {
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π WebRTC —Å–µ—Å—Å–∏–∏: ${sessionId}`);
        this.sessions.delete(sessionId);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   * –í–∫–ª—é—á–∞–µ—Ç TURN —Å–µ—Ä–≤–µ—Ä—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
   */
  getICEConfiguration() {
    if (this.turnServerService) {
      const config = this.turnServerService.getICEConfiguration();
      console.log('üßä –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å TURN —Å–µ—Ä–≤–µ—Ä–æ–º');
      return config;
    } else {
      // Fallback —Ç–æ–ª—å–∫–æ –Ω–∞ STUN —Å–µ—Ä–≤–µ—Ä—ã
      console.log('üßä –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —Å STUN —Å–µ—Ä–≤–µ—Ä–∞–º–∏');
      return {
        iceServers: [
          { urls: 'stun:stun.l.google.com:19302' },
          { urls: 'stun:stun1.l.google.com:19302' }
        ],
        iceCandidatePoolSize: 10,
        bundlePolicy: 'max-bundle',
        rtcpMuxPolicy: 'require'
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
   */
  async sendICEConfiguration(ws) {
    try {
      const iceConfig = this.getICEConfiguration();
      const iceMessage = {
        type: 'webrtc-signal',
        signalType: 'ice-configuration',
        data: iceConfig
      };

      ws.send(JSON.stringify(iceMessage));
      console.log(`üßä ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${ws.clientType}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async handleICEConfigurationRequest(ws, data) {
    console.log(`üßä –ó–∞–ø—Ä–æ—Å ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç ${ws.clientType}`);
    return await this.sendICEConfiguration(ws);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TURN —Å–µ—Ä–≤–µ—Ä–∞
   */
  getTurnStats() {
    if (this.turnServerService) {
      const turnStats = this.turnServerService.getStats();
      return {
        turnServerAvailable: true,
        ...turnStats,
        connectionsUsedInWebRTC: this.stats.turnConnectionsUsed
      };
    } else {
      return {
        turnServerAvailable: false,
        message: 'TURN —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
      };
    }
  }
}

module.exports = WebRTCSignalingService; 