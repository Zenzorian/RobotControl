const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const TurnConfig = require('../config/TurnConfig');

/**
 * TURN Server Service
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TURN-—Å–µ—Ä–≤–µ—Ä–æ–º (coturn)
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
 */
class TurnServerService {
  constructor() {
    this.turnProcess = null;
    this.isRunning = false;
    this.configFile = '/tmp/turnserver-robot.conf';
    this.logFile = '/tmp/turnserver-robot.log';
    this.pidFile = '/tmp/turnserver-robot.pid';
    this.stats = {
      startedAt: null,
      restarts: 0,
      connections: 0,
      totalBytes: 0
    };

    console.log('üîÑ TURN Server Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ó–∞–ø—É—Å–∫ TURN-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async start() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ TURN-—Å–µ—Ä–≤–µ—Ä–∞...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ coturn
      if (!(await this.checkCoturnInstalled())) {
        console.log('‚ö†Ô∏è coturn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...');
        try {
          await this.installCoturn();
        } catch (error) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å coturn, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–æ)');
        }
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ TURN –ø—Ä–æ—Ü–µ—Å—Å—ã
      await this.killExistingTurnServers();
      await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤
      const portsAvailable = await this.checkPortAvailability();
      if (!portsAvailable) {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å...');
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await this.createConfigFile();

      // –ó–∞–ø—É—Å–∫–∞–µ–º TURN-—Å–µ—Ä–≤–µ—Ä
      await this.startTurnServer();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
      const isHealthy = await this.healthCheck();
      if (isHealthy) {
        console.log('‚úÖ TURN-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        this.stats.startedAt = new Date();
        return true;
      } else {
        console.log('‚ùå TURN-—Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è');
        return false;
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TURN-—Å–µ—Ä–≤–µ—Ä–∞:', error);
      return false;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TURN-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async stop() {
    try {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TURN-—Å–µ—Ä–≤–µ—Ä–∞...');

      if (this.turnProcess) {
        this.turnProcess.kill('SIGTERM');
        this.turnProcess = null;
      }

      this.isRunning = false;
      console.log('‚úÖ TURN-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TURN-—Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ coturn
   */
  async checkCoturnInstalled() {
    try {
      const { exec } = require('child_process');
      return new Promise((resolve) => {
        exec('which turnserver', (error) => {
          resolve(!error);
        });
      });
    } catch (error) {
      return false;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ coturn
   */
  async installCoturn() {
    console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ coturn...');
    
    return new Promise((resolve, reject) => {
      const install = spawn('apt-get', ['update', '&&', 'apt-get', 'install', '-y', 'coturn'], {
        stdio: 'inherit',
        shell: true
      });

      install.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ coturn —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          resolve();
        } else {
          reject(new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ coturn, –∫–æ–¥: ${code}`));
        }
      });
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
   */
  async checkPortAvailability() {
    const net = require('net');
    
    const checkPort = (port) => {
      return new Promise((resolve) => {
        const server = net.createServer();
        server.listen(port, (err) => {
          if (err) {
            resolve(false);
          } else {
            server.once('close', () => resolve(true));
            server.close();
          }
        });
        server.on('error', () => resolve(false));
      });
    };

    const mainPortAvailable = await checkPort(TurnConfig.TURN_SERVER_PORT);
    const tlsPortAvailable = await checkPort(TurnConfig.TURN_SERVER_TLS_PORT);
    
    console.log(`üîç –ü–æ—Ä—Ç ${TurnConfig.TURN_SERVER_PORT}: ${mainPortAvailable ? '—Å–≤–æ–±–æ–¥–µ–Ω' : '–∑–∞–Ω—è—Ç'}`);
    console.log(`üîç –ü–æ—Ä—Ç ${TurnConfig.TURN_SERVER_TLS_PORT}: ${tlsPortAvailable ? '—Å–≤–æ–±–æ–¥–µ–Ω' : '–∑–∞–Ω—è—Ç'}`);
    
    return mainPortAvailable && tlsPortAvailable;
  }

  /**
   * –ü–æ–∏—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö TURN –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  async killExistingTurnServers() {
    try {
      const { exec } = require('child_process');
      return new Promise((resolve) => {
        exec('pkill -f turnserver', (error) => {
          if (error) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö turnserver –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)');
          } else {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ turnserver –ø—Ä–æ—Ü–µ—Å—Å—ã');
          }
          resolve();
        });
      });
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  async createConfigFile() {
    const config = TurnConfig.getCoturnConfig();
    const configLines = [];

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç coturn
    for (const [key, value] of Object.entries(config)) {
      if (typeof value === 'boolean') {
        if (value) configLines.push(key);
      } else {
        configLines.push(`${key}=${value}`);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Starlink
    configLines.push('');
    configLines.push('# Optimizations for Starlink/Satellite connections');
    configLines.push('max-bps=1000000');
    configLines.push('min-port=49152');
    configLines.push('max-port=65535');
    configLines.push('no-multicast-peers');
    configLines.push('mobility');
    configLines.push('');
    configLines.push('# User-space configuration');
    configLines.push('no-cli');
    configLines.push('no-web-admin');
    configLines.push('');

    const configContent = configLines.join('\n');
    
    try {
      await fs.writeFile(this.configFile, configContent);
      console.log(`üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${this.configFile}`);
      console.log(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n${configContent}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ TURN-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async startTurnServer() {
    return new Promise((resolve, reject) => {
      console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ turnserver...');
      
      this.turnProcess = spawn('turnserver', ['-c', this.configFile], {
        stdio: ['ignore', 'pipe', 'pipe']
      });

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
      this.turnProcess.stdout.on('data', (data) => {
        console.log(`[TURN] ${data.toString().trim()}`);
      });

      this.turnProcess.stderr.on('data', (data) => {
        console.log(`[TURN ERROR] ${data.toString().trim()}`);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this.turnProcess.on('close', (code) => {
        console.log(`üîÑ TURN-—Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
        this.isRunning = false;
        
        if (code !== 0) {
          this.stats.restarts++;
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
          setTimeout(() => {
            console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ TURN-—Å–µ—Ä–≤–µ—Ä–∞...');
            this.start();
          }, 5000);
        }
      });

      this.turnProcess.on('error', (error) => {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ TURN-—Å–µ—Ä–≤–µ—Ä–∞:', error);
        reject(error);
      });

      // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
      setTimeout(() => {
        if (this.turnProcess) {
          this.isRunning = true;
          resolve();
        } else {
          reject(new Error('TURN-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è'));
        }
      }, 3000);
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è TURN-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async healthCheck() {
    try {
      const isPortOpen = await TurnConfig.checkTurnServerHealth();
      if (isPortOpen) {
        console.log('‚úÖ TURN-—Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É');
        return true;
      } else {
        console.log('‚ùå TURN-—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É');
        return false;
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è TURN-—Å–µ—Ä–≤–µ—Ä–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TURN-—Å–µ—Ä–≤–µ—Ä–∞
   */
  getStats() {
    return {
      isRunning: this.isRunning,
      startedAt: this.stats.startedAt,
      restarts: this.stats.restarts,
      connections: this.stats.connections,
      totalBytes: this.stats.totalBytes,
      uptime: this.stats.startedAt ? Date.now() - this.stats.startedAt.getTime() : 0
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  getICEConfiguration() {
    return TurnConfig.getICEConfiguration();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL TURN-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è WebRTC
   */
  getTurnServerUrls() {
    const host = TurnConfig.TURN_SERVER_HOST;
    const port = TurnConfig.TURN_SERVER_PORT;
    const tlsPort = TurnConfig.TURN_SERVER_TLS_PORT;
    const username = TurnConfig.TURN_USERNAME;
    const credential = TurnConfig.TURN_PASSWORD;

    return [
      {
        urls: `turn:${host}:${port}`,
        username,
        credential
      },
      {
        urls: `turn:${host}:${port}?transport=tcp`,
        username,
        credential
      },
      {
        urls: `turns:${host}:${tlsPort}`,
        username,
        credential
      }
    ];
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
   */
  startMonitoring() {
    setInterval(async () => {
      if (this.isRunning) {
        const isHealthy = await this.healthCheck();
        if (!isHealthy) {
          console.log('‚ö†Ô∏è TURN-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...');
          await this.restart();
        }
      }
    }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ TURN-—Å–µ—Ä–≤–µ—Ä–∞
   */
  async restart() {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ TURN-—Å–µ—Ä–≤–µ—Ä–∞...');
    await this.stop();
    await new Promise(resolve => setTimeout(resolve, 2000));
    return await this.start();
  }
}

module.exports = TurnServerService; 