const http = require('http');
const express = require('express');
const path = require('path');
const fs = require('fs');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
const ServerConfig = require('./config/ServerConfig');
const TurnConfig = require('./config/TurnConfig');
const ClientManagerService = require('./services/ClientManagerService');
const WebSocketService = require('./services/WebSocketService');
const WebRTCSignalingService = require('./services/WebRTCSignalingService');
const TurnServerService = require('./services/TurnServerService');
const MessageHandler = require('./handlers/MessageHandler');
const ApiRoutes = require('./routes/ApiRoutes');

class ServerManager {
  constructor(port = ServerConfig.getPort()) {
    this.port = port;
    this.app = express();
    this.server = http.createServer(this.app);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    this.webrtcConfig = this.loadWebRTCConfig();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    this.initializeServices();
    this.setupExpress();
    this.setupGracefulShutdown();
    this.startCleanupTimer();
  }

  loadWebRTCConfig() {
    try {
      const configPath = path.join(__dirname, 'config/webrtc-config.json');
      if (fs.existsSync(configPath)) {
        return JSON.parse(fs.readFileSync(configPath, 'utf8'));
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WebRTC, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥');
    }
    
    return {
      available: false,
      signalingOnly: true
    };
  }

  initializeServices() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    this.clientManager = new ClientManagerService();
    
    // TURN Server Service - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–º
    this.turnServerService = new TurnServerService();
    
    // WebRTC Signaling Service —Å TURN –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    this.webrtcSignalingService = new WebRTCSignalingService(this.clientManager, this.turnServerService);
    
    // MessageHandler –∑–∞–≤–∏—Å–∏—Ç –æ—Ç clientManager –∏ webrtcSignalingService
    this.messageHandler = new MessageHandler(
      this.clientManager,
      this.webrtcSignalingService
    );
    
    // WebSocketService –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    this.webSocketService = new WebSocketService(
      this.server, 
      this.clientManager, 
      this.messageHandler
    );
    
    // API —Ä–æ—É—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    this.apiRoutes = new ApiRoutes(
      this.clientManager, 
      this.webSocketService,
      this.webrtcSignalingService,
      this.turnServerService
    );
  }

  setupExpress() {
    // CORS middleware –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    this.app.use((req, res, next) => {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
      if (req.method === 'OPTIONS') {
        res.sendStatus(200);
      } else {
        next();
      }
    });
    
    // JSON parser middleware
    this.app.use(express.json());
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    this.app.use(express.static(path.join(__dirname, '../public')));
    
    // API —Ä–æ—É—Ç—ã
    this.app.use('/api', this.apiRoutes.getRouter());
    
    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
    this.app.get('/status', (req, res) => {
      res.redirect('/api/status/detailed');
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.app.use((err, req, res, next) => {
      console.error('üí• –û—à–∏–±–∫–∞ Express:', err);
      res.status(500).json({ 
        error: 'Internal Server Error',
        message: err.message 
      });
    });
    
    // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    this.app.use((req, res) => {
      res.status(404).json({ 
        error: 'Not Found',
        path: req.path 
      });
    });
  }

  setupGracefulShutdown() {
    // Graceful shutdown
    process.on('SIGINT', () => {
      this.shutdown();
    });

    process.on('SIGTERM', () => {
      this.shutdown();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('uncaughtException', (error) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      this.shutdown(1);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
      this.shutdown(1);
    });
  }

  startCleanupTimer() {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö WebRTC —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      if (this.webrtcSignalingService) {
        this.webrtcSignalingService.cleanup();
      }
    }, 5 * 60 * 1000);
  }

  start() {
    return new Promise(async (resolve, reject) => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º TURN-—Å–µ—Ä–≤–µ—Ä
        console.log('üîÑ –ó–∞–ø—É—Å–∫ TURN-—Å–µ—Ä–≤–µ—Ä–∞...');
        const turnStarted = await this.turnServerService.start();
        
        if (turnStarted) {
          console.log('‚úÖ TURN-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TURN-—Å–µ—Ä–≤–µ—Ä–∞
          this.turnServerService.startMonitoring();
        } else {
          console.log('‚ö†Ô∏è TURN-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å STUN');
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
        this.server.listen(this.port, (error) => {
          if (error) {
            reject(error);
            return;
          }
          
          console.log(`üöÄ WebRTC –°–∏–≥–Ω–∞–ª–∏–Ω–≥ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
          console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${this.port}/api/status`);
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TURN —Å–µ—Ä–≤–µ—Ä–µ
          const turnStats = this.turnServerService.getStats();
          if (turnStats.isRunning) {
            console.log(`üîÑ TURN-—Å–µ—Ä–≤–µ—Ä: –ê–ö–¢–ò–í–ï–ù –Ω–∞ ${TurnConfig.TURN_SERVER_HOST}:${TurnConfig.TURN_SERVER_PORT}`);
            console.log(`üîê TURN credentials: ${TurnConfig.TURN_USERNAME}:${TurnConfig.TURN_PASSWORD}`);
          } else {
            console.log(`‚ö†Ô∏è TURN-—Å–µ—Ä–≤–µ—Ä: –ù–ï–ê–ö–¢–ò–í–ï–ù (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ STUN)`);
          }
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö
          if (this.webrtcConfig.available) {
            console.log(`üé• –ü—Ä–æ—Ç–æ–∫–æ–ª –≤–∏–¥–µ–æ: WebRTC (–ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)`);
            console.log(`üì° WebRTC –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: ${this.webrtcConfig.library?.name || 'wrtc'}`);
          } else {
            console.log(`üé• –ü—Ä–æ—Ç–æ–∫–æ–ª –≤–∏–¥–µ–æ: WebRTC (—Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥)`);
            console.log(`üì° WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥: –ê–∫—Ç–∏–≤–µ–Ω`);
          }
          
          console.log(`‚ö° –§—É–Ω–∫—Ü–∏–∏: WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥, TURN —Å–µ—Ä–≤–µ—Ä, –∫–æ–º–∞–Ω–¥–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ`);
          console.log(`üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã + WebRTC + TURN`);
          console.log(`üåê WebRTC —Å–µ—Å—Å–∏–∏: http://localhost:${this.port}/api/webrtc/stats`);
          console.log(`üîÑ TURN —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${this.port}/api/turn/stats`);
          
          resolve();
        });
        
        this.server.on('error', (error) => {
          console.error('üí• –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞:', error);
          reject(error);
        });
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        reject(error);
      }
    });
  }

  shutdown(exitCode = 0) {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TURN-—Å–µ—Ä–≤–µ—Ä–∞
    if (this.turnServerService) {
      this.turnServerService.stop();
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–∏—Å–∞
    if (this.webSocketService) {
      this.webSocketService.shutdown();
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    this.server.close(() => {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(exitCode);
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
    setTimeout(() => {
      console.log('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
      process.exit(exitCode);
    }, ServerConfig.SHUTDOWN_TIMEOUT);
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  getClientManager() {
    return this.clientManager;
  }

  getWebSocketService() {
    return this.webSocketService;
  }

  getWebRTCSignalingService() {
    return this.webrtcSignalingService;
  }

  getTurnServerService() {
    return this.turnServerService;
  }
}

module.exports = ServerManager; 