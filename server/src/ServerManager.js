const http = require('http');
const express = require('express');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
const ServerConfig = require('./config/ServerConfig');
const ClientManagerService = require('./services/ClientManagerService');
const VideoStatsService = require('./services/VideoStatsService');
const WebSocketService = require('./services/WebSocketService');
const MessageHandler = require('./handlers/MessageHandler');
const ApiRoutes = require('./routes/ApiRoutes');

class ServerManager {
  constructor(port = ServerConfig.getPort()) {
    this.port = port;
    this.app = express();
    this.server = http.createServer(this.app);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    this.initializeServices();
    this.setupExpress();
    this.setupGracefulShutdown();
  }

  initializeServices() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    this.clientManager = new ClientManagerService();
    this.videoStatsService = new VideoStatsService();
    
    // MessageHandler –∑–∞–≤–∏—Å–∏—Ç –æ—Ç clientManager –∏ videoStatsService
    this.messageHandler = new MessageHandler(this.clientManager, this.videoStatsService);
    
    // WebSocketService –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    this.webSocketService = new WebSocketService(
      this.server, 
      this.clientManager, 
      this.messageHandler, 
      this.videoStatsService
    );
    
    // API —Ä–æ—É—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    this.apiRoutes = new ApiRoutes(
      this.clientManager, 
      this.videoStatsService, 
      this.webSocketService
    );
  }

  setupExpress() {
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    this.app.use(express.static(path.join(__dirname, '../public')));
    
    // API —Ä–æ—É—Ç—ã
    this.app.use('/api', this.apiRoutes.getRouter());
    
    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
    this.app.get('/status', (req, res) => {
      res.redirect('/api/status/detailed');
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.app.use((err, req, res, next) => {
      console.error('üí• –û—à–∏–±–∫–∞ Express:', err);
      res.status(500).json({ 
        error: 'Internal Server Error',
        message: err.message 
      });
    });
    
    // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    this.app.use((req, res) => {
      res.status(404).json({ 
        error: 'Not Found',
        path: req.path 
      });
    });
  }

  setupGracefulShutdown() {
    // Graceful shutdown
    process.on('SIGINT', () => {
      this.shutdown();
    });

    process.on('SIGTERM', () => {
      this.shutdown();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('uncaughtException', (error) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      this.shutdown(1);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
      this.shutdown(1);
    });
  }

  start() {
    return new Promise((resolve, reject) => {
      this.server.listen(this.port, (error) => {
        if (error) {
          reject(error);
          return;
        }
        
        console.log(`üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${this.port}/api/status`);
        console.log(`üé• –ü—Ä–æ—Ç–æ–∫–æ–ª –≤–∏–¥–µ–æ: MJPEG over WebSocket`);
        console.log(`‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: –ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å`);
        console.log(`üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã, –º–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞`);
        
        resolve();
      });
      
      this.server.on('error', (error) => {
        console.error('üí• –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞:', error);
        reject(error);
      });
    });
  }

  shutdown(exitCode = 0) {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–∏—Å–∞
    if (this.webSocketService) {
      this.webSocketService.shutdown();
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    this.server.close(() => {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(exitCode);
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
    setTimeout(() => {
      console.log('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
      process.exit(exitCode);
    }, ServerConfig.SHUTDOWN_TIMEOUT);
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  getClientManager() {
    return this.clientManager;
  }

  getVideoStatsService() {
    return this.videoStatsService;
  }

  getWebSocketService() {
    return this.webSocketService;
  }
}

module.exports = ServerManager; 