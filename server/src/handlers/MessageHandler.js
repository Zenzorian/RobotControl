const WebSocket = require('ws');

class MessageHandler {
  constructor(clientManager, webrtcSignalingService = null) {
    this.clientManager = clientManager;
    this.webrtcSignalingService = webrtcSignalingService;
  }

  async handleMessage(ws, message) {
    const msgStr = message.toString();
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –¥–ª—è WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤
      let jsonMessage = null;
      try {
        jsonMessage = JSON.parse(msgStr);
      } catch (e) {
        // –ù–µ JSON - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤
      if (jsonMessage && jsonMessage.type === 'webrtc-signal' && this.webrtcSignalingService) {
        return await this.handleWebRTCSignal(ws, jsonMessage);
      }
      
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
      const parts = msgStr.split('!');
      const messageType = parts[0];

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const targetClient = this.clientManager.getTargetClient(ws.clientType);

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
      if (targetClient && targetClient.readyState === WebSocket.OPEN) {
        switch (messageType) {
          case 'COMMAND':
            this.handleCommand(ws, targetClient, msgStr);
            break;
            
          case 'TELEMETRY':
            this.handleTelemetry(ws, targetClient, msgStr);
            break;
            
          default:
            // –î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
            targetClient.send(msgStr);
            break;
        }
      } else {
        console.log(`‚ùó –¶–µ–ª–µ–≤–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${ws.clientType === 'controller' ? '—Ä–æ–±–æ—Ç' : '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä'})`);
        ws.send(`ERROR!TARGET_DISCONNECTED!${ws.clientType === 'controller' ? 'ROBOT' : 'CONTROLLER'}`);
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  async handleWebRTCSignal(ws, message) {
    if (!this.webrtcSignalingService) {
      console.log('\u26a0\ufe0f WebRTC \u0441\u0438\u0433\u043d\u0430\u043b\u0438\u043d\u0433 \u043d\u0435 \u0430\u043a\u0442\u0438\u0432\u0435\u043d');
      return false;
    }
    
    const { signalType, sessionId, data } = message;
    
    // –î–ª—è –≤—Å–µ—Ö WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å sessionId
    let signalData = {
      sessionId: sessionId
    };
    
    // –ï—Å–ª–∏ data —è–≤–ª—è–µ—Ç—Å—è JSON —Å—Ç—Ä–æ–∫–æ–π (–∫–∞–∫ –¥–ª—è answer –æ—Ç Unity), –ø–∞—Ä—Å–∏–º –µ—ë
    if (typeof data === 'string') {
      try {
        const parsedData = JSON.parse(data);
        signalData = { ...signalData, ...parsedData };
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ JSON, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        signalData.data = data;
      }
    } else if (data && typeof data === 'object') {
      // –ï—Å–ª–∏ data –æ–±—ä–µ–∫—Ç, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ
      signalData = { ...signalData, ...data };
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      signalData.data = data;
    }
    
    return await this.webrtcSignalingService.handleWebRTCSignal(ws, signalType, signalData);
  }

  handleCommand(ws, targetClient, message) {
    // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫ —Ä–æ–±–æ—Ç—É
    if (ws.clientType === 'controller') {
      targetClient.send(message);
      console.log('üì§ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ —Ä–æ–±–æ—Ç—É');
    }
  }

  handleTelemetry(ws, targetClient, message) {
    // –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç —Ä–æ–±–æ—Ç–∞ –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
    if (ws.clientType === 'robot') {
      targetClient.send(message);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è WebRTC
   */
  handleClientDisconnection(ws) {
    if (this.webrtcSignalingService) {
      this.webrtcSignalingService.handleClientDisconnection(ws);
    }
  }
}

module.exports = MessageHandler; 