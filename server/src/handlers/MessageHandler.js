const WebSocket = require('ws');

class MessageHandler {
  constructor(clientManager, videoStatsService) {
    this.clientManager = clientManager;
    this.videoStatsService = videoStatsService;
  }

  async handleMessage(ws, message) {
    const msgStr = message.toString();
    const parts = msgStr.split('!');
    const messageType = parts[0];
    
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∫–∞–¥—Ä–æ–≤ –æ—Ç —Ä–æ–±–æ—Ç–∞
      if (messageType === 'VIDEO_FRAME' && ws.clientType === 'robot') {
        await this.handleVideoFrame(parts[1]);
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const targetClient = this.clientManager.getTargetClient(ws.clientType);

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
      if (targetClient && targetClient.readyState === WebSocket.OPEN) {
        switch (messageType) {
          case 'COMMAND':
            this.handleCommand(ws, targetClient, msgStr);
            break;
            
          case 'TELEMETRY':
            this.handleTelemetry(ws, targetClient, msgStr);
            break;
            
          case 'REQUEST_VIDEO_STREAM':
            this.handleVideoStreamRequest(ws, targetClient, msgStr);
            break;
            
          case 'STOP_VIDEO_STREAM':
            this.handleVideoStreamStop(ws, targetClient, msgStr);
            break;
            
          default:
            // –î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
            targetClient.send(msgStr);
            break;
        }
      } else {
        console.log(`‚ùó –¶–µ–ª–µ–≤–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${ws.clientType === 'controller' ? '—Ä–æ–±–æ—Ç' : '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä'})`);
        ws.send(`ERROR!TARGET_DISCONNECTED!${ws.clientType === 'controller' ? 'ROBOT' : 'CONTROLLER'}`);
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  handleCommand(ws, targetClient, message) {
    // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∫ —Ä–æ–±–æ—Ç—É
    if (ws.clientType === 'controller') {
      targetClient.send(message);
      console.log('üì§ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ —Ä–æ–±–æ—Ç—É');
    }
  }

  handleTelemetry(ws, targetClient, message) {
    // –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç —Ä–æ–±–æ—Ç–∞ –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
    if (ws.clientType === 'robot') {
      targetClient.send(message);
    }
  }

  handleVideoStreamRequest(ws, targetClient, message) {
    console.log(`üìπ –ó–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ –æ—Ç ${ws.clientType}`);
    if (ws.clientType === 'controller' && targetClient) {
      targetClient.send(message);
      this.videoStatsService.startStreaming();
    }
  }

  handleVideoStreamStop(ws, targetClient, message) {
    console.log(`üìπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ –æ—Ç ${ws.clientType}`);
    if (targetClient) {
      targetClient.send(message);
    }
    this.videoStatsService.stopStreaming();
  }

  async handleVideoFrame(frameDataStr) {
    try {
      const frameData = JSON.parse(frameDataStr);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.videoStatsService.updateFrameStats(frameData);
      
      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–∞–¥—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
      if (this.clientManager.isClientConnected('controller')) {
        const message = `VIDEO_FRAME!${frameDataStr}`;
        this.clientManager.sendToClient('controller', message);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 30-–π –∫–∞–¥—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (this.videoStatsService.shouldLogFrame()) {
          const stats = this.videoStatsService.getStats();
          console.log(`üì∫ –ö–∞–¥—Ä #${frameData.frame_number} –ø–µ—Ä–µ—Å–ª–∞–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É (FPS: ${stats.actualFPS.toFixed(1)})`);
        }
      }
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∫–∞–¥—Ä–∞:', error);
    }
  }
}

module.exports = MessageHandler; 