#!/usr/bin/env node

/**
 * TURN —Å–µ—Ä–≤–µ—Ä —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

const TurnConfig = require('./config/TurnConfig');
const net = require('net');

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TURN —Å–µ—Ä–≤–µ—Ä—É
 */
async function testTurnConnection() {
    const host = TurnConfig.TURN_SERVER_HOST;
    const port = TurnConfig.TURN_SERVER_PORT;
    
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TURN —Å–µ—Ä–≤–µ—Ä—É: ${host}:${port}`);
    
    return new Promise((resolve) => {
        const socket = new net.Socket();
        let connected = false;
        
        const timeout = setTimeout(() => {
            if (!connected) {
                socket.destroy();
                console.log(`‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${host}:${port}`);
                resolve(false);
            }
        }, 5000);

        socket.connect(port, host, () => {
            connected = true;
            clearTimeout(timeout);
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${host}:${port}`);
            socket.destroy();
            resolve(true);
        });

        socket.on('error', (error) => {
            connected = true; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
            clearTimeout(timeout);
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${host}:${port}: ${error.message}`);
            resolve(false);
        });
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–º–µ–Ω–∏
 */
async function testDNSResolution() {
    const dns = require('dns').promises;
    const host = TurnConfig.TURN_SERVER_HOST;
    
    // –ï—Å–ª–∏ —ç—Ç–æ IP –∞–¥—Ä–µ—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º DNS —Ç–µ—Å—Ç
    if (net.isIP(host)) {
        console.log(`üîç ${host} - —ç—Ç–æ IP –∞–¥—Ä–µ—Å, DNS —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω`);
        return true;
    }
    
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è: ${host}`);
        const result = await dns.lookup(host);
        console.log(`‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω: ${host} -> ${result.address}`);
        return true;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ DNS –¥–ª—è ${host}: ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞
 */
async function testPing() {
    const { spawn } = require('child_process');
    const host = TurnConfig.TURN_SERVER_HOST;
    
    console.log(`üîç Ping —Ç–µ—Å—Ç –¥–ª—è: ${host}`);
    
    return new Promise((resolve) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É ping –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        const isWindows = process.platform === 'win32';
        const pingCmd = isWindows ? 'ping' : 'ping';
        const pingArgs = isWindows ? ['-n', '3', host] : ['-c', '3', host];
        
        const ping = spawn(pingCmd, pingArgs);
        let output = '';
        
        ping.stdout.on('data', (data) => {
            output += data.toString();
        });
        
        ping.stderr.on('data', (data) => {
            output += data.toString();
        });
        
        ping.on('close', (code) => {
            if (code === 0) {
                console.log(`‚úÖ Ping —É—Å–ø–µ—à–µ–Ω –¥–ª—è ${host}`);
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                const timeMatch = output.match(/time[<=](\d+\.?\d*)ms/i);
                if (timeMatch) {
                    console.log(`   –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${timeMatch[1]}ms`);
                }
                resolve(true);
            } else {
                console.log(`‚ùå Ping –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${host} (–∫–æ–¥: ${code})`);
                resolve(false);
            }
        });
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è ping
        setTimeout(() => {
            ping.kill();
            console.log(`‚ùå Ping —Ç–∞–π–º–∞—É—Ç –¥–ª—è ${host}`);
            resolve(false);
        }, 10000);
    });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
    console.log('üß™ TURN —Å–µ—Ä–≤–µ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    TurnConfig.logDiagnostics();
    console.log('');
    
    const tests = [
        { name: 'DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ', fn: testDNSResolution },
        { name: 'Ping —Ç–µ—Å—Ç', fn: testPing },
        { name: 'TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', fn: testTurnConnection }
    ];
    
    let passed = 0;
    let total = tests.length;
    
    for (const test of tests) {
        console.log(`\nüìã –¢–µ—Å—Ç: ${test.name}`);
        const result = await test.fn();
        if (result) {
            passed++;
        }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
    console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${passed === total ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò' : '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}`);
    
    if (passed < total) {
        console.log(`\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
        console.log(`   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ TURN —Å–µ—Ä–≤–µ—Ä`);
        console.log(`   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ firewall`);
        console.log(`   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ IP –∞–¥—Ä–µ—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ —Å–µ—Ç–∏`);
        console.log(`   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏/—Ä–æ—É—Ç–µ—Ä–∞`);
    }
    
    process.exit(passed === total ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
    runTests().catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });
}

module.exports = { testTurnConnection, testDNSResolution, testPing }; 