import asyncio
import websockets
import json
import logging
import time
import argparse

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("robot")

class RobotClient:
    def __init__(self, server_url, motor_controller=None):
        self.server_url = server_url
        self.motor_controller = motor_controller
        self.socket = None
        self.last_command_time = time.time()
        self.command_timeout = 2.0   # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
        self.motor_disable_timeout = 60.0  # –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        self.motors_stopped = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ—Ç–æ—Ä–æ–≤
        self.motors_disabled = False # –§–ª–∞–≥ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–æ—Ä–∞–º–∏
        self.safety_check_interval = 0.5  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É —Å–µ–∫—É–Ω–¥–∞—Ö
        self.is_connection_active = False
        logger.debug(f"–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ RobotClient –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_url}")
        
    async def connect(self):
        """–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ —ñ –ø–æ—á–∞—Ç–∏ —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        logger.info(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ {self.server_url}")
        
        try:
            self.is_connection_active = True
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–¥–∞—á—É –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–≤'—è–∑–∫—É
            safety_task = asyncio.create_task(self._safety_check_loop())
            
            async with websockets.connect(self.server_url) as socket:
                self.socket = socket
                logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç—Ä–æ–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
                await self.socket.send("REGISTER!ROBOT")
                logger.debug("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ REGISTER!ROBOT")
                
                # –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                while True:
                    try:
                        message = await self.socket.recv()
                        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message[:100]}..." if len(message) > 100 else f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
                        await self._handle_message(message)
                    except websockets.exceptions.ConnectionClosed:
                        logger.warning("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä–∏—Ç–æ")
                        self.is_connection_active = False
                        await self._stop_motors()
                        break
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                        
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.is_connection_active = False
            await self._stop_motors()
        finally:
            logger.info("–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è")
            self.is_connection_active = False
            safety_task.cancel()
            try:
                await safety_task
            except asyncio.CancelledError:
                pass
            await self._cleanup()
    
    async def _safety_check_loop(self):
        """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É —Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–æ–º–∞–Ω–¥"""
        logger.info("–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—É—Ä—É –±–µ–∑–ø–µ–∫–∏")
        try:
            while self.is_connection_active:
                current_time = time.time()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∫–æ–º–∞–Ω–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
                if current_time - self.last_command_time > self.command_timeout:
                    if not self.motors_stopped:
                        logger.warning(f"–ö–æ–º–∞–Ω–¥–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏—Å—è {self.command_timeout} —Å–µ–∫. –ó—É–ø–∏–Ω–∫–∞ –º–æ—Ç–æ—Ä—ñ–≤.")
                        await self._stop_motors()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–≤–Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–æ—Ç–æ—Ä—ñ–≤ –ø—Ä–∏ –¥–æ–≤–≥—ñ–π –±–µ–∑–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ
                if current_time - self.last_command_time > self.motor_disable_timeout:
                    if not self.motors_disabled:
                        logger.warning(f"–ö–æ–º–∞–Ω–¥–∏ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏—Å—è {self.motor_disable_timeout} —Å–µ–∫. –ü–æ–≤–Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–æ—Ç–æ—Ä—ñ–≤.")
                        await self._disable_motors()
                        
                await asyncio.sleep(self.safety_check_interval)
        except asyncio.CancelledError:
            logger.info("–ö–æ–Ω—Ç—É—Ä –±–µ–∑–ø–µ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    async def _stop_motors(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –º–æ—Ç–æ—Ä–∏, –∞–ª–µ –∑–∞–ª–∏—à–∏—Ç–∏ —ó—Ö —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º–∏"""
        if self.motor_controller and not self.motors_stopped:
            logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –º–æ—Ç–æ—Ä—ñ–≤ (–∑–∞–ª–∏—à–∏—Ç–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º–∏)")
            await self.motor_controller.stop_all()
            self.motors_stopped = True
    
    async def _disable_motors(self):
        """–ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –º–æ—Ç–æ—Ä–∏"""
        if self.motor_controller and not self.motors_disabled:
            logger.info("üîå –ü–æ–≤–Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–æ—Ç–æ—Ä—ñ–≤")
            await self.motor_controller.disable_all()
            self.motors_disabled = True
    
    async def _handle_message(self, message):
        """–û–±—Ä–æ–±–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ JSON –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if message.startswith('{') and message.endswith('}'):
                data = json.loads(message)
                
                if data.get('type') == 'command':
                    await self._handle_command(data)
                elif data.get('type') == 'telemetry_request':
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—é
                    telemetry = {
                        'type': 'telemetry',
                        'timestamp': time.time(),
                        'motors_stopped': self.motors_stopped,
                        'motors_disabled': self.motors_disabled,
                        'connection_active': self.is_connection_active
                    }
                    await self._send_telemetry(telemetry)
                else:
                    logger.debug(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø JSON –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {data.get('type')}")
            else:
                logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ-JSON –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
                
        except json.JSONDecodeError:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: {message}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    async def _handle_command(self, data):
        """–û–±—Ä–æ–±–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
        try:
            if not self.motor_controller:
                logger.warning("–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º–æ—Ç–æ—Ä—ñ–≤ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π")
                return
                
            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–æ–º–∞–Ω–¥–∏
            self.last_command_time = time.time()
            
            # –Ø–∫—â–æ –º–æ—Ç–æ—Ä–∏ –±—É–ª–∏ –∑—É–ø–∏–Ω–µ–Ω—ñ/–≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ, –≤–∫–ª—é—á–∞—î–º–æ —ó—Ö –∑–Ω–æ–≤—É
            if self.motors_stopped or self.motors_disabled:
                logger.info("‚ôªÔ∏è  –ü–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –º–æ—Ç–æ—Ä—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏")
                await self.motor_controller.enable_all()
                self.motors_stopped = False
                self.motors_disabled = False
            
            command_type = data.get('command')
            
            if command_type == 'move':
                x = data.get('x', 0)
                y = data.get('y', 0)
                
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –º–æ—Ç–æ—Ä—ñ–≤
                left_speed, right_speed = self._calculate_motor_speeds(x, y)
                
                logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ —Ä—É—Ö—É: x={x}, y={y} -> left={left_speed}, right={right_speed}")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –º–æ—Ç–æ—Ä–∞–º
                await self.motor_controller.set_motor_speeds(left_speed, right_speed)
                
            elif command_type == 'stop':
                logger.info("–ö–æ–º–∞–Ω–¥–∞ –∑—É–ø–∏–Ω–∫–∏")
                await self.motor_controller.stop_all()
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏: {e}")
    
    def _calculate_motor_speeds(self, x, y):
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ª—ñ–≤–æ–≥–æ —Ç–∞ –ø—Ä–∞–≤–æ–≥–æ –º–æ—Ç–æ—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–∂–æ–π—Å—Ç–∏–∫–∞
        x: -1.0 –¥–æ 1.0 (–ª—ñ–≤–æ-–ø—Ä–∞–≤–æ)
        y: -1.0 –¥–æ 1.0 (–Ω–∞–∑–∞–¥-–≤–ø–µ—Ä–µ–¥)
        """
        # –ü—Ä—è–º–∏–π —Ä—É—Ö/–Ω–∞–∑–∞–¥
        forward = y
        # –ü–æ–≤–æ—Ä–æ—Ç
        turn = x
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –¥–ª—è –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–æ–¥—É
        left_speed = forward + turn
        right_speed = forward - turn
        
        # –û–±–º–µ–∂—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ [-1.0, 1.0]
        left_speed = max(-1.0, min(1.0, left_speed))
        right_speed = max(-1.0, min(1.0, right_speed))
        
        return left_speed, right_speed
    
    async def _send_message(self, type, data):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if self.socket and self.socket.open:
            await self.socket.send(f"{type}!{json.dumps(data)}")
    
    async def _send_telemetry(self, data):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—é"""
        await self._send_message("TELEMETRY", data)
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏"""
        logger.info("–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤")
        await self._stop_motors()

async def main():
    parser = argparse.ArgumentParser(description='Robot Client')
    parser.add_argument('--server', '-s', default='ws://localhost:8080', help='WebSocket server URL')
    parser.add_argument('--debug', '-d', action='store_true', help='Enable debug logging')
    
    args = parser.parse_args()
    
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º–æ—Ç–æ—Ä—ñ–≤
    motor_controller = None
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º–æ—Ç–æ—Ä—ñ–≤
        from motor_controller import MotorController
        motor_controller = MotorController()
        await motor_controller.initialize()
        logger.info("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º–æ—Ç–æ—Ä—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    except ImportError:
        logger.warning("‚ö†Ô∏è  –ú–æ–¥—É–ª—å motor_controller –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –º–æ—Ç–æ—Ä—ñ–≤: {e}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç —Ä–æ–±–æ—Ç–∞
    client = RobotClient(args.server, motor_controller)
    
    try:
        await client.connect()
    except KeyboardInterrupt:
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞: {e}")
    finally:
        if motor_controller:
            await motor_controller.cleanup()

if __name__ == "__main__":
    asyncio.run(main()) 