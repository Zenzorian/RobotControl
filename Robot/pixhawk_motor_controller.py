#!/usr/bin/env python3
"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º–æ—Ç–æ—Ä–æ–≤ –¥–ª—è Pixhawk 6C —á–µ—Ä–µ–∑ MAVLink
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –≤ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç
"""

import time
import logging
from pymavlink import mavutil
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("pixhawk_controller")

class PixhawkMotorController:
    def __init__(self, connection_string="/dev/ttyACM0", baudrate=57600):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ Pixhawk
        
        :param connection_string: –ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (USB/UART)
        :param baudrate: –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        self.connection_string = connection_string
        self.baudrate = baudrate
        self.connection = None
        self.is_connected = False
        self.armed = False
        
        # –ö–∞–Ω–∞–ª—ã PWM –¥–ª—è –º–æ—Ç–æ—Ä–æ–≤ (4-–∫–æ–ª–µ—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
        self.left_motor_channels = [1, 2]   # PWM –∫–∞–Ω–∞–ª—ã 1,2 –¥–ª—è –ª–µ–≤—ã—Ö –∫–æ–ª–µ—Å
        self.right_motor_channels = [3, 4]  # PWM –∫–∞–Ω–∞–ª—ã 3,4 –¥–ª—è –ø—Ä–∞–≤—ã—Ö –∫–æ–ª–µ—Å
        
        # –î–∏–∞–ø–∞–∑–æ–Ω PWM –∑–Ω–∞—á–µ–Ω–∏–π (–º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã)
        self.pwm_min = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PWM
        self.pwm_max = 2000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PWM
        self.pwm_neutral = 1500  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
        
        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–≤
        self.current_left_speed = 0.0
        self.current_right_speed = 0.0
        
        # –ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
        self.command_thread = None
        self.running = False
        
        self.connect()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pixhawk"""
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pixhawk: {self.connection_string}:{self.baudrate}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ MAVLink
            self.connection = mavutil.mavlink_connection(
                self.connection_string, 
                baud=self.baudrate,
                source_system=255,  # ID –Ω–∞—à–µ–π –Ω–∞–∑–µ–º–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
                source_component=0
            )
            
            # –ñ–¥–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ heartbeat
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ heartbeat –æ—Ç Pixhawk...")
            self.connection.wait_heartbeat(timeout=10)
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Pixhawk! System ID: {self.connection.target_system}")
            self.is_connected = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
            self.start_command_thread()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∂–∏–º MANUAL –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è PWM
            self.set_mode("MANUAL")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pixhawk: {e}")
            self.is_connected = False
    
    def set_mode(self, mode_name):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–ª–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–∂–∏–º–∞
            mode_id = self.connection.mode_mapping().get(mode_name.upper())
            if mode_id is None:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode_name}")
                return False
            
            logger.info(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞: {mode_name} (ID: {mode_id})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
            self.connection.mav.set_mode_send(
                self.connection.target_system,
                mavutil.mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED,
                mode_id
            )
            
            return True
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    def arm(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤ (ARM)"""
        try:
            logger.info("üîì –í–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤ (ARM)")
            
            self.connection.mav.command_long_send(
                self.connection.target_system,
                self.connection.target_component,
                mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM,
                0,  # confirmation
                1,  # arm (1 = arm, 0 = disarm)
                0, 0, 0, 0, 0, 0  # unused parameters
            )
            
            self.armed = True
            logger.info("‚úÖ –ú–æ—Ç–æ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–≤: {e}")
            return False
    
    def disarm(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤ (DISARM)"""
        try:
            logger.info("üîí –í—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤ (DISARM)")
            
            self.connection.mav.command_long_send(
                self.connection.target_system,
                self.connection.target_component,
                mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM,
                0,  # confirmation
                0,  # disarm (1 = arm, 0 = disarm)
                0, 0, 0, 0, 0, 0  # unused parameters
            )
            
            self.armed = False
            logger.info("‚úÖ –ú–æ—Ç–æ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–≤: {e}")
            return False
    
    def speed_to_pwm(self, speed):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (-1.0 –¥–æ 1.0) –≤ PWM –∑–Ω–∞—á–µ–Ω–∏–µ
        
        :param speed: –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç -1.0 (–ø–æ–ª–Ω—ã–π –Ω–∞–∑–∞–¥) –¥–æ 1.0 (–ø–æ–ª–Ω—ã–π –≤–ø–µ—Ä–µ–¥)
        :return: PWM –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        speed = max(-1.0, min(1.0, speed))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PWM
        if speed >= 0:
            # –í–ø–µ—Ä–µ–¥: –æ—Ç neutral –¥–æ max
            pwm = self.pwm_neutral + (speed * (self.pwm_max - self.pwm_neutral))
        else:
            # –ù–∞–∑–∞–¥: –æ—Ç neutral –¥–æ min
            pwm = self.pwm_neutral + (speed * (self.pwm_neutral - self.pwm_min))
        
        return int(pwm)
    
    def set_motors(self, left_speed, right_speed):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –º–æ—Ç–æ—Ä–æ–≤
        
        :param left_speed: –°–∫–æ—Ä–æ—Å—Ç—å –ª–µ–≤–æ–≥–æ –º–æ—Ç–æ—Ä–∞ (-1.0 –¥–æ 1.0)
        :param right_speed: –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∞–≤–æ–≥–æ –º–æ—Ç–æ—Ä–∞ (-1.0 –¥–æ 1.0)
        """
        self.current_left_speed = left_speed
        self.current_right_speed = right_speed
        
        logger.debug(f"üéÆ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤: L={left_speed:.2f}, R={right_speed:.2f}")
    
    def set_motor_speed(self, motor_side, speed):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –º–æ—Ç–æ—Ä–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API)
        
        :param motor_side: "left" –∏–ª–∏ "right"
        :param speed: –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç -1.0 –¥–æ 1.0
        """
        if motor_side == "left":
            self.set_motors(speed, self.current_right_speed)
        elif motor_side == "right":
            self.set_motors(self.current_left_speed, speed)
    
    def send_pwm_commands(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ PWM –∫–æ–º–∞–Ω–¥ –≤ Pixhawk"""
        if not self.is_connected:
            return
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ PWM
            left_pwm = self.speed_to_pwm(self.current_left_speed)
            right_pwm = self.speed_to_pwm(self.current_right_speed)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ PWM –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (1-8)
            pwm_values = [65535] * 8  # 65535 = –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PWM –¥–ª—è –ª–µ–≤—ã—Ö –∫–æ–ª–µ—Å (–∫–∞–Ω–∞–ª—ã 1,2)
            for channel in self.left_motor_channels:
                pwm_values[channel - 1] = left_pwm
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PWM –¥–ª—è –ø—Ä–∞–≤—ã—Ö –∫–æ–ª–µ—Å (–∫–∞–Ω–∞–ª—ã 3,4)
            for channel in self.right_motor_channels:
                pwm_values[channel - 1] = right_pwm
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É RC_CHANNELS_OVERRIDE
            self.connection.mav.rc_channels_override_send(
                self.connection.target_system,
                self.connection.target_component,
                *pwm_values  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –≤ 8 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            )
            
            logger.debug(f"üì° PWM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: L={left_pwm}Œºs (–∫–∞–Ω–∞–ª—ã {self.left_motor_channels}), R={right_pwm}Œºs (–∫–∞–Ω–∞–ª—ã {self.right_motor_channels})")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PWM: {e}")
    
    def start_command_thread(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥"""
        if self.command_thread and self.command_thread.is_alive():
            return
        
        self.running = True
        self.command_thread = threading.Thread(target=self._command_loop, daemon=True)
        self.command_thread.start()
        logger.info("üîÑ –ü–æ—Ç–æ–∫ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—â–µ–Ω")
    
    def _command_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥"""
        while self.running and self.is_connected:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PWM –∫–æ–º–∞–Ω–¥—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π 20 –ì—Ü
                self.send_pwm_commands()
                time.sleep(0.05)  # 50ms = 20 –ì—Ü
                
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∫–æ–º–∞–Ω–¥: {e}")
                time.sleep(0.1)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ—Ç–æ—Ä–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤")
        self.set_motors(0.0, 0.0)
        time.sleep(0.1)  # –î–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ Pixhawk –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∫–æ–º–∞–Ω–¥
        self.running = False
        if self.command_thread and self.command_thread.is_alive():
            self.command_thread.join(timeout=1.0)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Ç–æ—Ä—ã
        self.stop()
        
        # –í—ã–∫–ª—é—á–∞–µ–º –º–æ—Ç–æ—Ä—ã
        if self.armed:
            self.disarm()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.connection:
            self.connection.close()
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
if __name__ == "__main__":
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (–∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        controller = PixhawkMotorController("/dev/ttyUSB0", 57600)
        
        if not controller.is_connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pixhawk")
            exit(1)
        
        print("‚úÖ Pixhawk –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤...")
        
        # –í–∫–ª—é—á–∞–µ–º –º–æ—Ç–æ—Ä—ã
        controller.arm()
        time.sleep(2)
        
        # –¢–µ—Å—Ç –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥
        print("‚û°Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥")
        controller.set_motors(0.3, 0.3)
        time.sleep(3)
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞")
        controller.stop()
        time.sleep(2)
        
        # –ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ
        print("‚Ü™Ô∏è –ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ")
        controller.set_motors(-0.2, 0.2)
        time.sleep(2)
        
        # –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
        print("‚Ü©Ô∏è –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ")
        controller.set_motors(0.2, -0.2)
        time.sleep(2)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        print("üõë –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
        controller.stop()
        time.sleep(1)
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
    finally:
        if 'controller' in locals():
            controller.cleanup() 