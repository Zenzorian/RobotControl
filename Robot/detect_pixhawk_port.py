#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ Pixhawk –Ω–∞ Raspberry Pi
"""

import os
import glob
import serial
import time
from pymavlink import mavutil

def find_serial_ports():
    """–ù–∞–π—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã"""
    ports = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è Raspberry Pi
    possible_ports = [
        '/dev/ttyACM*',    # USB CDC —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–±—ã—á–Ω–æ Pixhawk)
        '/dev/ttyUSB*',    # USB-Serial –∞–¥–∞–ø—Ç–µ—Ä—ã
        '/dev/ttyAMA*',    # UART –ø–æ—Ä—Ç—ã Raspberry Pi
        '/dev/serial/by-id/*'  # –ü–æ—Ä—Ç—ã –ø–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    ]
    
    for pattern in possible_ports:
        ports.extend(glob.glob(pattern))
    
    return sorted(ports)

def test_port_permissions(port):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç
        with serial.Serial(port, 9600, timeout=0.1):
            pass
        return True
    except serial.SerialException as e:
        if "Permission denied" in str(e):
            return False
        return True  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏
    except Exception:
        return True

def test_mavlink_connection(port, baudrate=57600, timeout=5):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å MAVLink —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç—É"""
    try:
        print(f"  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MAVLink –Ω–∞ {port}:{baudrate}...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        connection = mavutil.mavlink_connection(port, baud=baudrate)
        
        # –ñ–¥–µ–º heartbeat —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        start_time = time.time()
        while time.time() - start_time < timeout:
            msg = connection.recv_match(type='HEARTBEAT', blocking=False)
            if msg:
                print(f"  ‚úÖ MAVLink heartbeat –ø–æ–ª—É—á–µ–Ω!")
                print(f"     System ID: {msg.get_srcSystem()}")
                print(f"     Component ID: {msg.get_srcComponent()}")
                print(f"     Type: {msg.type}")
                print(f"     Autopilot: {msg.autopilot}")
                connection.close()
                return True
            time.sleep(0.1)
        
        connection.close()
        print(f"  ‚ùå –ù–µ—Ç MAVLink heartbeat –∑–∞ {timeout}—Å")
        return False
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ MAVLink: {e}")
        return False

def get_port_info(port):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—É"""
    info = {"port": port, "exists": False, "readable": False, "device_info": ""}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if os.path.exists(port):
        info["exists"] = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        info["readable"] = test_port_permissions(port)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        try:
            if '/dev/serial/by-id/' in port:
                # –î–ª—è –ø–æ—Ä—Ç–æ–≤ by-id –∏–º—è —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                info["device_info"] = os.path.basename(port)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ udev
                import subprocess
                result = subprocess.run(['udevadm', 'info', '--name=' + port], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        if 'ID_VENDOR' in line or 'ID_MODEL' in line:
                            info["device_info"] += line.split('=')[1] + " "
        except:
            pass
    
    return info

def main():
    print("üîç –ü–æ–∏—Å–∫ Pixhawk –Ω–∞ Raspberry Pi")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Ä—Ç—ã
    ports = find_serial_ports()
    
    if not ports:
        print("‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ Pixhawk –∫ USB")
        print("   - –í–∫–ª—é—á–µ–Ω –ª–∏ Pixhawk")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {len(ports)}")
    print("-" * 50)
    
    pixhawk_candidates = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Ä—Ç
    for port in ports:
        print(f"\nüîå –ü–æ—Ä—Ç: {port}")
        info = get_port_info(port)
        
        if not info["exists"]:
            print("  ‚ùå –ü–æ—Ä—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            continue
        
        if not info["readable"]:
            print("  ‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            print("     –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo chmod 666 " + port)
            print("     –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É dialout:")
            print("     sudo usermod -a -G dialout $USER")
            continue
        
        print("  ‚úÖ –ü–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
        if info["device_info"]:
            print(f"  üìù –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {info['device_info'].strip()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        baudrates = [57600, 115200, 9600]
        for baud in baudrates:
            if test_mavlink_connection(port, baud, timeout=3):
                pixhawk_candidates.append((port, baud))
                print(f"  üéØ Pixhawk –Ω–∞–π–¥–µ–Ω –Ω–∞ {port}:{baud}")
                break
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    if not pixhawk_candidates:
        print("‚ùå Pixhawk –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. Pixhawk –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω")
        print("   2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π USB –∫–∞–±–µ–ª—å (–Ω—É–∂–µ–Ω data-–∫–∞–±–µ–ª—å)")
        print("   3. Pixhawk –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è MAVLink")
        print("   4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å USB –∫–∞–±–µ–ª—å")
        print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ Pixhawk")
        print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QGroundControl –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    else:
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã Pixhawk —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        for i, (port, baud) in enumerate(pixhawk_candidates, 1):
            print(f"   {i}. {port} –Ω–∞ {baud} baud")
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
        best_port, best_baud = pixhawk_candidates[0]
        print(f"\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞:")
        print(f"python3 robot_client.py --use-motors --pixhawk --pixhawk-port {best_port} --pixhawk-baud {best_baud}")
        
        print(f"\nüß™ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"python3 test_4wheel_pixhawk.py")
        print(f"   (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Ä—Ç: {best_port}, —Å–∫–æ—Ä–æ—Å—Ç—å: {best_baud})")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 