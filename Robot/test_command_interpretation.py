#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ã –º–æ—Ç–æ—Ä–æ–≤
"""

import json
import time
import sys
from pixhawk_motor_controller import PixhawkMotorController

class CommandTester:
    def __init__(self, motor_controller=None):
        self.motor_controller = motor_controller
        
    def _calculate_motor_speeds(self, x, y):
        """–ö–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ robot_client.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ x —Ç–∞ y –º–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ -1 –¥–æ 1
        # –ü—Ä–æ—Å—Ç–∞ –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–∞–ª—å–Ω–∞ —Å—Ö–µ–º–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—É—Ö—É
        left_speed = y + x
        right_speed = y - x
        
        # –û–±–º–µ–∂—É—î–º–æ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ -1 –¥–æ 1
        left_speed = max(-1, min(1, left_speed))
        right_speed = max(-1, min(1, right_speed))
        
        return left_speed, right_speed
    
    def test_command_interpretation(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–∂–æ–π—Å—Ç–∏–∫–∞"""
        print("üéÆ –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (x, y, –æ–ø–∏—Å–∞–Ω–∏–µ)
        test_commands = [
            (0.0, 0.0, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Ü–µ–Ω—Ç—Ä –¥–∂–æ–π—Å—Ç–∏–∫–∞)"),
            (0.0, 1.0, "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥"),
            (0.0, -1.0, "–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥"),
            (1.0, 0.0, "–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ –Ω–∞ –º–µ—Å—Ç–µ"),
            (-1.0, 0.0, "–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ –Ω–∞ –º–µ—Å—Ç–µ"),
            (0.5, 0.5, "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –≤–ø—Ä–∞–≤–æ"),
            (-0.5, 0.5, "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –≤–ª–µ–≤–æ"),
            (0.5, -0.5, "–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –≤–ø—Ä–∞–≤–æ"),
            (-0.5, -0.5, "–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –≤–ª–µ–≤–æ"),
            (1.0, 1.0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ –≤–ø–µ—Ä–µ–¥"),
            (-1.0, 1.0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ –≤–ø–µ—Ä–µ–¥"),
        ]
        
        print(f"{'–ö–æ–º–∞–Ω–¥–∞':<40} {'–õ–µ–≤—ã–π –º–æ—Ç–æ—Ä':<12} {'–ü—Ä–∞–≤—ã–π –º–æ—Ç–æ—Ä':<12} {'PWM –õ–µ–≤—ã–π':<12} {'PWM –ü—Ä–∞–≤—ã–π':<12}")
        print("-" * 88)
        
        for x, y, description in test_commands:
            left_speed, right_speed = self._calculate_motor_speeds(x, y)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PWM –∑–Ω–∞—á–µ–Ω–∏—è
            if self.motor_controller:
                left_pwm = self.motor_controller.speed_to_pwm(left_speed)
                right_pwm = self.motor_controller.speed_to_pwm(right_speed)
                pwm_left_str = f"{left_pwm}Œºs"
                pwm_right_str = f"{right_pwm}Œºs"
            else:
                pwm_left_str = "N/A"
                pwm_right_str = "N/A"
            
            print(f"{description:<40} {left_speed:>8.2f}    {right_speed:>8.2f}    {pwm_left_str:>10} {pwm_right_str:>10}")
    
    def test_unity_command_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç Unity"""
        print("\nüéØ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥ Unity")
        print("=" * 60)
        
        # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –æ—Ç Unity
        unity_commands = [
            {
                "leftStickValue": {"x": 0.0, "y": 0.0},
                "rightStickValue": {"x": 0.0, "y": 0.0},
                "cameraAngle": 90.0
            },
            {
                "leftStickValue": {"x": 0.0, "y": 0.8},
                "rightStickValue": {"x": 0.0, "y": 0.0},
                "cameraAngle": 90.0
            },
            {
                "leftStickValue": {"x": 0.6, "y": 0.4},
                "rightStickValue": {"x": 0.0, "y": 0.0},
                "cameraAngle": 45.0
            },
            {
                "leftStickValue": {"x": -0.8, "y": 0.0},
                "rightStickValue": {"x": 0.0, "y": 0.0},
                "cameraAngle": 135.0
            }
        ]
        
        print("Unity –∫–æ–º–∞–Ω–¥–∞ ‚Üí –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è")
        print("-" * 60)
        
        for i, cmd in enumerate(unity_commands, 1):
            left_stick = cmd["leftStickValue"]
            x, y = left_stick["x"], left_stick["y"]
            left_speed, right_speed = self._calculate_motor_speeds(x, y)
            
            print(f"\n–ö–æ–º–∞–Ω–¥–∞ {i}:")
            print(f"  –õ–µ–≤—ã–π —Å—Ç–∏–∫: x={x:>6.2f}, y={y:>6.2f}")
            print(f"  –£–≥–æ–ª –∫–∞–º–µ—Ä—ã: {cmd['cameraAngle']:>6.1f}¬∞")
            print(f"  ‚Üí –õ–µ–≤—ã–π –º–æ—Ç–æ—Ä: {left_speed:>6.2f}")
            print(f"  ‚Üí –ü—Ä–∞–≤—ã–π –º–æ—Ç–æ—Ä: {right_speed:>6.2f}")
            
            if self.motor_controller:
                left_pwm = self.motor_controller.speed_to_pwm(left_speed)
                right_pwm = self.motor_controller.speed_to_pwm(right_speed)
                print(f"  ‚Üí PWM: L={left_pwm}Œºs, R={right_pwm}Œºs")
    
    def test_live_commands(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥"""
        print("\nüïπÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥")
        print("=" * 60)
        print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: x y")
        print("–ì–¥–µ x –∏ y –æ—Ç -1.0 –¥–æ 1.0")
        print("–ü—Ä–∏–º–µ—Ä—ã: '0 1' (–≤–ø–µ—Ä–µ–¥), '1 0' (–ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ), 'q' (–≤—ã—Ö–æ–¥)")
        print("-" * 60)
        
        while True:
            try:
                user_input = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (x y): ").strip()
                
                if user_input.lower() in ['q', 'quit', 'exit']:
                    break
                
                parts = user_input.split()
                if len(parts) != 2:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: x y")
                    continue
                
                x = float(parts[0])
                y = float(parts[1])
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                x = max(-1.0, min(1.0, x))
                y = max(-1.0, min(1.0, y))
                
                left_speed, right_speed = self._calculate_motor_speeds(x, y)
                
                print(f"üìä –î–∂–æ–π—Å—Ç–∏–∫: x={x:>6.2f}, y={y:>6.2f}")
                print(f"üéÆ –ú–æ—Ç–æ—Ä—ã: L={left_speed:>6.2f}, R={right_speed:>6.2f}")
                
                if self.motor_controller:
                    left_pwm = self.motor_controller.speed_to_pwm(left_speed)
                    right_pwm = self.motor_controller.speed_to_pwm(right_speed)
                    print(f"üì° PWM: L={left_pwm}Œºs, R={right_pwm}Œºs")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
                    if self.motor_controller.is_connected:
                        print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Pixhawk...")
                        self.motor_controller.set_motors(left_speed, right_speed)
                        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –æ—Ç -1.0 –¥–æ 1.0")
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def test_movement_patterns(self):
        """–¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è"""
        print("\nüîÑ –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è")
        print("=" * 60)
        
        if not self.motor_controller or not self.motor_controller.is_connected:
            print("‚ö†Ô∏è Pixhawk –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç—ã")
            return
        
        patterns = [
            ("–ö–≤–∞–¥—Ä–∞—Ç", [
                (0, 0.5, 2),    # –í–ø–µ—Ä–µ–¥
                (0.5, 0, 1),    # –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
                (0, 0.5, 2),    # –í–ø–µ—Ä–µ–¥
                (0.5, 0, 1),    # –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
                (0, 0.5, 2),    # –í–ø–µ—Ä–µ–¥
                (0.5, 0, 1),    # –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
                (0, 0.5, 2),    # –í–ø–µ—Ä–µ–¥
                (0.5, 0, 1),    # –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
            ]),
            ("–í–æ—Å—å–º–µ—Ä–∫–∞", [
                (0.3, 0.3, 2),   # –í–ø–µ—Ä–µ–¥-–≤–ø—Ä–∞–≤–æ
                (-0.3, 0.3, 2),  # –í–ø–µ—Ä–µ–¥-–≤–ª–µ–≤–æ
                (0.3, 0.3, 2),   # –í–ø–µ—Ä–µ–¥-–≤–ø—Ä–∞–≤–æ
                (-0.3, 0.3, 2),  # –í–ø–µ—Ä–µ–¥-–≤–ª–µ–≤–æ
            ])
        ]
        
        for pattern_name, moves in patterns:
            print(f"\nüéØ –ü–∞—Ç—Ç–µ—Ä–Ω: {pattern_name}")
            response = input("–í—ã–ø–æ–ª–Ω–∏—Ç—å? (y/n): ").strip().lower()
            
            if response == 'y':
                # –í–∫–ª—é—á–∞–µ–º –º–æ—Ç–æ—Ä—ã
                if not self.motor_controller.armed:
                    self.motor_controller.arm()
                    time.sleep(2)
                
                for i, (x, y, duration) in enumerate(moves, 1):
                    left_speed, right_speed = self._calculate_motor_speeds(x, y)
                    print(f"  –®–∞–≥ {i}: x={x:>5.2f}, y={y:>5.2f} ‚Üí L={left_speed:>5.2f}, R={right_speed:>5.2f} ({duration}—Å)")
                    
                    self.motor_controller.set_motors(left_speed, right_speed)
                    time.sleep(duration)
                
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
                print("  üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞")
                self.motor_controller.stop()
                time.sleep(1)

def main():
    print("ü§ñ –¢–µ—Å—Ç–µ—Ä –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ —Ä–æ–±–æ—Ç–∞")
    print("=" * 60)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ Pixhawk
    use_pixhawk = input("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pixhawk –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è? (y/n): ").strip().lower() == 'y'
    
    motor_controller = None
    if use_pixhawk:
        port = input("–ü–æ—Ä—Ç Pixhawk (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /dev/ttyUSB0): ").strip() or "/dev/ttyUSB0"
        baud_input = input("–°–∫–æ—Ä–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 57600): ").strip()
        baudrate = int(baud_input) if baud_input else 57600
        
        try:
            print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pixhawk: {port}:{baudrate}")
            motor_controller = PixhawkMotorController(port, baudrate)
            
            if motor_controller.is_connected:
                print("‚úÖ Pixhawk –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pixhawk")
                motor_controller = None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            motor_controller = None
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = CommandTester(motor_controller)
    
    while True:
        print("\n" + "=" * 60)
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
        print("1. –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥")
        print("2. –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ Unity –∫–æ–º–∞–Ω–¥")
        print("3. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç")
        print("4. –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
        
        if choice == '1':
            tester.test_command_interpretation()
        elif choice == '2':
            tester.test_unity_command_format()
        elif choice == '3':
            tester.test_live_commands()
        elif choice == '4':
            tester.test_movement_patterns()
        elif choice == '5':
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    # –û—á–∏—Å—Ç–∫–∞
    if motor_controller:
        motor_controller.cleanup()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
    finally:
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...") 