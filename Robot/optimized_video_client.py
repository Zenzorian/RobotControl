#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ä–æ–±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏–¥–µ–æ –±–µ–∑ WebRTC
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç MJPEG —Å—Ç—Ä–∏–º–∏–Ω–≥ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import websockets
import json
import logging
import cv2
import numpy as np
import argparse
import time
import base64
from threading import Thread, Event
import queue
from concurrent.futures import ThreadPoolExecutor
import gc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("robot_video")

class OptimizedVideoStreamer:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä –±–µ–∑ WebRTC"""
    
    def __init__(self, camera_index=0, test_mode=False, quality=60, fps=30, resolution=(480, 360)):
        self.camera_index = camera_index
        self.test_mode = test_mode
        self.quality = quality  # JPEG –∫–∞—á–µ—Å—Ç–≤–æ (0-100)
        self.fps = fps         # –¶–µ–ª–µ–≤–æ–π FPS
        self.resolution = resolution
        
        self.camera = None
        self.frame_count = 0
        self.is_streaming = False
        self.frame_queue = queue.Queue(maxsize=1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        self.stop_event = Event()
        
        # –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.executor = ThreadPoolExecutor(max_workers=2)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.last_fps_time = time.time()
        self.fps_counter = 0
        self.actual_fps = 0
        
        self._initialize_camera()
    
    def _test_camera_read_with_timeout(self, timeout=3.0):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        def read_frame():
            try:
                ret, frame = self.camera.read()
                return ret, frame
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")
                return False, None
        
        try:
            future = self.executor.submit(read_frame)
            ret, frame = future.result(timeout=timeout)
            return ret, frame
        except Exception as e:
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã ({timeout}s): {e}")
            return False, None
    
    def _initialize_camera(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã"""
        # –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≤–∏—Å–∞–Ω–∏—è (–û–¢–ö–õ–Æ–ß–ï–ù)
        # logger.info("üß™ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≤–∏—Å–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã)")
        # self.test_mode = True
        # return
        
        if self.test_mode:
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            return
            
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã {self.camera_index}...")
        
        for attempt in range(3):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã")
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                self.camera = cv2.VideoCapture(self.camera_index)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                if self.camera.isOpened():
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                    self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, self.resolution[0])
                    self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, self.resolution[1])
                    self.camera.set(cv2.CAP_PROP_FPS, self.fps)
                    self.camera.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä
                    self.camera.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'))  # MJPEG –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º 3—Å)...")
                    ret, test_frame = self._test_camera_read_with_timeout(timeout=2.0)  # –ë—ã—Å—Ç—Ä–µ–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                    logger.info(f"üß™ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω: ret={ret}")
                    
                    if ret and test_frame is not None:
                        logger.info(f"‚úÖ –ö–∞–º–µ—Ä–∞ {self.camera_index} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                        logger.info(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {test_frame.shape[1]}x{test_frame.shape[0]}")
                        return
                    else:
                        logger.warning(f"‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä—ã")
                        
                if self.camera:
                    self.camera.release()
                    self.camera = None
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if self.camera:
                    try:
                        self.camera.release()
                    except:
                        pass
                    self.camera = None
                    
            if attempt < 2:
                logger.info(f"–ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(2)
        
        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É. –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
        self.test_mode = True
        self.camera = None
        
        # –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–û–¢–ö–õ–Æ–ß–ï–ù)
        # logger.info("üß™ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
        # self.test_mode = True
        # if self.camera:
        #     try:
        #         self.camera.release()
        #     except:
        #         pass
        #     self.camera = None
    
    def _create_test_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞"""
        frame = np.zeros((self.resolution[1], self.resolution[0], 3), np.uint8)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç
        for y in range(self.resolution[1]):
            for x in range(self.resolution[0]):
                frame[y, x] = [
                    int(255 * x / self.resolution[0]),
                    int(255 * y / self.resolution[1]),
                    int(255 * ((x + y + self.frame_count) % 256) / 256)
                ]
        
        # –¢–µ–∫—Å—Ç
        cv2.putText(frame, "TEST MODE", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        cv2.putText(frame, f"Frame: {self.frame_count}", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(frame, f"FPS: {self.actual_fps:.1f}", (50, 130), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        
        return frame
    
    def _capture_frame(self):
        """–ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞"""
        if self.test_mode or not self.camera or not self.camera.isOpened():
            return self._create_test_frame()
        
        try:
            logger.debug("üì∑ –í—ã–∑—ã–≤–∞–µ–º camera.read() —Å —Ç–∞–π–º–∞—É—Ç–æ–º...")
            ret, frame = self._test_camera_read_with_timeout(timeout=0.5)  # –ë—ã—Å—Ç—Ä–µ–µ –∑–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤
            logger.debug(f"üì∑ camera.read() –∑–∞–≤–µ—Ä—à–µ–Ω: ret={ret}, frame={'OK' if frame is not None else 'None'}")
            
            if not ret or frame is None:
                logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π")
                return self._create_test_frame()
            
            return frame
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞: {e}")
            return self._create_test_frame()
    
    def _encode_frame(self, frame):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ JPEG"""
        try:
            encode_params = [cv2.IMWRITE_JPEG_QUALITY, self.quality]
            success, buffer = cv2.imencode('.jpg', frame, encode_params)
            
            if success:
                return base64.b64encode(buffer).decode('utf-8')
            else:
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def _frame_capture_loop(self):
        """–¶–∏–∫–ª –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤"""
        logger.info("üé• –ü–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        
        frame_interval = 1.0 / self.fps
        last_frame_time = 0
        capture_count = 0
        
        while not self.stop_event.is_set() and self.is_streaming:
            current_time = time.time()
            
            if current_time - last_frame_time >= frame_interval:
                try:
                    capture_count += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤ (–∏ –ø–µ—Ä–≤—ã–µ 3 –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                    if capture_count % 30 == 1 or capture_count <= 3:
                        logger.info(f"üé¨ –ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤: #{capture_count}, FPS: {self.actual_fps:.1f}")
                    
                    logger.debug(f"üé• –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä #{capture_count}...")
                    frame = self._capture_frame()
                    logger.debug(f"üé• –ö–∞–¥—Ä #{capture_count} –∑–∞—Ö–≤–∞—á–µ–Ω: {frame is not None}")
                    if frame is None:
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–¥—Ä")
                        continue
                        
                    logger.debug(f"üé® –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–¥—Ä #{capture_count}...")
                    encoded_frame = self._encode_frame(frame)
                    logger.debug(f"üé® –ö–∞–¥—Ä #{capture_count} –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {encoded_frame is not None}")
                    
                    if encoded_frame:
                        try:
                            frame_data = {
                                'type': 'video_frame',
                                'data': encoded_frame,
                                'timestamp': current_time,
                                'frame_number': self.frame_count
                            }
                            
                            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                            try:
                                self.frame_queue.get_nowait()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–∞–¥—Ä
                            except queue.Empty:
                                pass
                            
                            self.frame_queue.put_nowait(frame_data)
                            
                            self.frame_count += 1
                            self.fps_counter += 1
                            
                            logger.debug(f"üé¨ –ö–∞–¥—Ä #{self.frame_count} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
                            
                        except queue.Full:
                            logger.debug("üì¶ –û—á–µ—Ä–µ–¥—å –∫–∞–¥—Ä–æ–≤ –ø–æ–ª–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä")
                    else:
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–¥—Ä")
                    
                    last_frame_time = current_time
                    
                    # –ü–æ–¥—Å—á–µ—Ç FPS
                    if current_time - self.last_fps_time >= 1.0:
                        self.actual_fps = self.fps_counter / (current_time - self.last_fps_time)
                        self.fps_counter = 0
                        self.last_fps_time = current_time
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞ #{capture_count}: {e}")
                    time.sleep(0.1)
            else:
                time.sleep(0.0001)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        
        logger.info("üõë –ü–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def start_streaming(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
        if self.is_streaming:
            logger.info("–í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        logger.info("üé¨ –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞...")
        self.is_streaming = True
        self.stop_event.clear()
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        queue_size = self.frame_queue.qsize()
        if queue_size > 0:
            logger.info(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–¥—Ä–æ–≤ ({queue_size} –∫–∞–¥—Ä–æ–≤)")
            
        while not self.frame_queue.empty():
            try:
                self.frame_queue.get_nowait()
            except queue.Empty:
                break
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞
        logger.info("üé• –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤...")
        self.capture_thread = Thread(target=self._frame_capture_loop, daemon=True)
        self.capture_thread.start()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞...")
        time.sleep(0.01)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–ø—É—Å–∫–∞
        logger.info("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–∞...")
        
        if self.capture_thread.is_alive():
            logger.info("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤")
        
        logger.info("üìã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ start_streaming...")
        logger.info("–í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_streaming(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
        if not self.is_streaming:
            return
            
        self.is_streaming = False
        self.stop_event.set()
        
        if hasattr(self, 'capture_thread') and self.capture_thread.is_alive():
            self.capture_thread.join(timeout=1.0)
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        while not self.frame_queue.empty():
            try:
                self.frame_queue.get_nowait()
            except queue.Empty:
                break
                
        logger.info("–í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_frame(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞"""
        try:
            frame_data = self.frame_queue.get_nowait()
            logger.debug(f"üé¨ –ü–æ–ª—É—á–µ–Ω –∫–∞–¥—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏: #{frame_data.get('frame_number', '?')}")
            return frame_data
        except queue.Empty:
            logger.debug("üì≠ –û—á–µ—Ä–µ–¥—å –∫–∞–¥—Ä–æ–≤ –ø—É—Å—Ç–∞")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")
            return None
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.stop_streaming()
        
        if self.camera:
            self.camera.release()
            self.camera = None
            
        self.executor.shutdown(wait=True)
        gc.collect()

class OptimizedRobotClient:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–æ–±–æ—Ç –∫–ª–∏–µ–Ω—Ç"""
    
    def __init__(self, server_url, motor_controller=None, video_config=None):
        self.server_url = server_url
        self.motor_controller = motor_controller
        self.socket = None
        
        # –í–∏–¥–µ–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        video_config = video_config or {}
        self.video_quality = video_config.get('quality', 60)  # –ü–æ–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.video_fps = video_config.get('fps', 30)  # –ü–æ–≤—ã—à–∞–µ–º FPS –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        self.video_resolution = video_config.get('resolution', (480, 360))  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.test_video_mode = video_config.get('test_mode', False)
        self.camera_index = video_config.get('camera_index', 0)
        
        self.video_streamer = None
        
        # –ú–æ—Ç–æ—Ä—ã
        self.last_command_time = time.time()
        self.command_timeout = 2.0
        self.motor_disable_timeout = 60.0
        self.motors_stopped = False
        self.motors_disabled = False
        self.is_connection_active = False
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {server_url}")
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        
        try:
            self.is_connection_active = True
            safety_task = asyncio.create_task(self._safety_check_loop())
            
            async with websockets.connect(self.server_url) as socket:
                self.socket = socket
                logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                self._initialize_video_streamer()
                
                await self.socket.send("REGISTER!ROBOT")
                logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ROBOT")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                await self._start_video_streaming()
                logger.info("–í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
                logger.info("üöÄ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ...")
                try:
                    video_task = asyncio.create_task(self._video_send_loop())
                    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–∞")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤–∏–¥–µ–æ: {e}")
                    import traceback
                    logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                    raise
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –≤–∏–¥–µ–æ (sleep 0.01)...")
                await asyncio.sleep(0.01)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logger.info("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤–∏–¥–µ–æ...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏
                if video_task.done():
                    logger.error("‚ùå –ó–∞–¥–∞—á–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
                    try:
                        result = video_task.result()
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏: {result}")
                    except Exception as e:
                        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–µ –≤–∏–¥–µ–æ: {e}")
                        import traceback
                        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                else:
                    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –≤–∏–¥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
                message_count = 0
                
                timeout_count = 0
                
                while True:
                    try:
                        logger.debug(f"üéß –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–∞–π–º–∞—É—Ç #{timeout_count})...")
                        message = await asyncio.wait_for(self.socket.recv(), timeout=0.1)  # –ë—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        message_count += 1
                        timeout_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–æ–≤
                        
                        logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message_count}: {message[:50]}...")
                        
                        if message_count % 100 == 0:
                            logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
                        
                        await self._handle_message(message)
                        
                    except asyncio.TimeoutError:
                        timeout_count += 1
                        if timeout_count % 50 == 0:  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (50 * 0.1s)
                            logger.info(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {timeout_count/10:.1f} —Å–µ–∫—É–Ω–¥")
                        # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                        continue
                        
                    except websockets.exceptions.ConnectionClosed:
                        logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                        break
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                        break
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        finally:
            self.is_connection_active = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            safety_task.cancel()
            if 'video_task' in locals():
                video_task.cancel()
            
            try:
                await safety_task
            except asyncio.CancelledError:
                pass
                
            try:
                if 'video_task' in locals():
                    await video_task
            except asyncio.CancelledError:
                pass
                
            await self._cleanup()
    
    def _initialize_video_streamer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä–∞"""
        try:
            self.video_streamer = OptimizedVideoStreamer(
                camera_index=self.camera_index,
                test_mode=self.test_video_mode,
                quality=self.video_quality,
                fps=self.video_fps,
                resolution=self.video_resolution
            )
            logger.info("–í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä–∞: {e}")
    
    async def _video_send_loop(self):
        """–û—Ç–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ"""
        logger.info("üé¨ –í–•–û–î –≤ —Ñ—É–Ω–∫—Ü–∏—é _video_send_loop")
        
        try:
            logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
            
            frame_send_timeout = 2.0  # –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–∞
            last_successful_send = time.time()
            consecutive_errors = 0
            max_consecutive_errors = 10
            loop_count = 0
            
            logger.info("üîÑ –í—Ö–æ–¥–∏–º –≤ —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ...")
            logger.info(f"üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {self.is_connection_active}")
            
            while self.is_connection_active:
                try:
                    loop_count += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –∏—Ç–µ—Ä–∞—Ü–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
                    if loop_count % 30 == 1:
                        logger.info(f"üîÑ –¶–∏–∫–ª –≤–∏–¥–µ–æ: –∏—Ç–µ—Ä–∞—Ü–∏—è {loop_count}, –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {consecutive_errors}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
                    current_time = time.time()
                    if current_time - last_successful_send > frame_send_timeout:
                        logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {current_time - last_successful_send:.1f}s")
                        last_successful_send = current_time
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä
                    success = await self._send_video_frame()
                    if success:
                        last_successful_send = current_time
                        consecutive_errors = 0
                    else:
                        consecutive_errors += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
                    if consecutive_errors >= max_consecutive_errors:
                        logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –ø–æ–¥—Ä—è–¥: {consecutive_errors}")
                        await asyncio.sleep(1.0)  # –£–º–µ–Ω—å—à–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                        consecutive_errors = 0
                    
                    await asyncio.sleep(1/30)  # 30 FPS –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤–∏–¥–µ–æ (–∏—Ç–µ—Ä–∞—Ü–∏—è {loop_count}): {e}")
                    consecutive_errors += 1
                    await asyncio.sleep(0.1)  # –ë—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –≤ _video_send_loop: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        logger.info("üõë –¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def _send_video_frame(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –∫–∞–¥—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä
            if not self.video_streamer:
                logger.debug("–í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            if not self.video_streamer.is_streaming:
                logger.debug("–í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä
            frame_data = self.video_streamer.get_frame()
            if not frame_data:
                logger.debug("–ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫–µ—Ç
            if not self.socket:
                logger.debug("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                message = f"VIDEO_FRAME!{json.dumps(frame_data)}"
                message_size = len(message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                await asyncio.wait_for(self.socket.send(message), timeout=0.5)
                
                logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–¥—Ä #{frame_data.get('frame_number', '?')} ({message_size} –±–∞–π—Ç)")
                return True
                
            except json.JSONEncodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                return False
            
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–∞")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–∞: {e}")
            return False
    
    async def _handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not message.strip():
                return
                
            if message.startswith("COMMAND!"):
                data = json.loads(message[8:])
                self.last_command_time = time.time()
                await self._handle_command(data)
                return
            
            if message == "REQUEST_VIDEO_STREAM":
                await self._start_video_streaming()
                return
            elif message == "STOP_VIDEO_STREAM":
                await self._stop_video_streaming()
                return
            
            if message.startswith("REGISTERED!"):
                logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _start_video_streaming(self):
        """–ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ"""
        if self.video_streamer:
            self.video_streamer.start_streaming()
            logger.info("üé• –í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –ó–ê–ü–£–©–ï–ù")
        else:
            logger.error("‚ùå –í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    async def _stop_video_streaming(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ"""
        if self.video_streamer:
            self.video_streamer.stop_streaming()
            logger.info("üõë –í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –û–°–¢–ê–ù–û–í–õ–ï–ù")
        else:
            logger.error("‚ùå –í–∏–¥–µ–æ —Å—Ç—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    async def _handle_command(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            if "leftStickValue" in data:
                left_stick = data.get("leftStickValue", {"x": 0, "y": 0})
                
                if self.motor_controller and not self.motors_disabled:
                    left_speed, right_speed = self._calculate_motor_speeds(
                        left_stick["x"], left_stick["y"]
                    )
                    self.motor_controller.set_motors(left_speed, right_speed)
                
                await self._send_telemetry({"leftStick": left_stick})
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    def _calculate_motor_speeds(self, x, y):
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–µ–π –º–æ—Ç–æ—Ä–æ–≤"""
        left_speed = max(-1, min(1, y + x))
        right_speed = max(-1, min(1, y - x))
        return left_speed, right_speed
    
    async def _send_telemetry(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏"""
        try:
            message = json.dumps({"type": "telemetry", "data": data})
            await self.socket.send(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: {e}")
    
    async def _safety_check_loop(self):
        """–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ—Ç–æ—Ä–æ–≤"""
        while self.is_connection_active:
            try:
                current_time = time.time()
                elapsed_time = current_time - self.last_command_time
                
                if elapsed_time > self.motor_disable_timeout:
                    if not self.motors_disabled:
                        await self._disable_motors()
                        self.motors_disabled = True
                        self.motors_stopped = True
                elif elapsed_time > self.command_timeout:
                    if not self.motors_stopped:
                        self.motors_stopped = True
                    if not self.motors_disabled:
                        await self._stop_motors()
                else:
                    self.motors_stopped = False
                    self.motors_disabled = False
                
                await asyncio.sleep(0.1)  # –ë—ã—Å—Ç—Ä–µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
                await self._stop_motors()
    
    async def _stop_motors(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤"""
        if self.motor_controller and not self.motors_disabled:
            self.motor_controller.set_motors(0, 0)
    
    async def _disable_motors(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤"""
        if self.motor_controller:
            self.motor_controller.set_motors(0, 0)
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.video_streamer:
            self.video_streamer.cleanup()
        
        if self.motor_controller:
            await self._stop_motors()

async def main():
    parser = argparse.ArgumentParser(description="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ä–æ–±–æ—Ç–∞")
    parser.add_argument("--server", default="ws://193.169.240.11:8080")
    parser.add_argument("--camera", type=int, default=0)
    parser.add_argument("--quality", type=int, default=75)
    parser.add_argument("--fps", type=int, default=15)
    parser.add_argument("--resolution", default="640x480")
    parser.add_argument("--use-motors", action="store_true")
    parser.add_argument("--test-video", action="store_true")
    parser.add_argument("--debug", action="store_true")
    
    args = parser.parse_args()
    
    if args.debug:
        logger.setLevel(logging.DEBUG)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    try:
        width, height = map(int, args.resolution.split('x'))
        resolution = (width, height)
    except:
        resolution = (640, 480)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –º–æ—Ç–æ—Ä–æ–≤
    motor_controller = None
    if args.use_motors:
        try:
            from motor_controller import MotorController
            motor_controller = MotorController()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ—Ç–æ—Ä–æ–≤: {e}")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
    video_config = {
        'camera_index': args.camera,
        'quality': args.quality,
        'fps': args.fps,
        'resolution': resolution,
        'test_mode': args.test_video
    }
    
    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
    robot = OptimizedRobotClient(args.server, motor_controller, video_config)
    
    try:
        await robot.connect()
    finally:
        if motor_controller:
            motor_controller.cleanup()

if __name__ == "__main__":
    asyncio.run(main()) 