#!/usr/bin/env python3
"""
–¢–µ—Å—Ç 4-–∫–æ–ª–µ—Å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Pixhawk 6C
–ö–∞–Ω–∞–ª—ã 1,2 - –ª–µ–≤—ã–µ –∫–æ–ª–µ—Å–∞
–ö–∞–Ω–∞–ª—ã 3,4 - –ø—Ä–∞–≤—ã–µ –∫–æ–ª–µ—Å–∞
"""

import time
import sys
from pixhawk_motor_controller import PixhawkMotorController

def test_individual_wheels(controller):
    """–¢–µ—Å—Ç –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–µ—Å–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüîß –¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–ª–µ—Å:")
    
    # –í–∫–ª—é—á–∞–µ–º –º–æ—Ç–æ—Ä—ã
    if not controller.armed:
        controller.arm()
        time.sleep(2)
    
    test_speed = 0.3
    test_duration = 2
    
    # –¢–µ—Å—Ç –ª–µ–≤–æ–≥–æ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ (–∫–∞–Ω–∞–ª 1)
    print("üîÑ –¢–µ—Å—Ç –ª–µ–≤–æ–≥–æ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–µ—Å–∞ (–∫–∞–Ω–∞–ª 1)")
    controller.connection.mav.rc_channels_override_send(
        controller.connection.target_system,
        controller.connection.target_component,
        controller.speed_to_pwm(test_speed),  # –ö–∞–Ω–∞–ª 1
        65535, 65535, 65535, 65535, 65535, 65535, 65535
    )
    time.sleep(test_duration)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    controller.stop()
    time.sleep(1)
    
    # –¢–µ—Å—Ç –ª–µ–≤–æ–≥–æ –∑–∞–¥–Ω–µ–≥–æ (–∫–∞–Ω–∞–ª 2)
    print("üîÑ –¢–µ—Å—Ç –ª–µ–≤–æ–≥–æ –∑–∞–¥–Ω–µ–≥–æ –∫–æ–ª–µ—Å–∞ (–∫–∞–Ω–∞–ª 2)")
    controller.connection.mav.rc_channels_override_send(
        controller.connection.target_system,
        controller.connection.target_component,
        65535,  # –ö–∞–Ω–∞–ª 1
        controller.speed_to_pwm(test_speed),  # –ö–∞–Ω–∞–ª 2
        65535, 65535, 65535, 65535, 65535, 65535
    )
    time.sleep(test_duration)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    controller.stop()
    time.sleep(1)
    
    # –¢–µ—Å—Ç –ø—Ä–∞–≤–æ–≥–æ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ (–∫–∞–Ω–∞–ª 3)
    print("üîÑ –¢–µ—Å—Ç –ø—Ä–∞–≤–æ–≥–æ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–µ—Å–∞ (–∫–∞–Ω–∞–ª 3)")
    controller.connection.mav.rc_channels_override_send(
        controller.connection.target_system,
        controller.connection.target_component,
        65535, 65535,  # –ö–∞–Ω–∞–ª—ã 1,2
        controller.speed_to_pwm(test_speed),  # –ö–∞–Ω–∞–ª 3
        65535, 65535, 65535, 65535, 65535
    )
    time.sleep(test_duration)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    controller.stop()
    time.sleep(1)
    
    # –¢–µ—Å—Ç –ø—Ä–∞–≤–æ–≥–æ –∑–∞–¥–Ω–µ–≥–æ (–∫–∞–Ω–∞–ª 4)
    print("üîÑ –¢–µ—Å—Ç –ø—Ä–∞–≤–æ–≥–æ –∑–∞–¥–Ω–µ–≥–æ –∫–æ–ª–µ—Å–∞ (–∫–∞–Ω–∞–ª 4)")
    controller.connection.mav.rc_channels_override_send(
        controller.connection.target_system,
        controller.connection.target_component,
        65535, 65535, 65535,  # –ö–∞–Ω–∞–ª—ã 1,2,3
        controller.speed_to_pwm(test_speed),  # –ö–∞–Ω–∞–ª 4
        65535, 65535, 65535, 65535
    )
    time.sleep(test_duration)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    controller.stop()
    time.sleep(1)

def test_differential_drive(controller):
    """–¢–µ—Å—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\nüéÆ –¢–µ—Å—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    
    # –í–∫–ª—é—á–∞–µ–º –º–æ—Ç–æ—Ä—ã
    if not controller.armed:
        controller.arm()
        time.sleep(2)
    
    # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
    print("‚û°Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ (–≤—Å–µ –∫–æ–ª–µ—Å–∞)")
    controller.set_motors(0.4, 0.4)
    time.sleep(3)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞")
    controller.stop()
    time.sleep(2)
    
    # –ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ (–ª–µ–≤—ã–µ –∫–æ–ª–µ—Å–∞ –Ω–∞–∑–∞–¥, –ø—Ä–∞–≤—ã–µ –≤–ø–µ—Ä–µ–¥)
    print("‚Ü™Ô∏è –ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ")
    controller.set_motors(-0.3, 0.3)
    time.sleep(2)
    
    # –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ (–ª–µ–≤—ã–µ –∫–æ–ª–µ—Å–∞ –≤–ø–µ—Ä–µ–¥, –ø—Ä–∞–≤—ã–µ –Ω–∞–∑–∞–¥)
    print("‚Ü©Ô∏è –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ")
    controller.set_motors(0.3, -0.3)
    time.sleep(2)
    
    # –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
    print("‚¨ÖÔ∏è –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥")
    controller.set_motors(-0.4, -0.4)
    time.sleep(2)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    print("üõë –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    controller.stop()
    time.sleep(1)

def main():
    print("üöÅ –¢–µ—Å—Ç 4-–∫–æ–ª–µ—Å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Pixhawk 6C")
    print("=" * 50)
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print("  PWM 1,2 ‚Üí –õ–µ–≤—ã–µ –∫–æ–ª–µ—Å–∞")
    print("  PWM 3,4 ‚Üí –ü—Ä–∞–≤—ã–µ –∫–æ–ª–µ—Å–∞")
    print("=" * 50)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ä—Ç
    port = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç Pixhawk (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /dev/ttyUSB0): ").strip()
    if not port:
        port = "/dev/ttyUSB0"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
    baud_input = input("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 57600): ").strip()
    try:
        baudrate = int(baud_input) if baud_input else 57600
    except ValueError:
        baudrate = 57600
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        print(f"\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pixhawk: {port}:{baudrate}")
        controller = PixhawkMotorController(port, baudrate)
        
        if not controller.is_connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pixhawk")
            return 1
        
        print("‚úÖ Pixhawk –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:")
        print("1. –¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–ª–µ—Å")
        print("2. –¢–µ—Å—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("3. –û–±–∞ —Ç–µ—Å—Ç–∞")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice in ['1', '3']:
            test_individual_wheels(controller)
        
        if choice in ['2', '3']:
            test_differential_drive(controller)
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        if 'controller' in locals():
            controller.cleanup()
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 