import pygame
import time
import RPi.GPIO as GPIO
from pymavlink import mavutil

pygame.init()
GPIO.setwarnings(False)
screen = pygame.display.set_mode((400, 300))
pygame.display.set_caption("Robot Control")
font = pygame.font.SysFont("Arial", 30)

camera_servo_pin = 25
GPIO.setmode(GPIO.BCM)
GPIO.setup(camera_servo_pin, GPIO.OUT)
GPIO.setwarnings(False)

pwm_camera = GPIO.PWM(camera_servo_pin, 50)
pwm_camera.start(0)

try:
    connection = mavutil.mavlink_connection('/dev/ttyACM0', baud=57600)
    connection.wait_heartbeat()
except Exception as e:
    print(f"Error connecting to MAVLink: {e}")
    running = False

speed_factor = 0.5  

def map_speed(speed):
    pulse_length = 1.54 + speed * speed_factor * 0.5
    return max(1.04, min(2.04, pulse_length))

def send_motor_command(main1, main2, main3, main4):
    try:
        connection.mav.rc_channels_override_send(
            connection.target_system,
            connection.target_component,
            int(map_speed(main1) * 1000),
            int(map_speed(main2) * 1000),
            int(map_speed(main3) * 1000),
            int(map_speed(main4) * 1000),
            0, 0, 0, 0
        )
    except Exception as e:
        print(f"Error sending motor command: {e}")
        global running
        running = False

def move_camera(direction):
    if direction == "left":
        pwm_camera.ChangeDutyCycle(1.5)
    elif direction == "right":
        pwm_camera.ChangeDutyCycle(10)
    else:
        pwm_camera.ChangeDutyCycle(0)

def stop_robot():
    send_motor_command(0, 0, 0, 0)

running = True
camera_active = False
last_c_press = False

heartbeat_timeout = 5  # Максимальний час очікування перед зупинкою робота
last_heartbeat_time = time.time()

dot_color = (0, 255, 0)
dot_blink_state = True
last_blink_time = time.time()
blink_interval = 0.5

while running:
    screen.fill((90, 90, 90))

    # Перевірка з'єднання
    try:
        msg = connection.recv_match(type='HEARTBEAT', blocking=False)
        if msg:
            last_heartbeat_time = time.time()
    except Exception as e:
        print(f"Error receiving heartbeat: {e}")

    if time.time() - last_heartbeat_time > heartbeat_timeout:
        print("Connection lost. Stopping robot.")
        stop_robot()
        running = False

    if time.time() - last_blink_time >= blink_interval:
        dot_blink_state = not dot_blink_state
        last_blink_time = time.time()

    if dot_blink_state:
        pygame.draw.circle(screen, dot_color, (50, 50), 5)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()

    if keys[pygame.K_1]:
        speed_factor = 0.3  
    elif keys[pygame.K_2]:
        speed_factor = 0.5  
    elif keys[pygame.K_3]:
        speed_factor = 0.9  

    left_speed = 0
    right_speed = 0

    if keys[pygame.K_w]:
        left_speed = 1
        right_speed = 1
    elif keys[pygame.K_s]:
        left_speed = -1
        right_speed = -1
    if keys[pygame.K_a]:
        left_speed = -1
        right_speed = 1
    elif keys[pygame.K_d]:
        left_speed = 1
        right_speed = -1

    send_motor_command(left_speed, right_speed, left_speed, right_speed)

    if camera_active:
        if keys[pygame.K_y]:
            move_camera("left")
        elif keys[pygame.K_i]:
            move_camera("right")
        else:
            pwm_camera.ChangeDutyCycle(0)

    if keys[pygame.K_c] and not last_c_press:
        camera_active = not camera_active
        last_c_press = True

    if not keys[pygame.K_c]:
        last_c_press = False

    display_keys = {'W': pygame.K_w, 'A': pygame.K_a, 'S': pygame.K_s, 'D': pygame.K_d, 'Camera': pygame.K_c, 'Y': pygame.K_y, 'I': pygame.K_i, '1': pygame.K_1, '2': pygame.K_2, '3': pygame.K_3}
    positions = {'W':  (100, 100), 'A': (50, 150), 'S': (100, 150), 'D': (150, 150), 'Camera': (240, 50), 'Y': (250, 100), 'I': (330, 100), '1': (50, 200), '2': (100, 200), '3': (150, 200)}

    for key, value in display_keys.items():
        if key == 'Camera':
            color = (0, 255, 0) if camera_active else (0, 0, 0)
        else:
            color = (0, 255, 0) if keys[value] else (0, 0, 0)
        text = font.render(key, True, color)
        screen.blit(text, positions[key])

    pygame.display.update()
    time.sleep(0.01)

pwm_camera.stop()
GPIO.cleanup()
pygame.quit()
