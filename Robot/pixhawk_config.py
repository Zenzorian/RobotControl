#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Pixhawk 6C –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Raspberry Pi
PIXHAWK_CONNECTIONS = {
    'usb': '/dev/ttyACM0',      # USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Raspberry Pi (–æ–±—ã—á–Ω–æ ttyACM0)
    'usb_alt': '/dev/ttyUSB0',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π USB –ø–æ—Ä—Ç
    'uart': '/dev/ttyAMA0',     # UART –Ω–∞ Raspberry Pi
    'tcp': 'tcp:127.0.0.1:5760' # TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏)
}

# –°–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
BAUDRATES = {
    'standard': 57600,
    'high': 115200,
    'low': 9600
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PWM –∫–∞–Ω–∞–ª–æ–≤ (4-–∫–æ–ª–µ—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
PWM_CHANNELS = {
    'left_motors': [1, 2],   # –ö–∞–Ω–∞–ª—ã 1,2 –¥–ª—è –ª–µ–≤—ã—Ö –∫–æ–ª–µ—Å
    'right_motors': [3, 4],  # –ö–∞–Ω–∞–ª—ã 3,4 –¥–ª—è –ø—Ä–∞–≤—ã—Ö –∫–æ–ª–µ—Å
    'camera_pan': 5,         # –ö–∞–Ω–∞–ª 5 –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞–º–µ—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    'camera_tilt': 6,        # –ö–∞–Ω–∞–ª 6 –¥–ª—è –Ω–∞–∫–ª–æ–Ω–∞ –∫–∞–º–µ—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
}

# –î–∏–∞–ø–∞–∑–æ–Ω—ã PWM (–º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã)
PWM_RANGES = {
    'min': 1000,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PWM
    'neutral': 1500,  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
    'max': 2000,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PWM
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SAFETY_SETTINGS = {
    'max_speed': 0.8,           # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (80%)
    'acceleration_limit': 0.1,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞ —à–∞–≥
    'heartbeat_timeout': 2.0,    # –¢–∞–π–º–∞—É—Ç heartbeat (—Å–µ–∫—É–Ω–¥—ã)
    'command_timeout': 1.0,      # –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥ (—Å–µ–∫—É–Ω–¥—ã)
}

# –†–µ–∂–∏–º—ã –ø–æ–ª–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–æ–±–æ—Ç–æ–≤
FLIGHT_MODES = {
    'rover': 'MANUAL',      # –î–ª—è –Ω–∞–∑–µ–º–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤
    'boat': 'MANUAL',       # –î–ª—è –≤–æ–¥–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤
    'copter': 'STABILIZE',  # –î–ª—è –∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä–æ–≤
}

# –¢–∏–ø—ã —Ä–æ–±–æ—Ç–æ–≤
ROBOT_TYPES = {
    'four_wheel_drive': {
        'description': '4-–∫–æ–ª–µ—Å–Ω—ã–π –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–æ–¥',
        'channels': ['left_motors', 'right_motors'],
        'pwm_channels': [1, 2, 3, 4],
        'mode': 'MANUAL'
    },
    'differential_drive': {
        'description': '2-–∫–æ–ª–µ—Å–Ω—ã–π –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–æ–¥',
        'channels': ['left_motor', 'right_motor'],
        'pwm_channels': [1, 2],
        'mode': 'MANUAL'
    },
    'ackermann': {
        'description': '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        'channels': ['throttle', 'steering'],
        'pwm_channels': [1, 2],
        'mode': 'MANUAL'
    }
}

# –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–æ—Ç–æ—Ä–æ–≤ (4-–∫–æ–ª–µ—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
MOTOR_CALIBRATION = {
    'left_motors': {
        'forward_trim': 0.0,    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥
        'reverse_trim': 0.0,    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞–∑–∞–¥
        'deadzone': 0.05,       # –ú–µ—Ä—Ç–≤–∞—è –∑–æ–Ω–∞
    },
    'right_motors': {
        'forward_trim': 0.0,
        'reverse_trim': 0.0,
        'deadzone': 0.05,
    }
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_connection_string(connection_type='usb'):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    return PIXHAWK_CONNECTIONS.get(connection_type, PIXHAWK_CONNECTIONS['usb'])

def get_baudrate(speed='standard'):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    return BAUDRATES.get(speed, BAUDRATES['standard'])

def get_pwm_channel(channel_name):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä PWM –∫–∞–Ω–∞–ª–∞"""
    return PWM_CHANNELS.get(channel_name, 1)

def get_robot_config(robot_type='differential_drive'):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ–±–æ—Ç–∞"""
    return ROBOT_TYPES.get(robot_type, ROBOT_TYPES['differential_drive'])

def apply_motor_calibration(motor_name, speed):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–æ—Ç–æ—Ä–∞"""
    calibration = MOTOR_CALIBRATION.get(motor_name, {})
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ä—Ç–≤—É—é –∑–æ–Ω—É
    deadzone = calibration.get('deadzone', 0.0)
    if abs(speed) < deadzone:
        return 0.0
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
    if speed > 0:
        trim = calibration.get('forward_trim', 0.0)
    else:
        trim = calibration.get('reverse_trim', 0.0)
    
    return speed + trim

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if __name__ == "__main__":
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Pixhawk 6C")
    print("=" * 40)
    
    print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    for name, conn in PIXHAWK_CONNECTIONS.items():
        print(f"  {name}: {conn}")
    
    print(f"\n‚ö° –°–∫–æ—Ä–æ—Å—Ç–∏:")
    for name, baud in BAUDRATES.items():
        print(f"  {name}: {baud}")
    
    print(f"\nüéÆ PWM –∫–∞–Ω–∞–ª—ã:")
    for name, channel in PWM_CHANNELS.items():
        print(f"  {name}: –∫–∞–Ω–∞–ª {channel}")
    
    print(f"\nü§ñ –¢–∏–ø—ã —Ä–æ–±–æ—Ç–æ–≤:")
    for name, config in ROBOT_TYPES.items():
        print(f"  {name}: {config['description']}")
    
    print(f"\nüõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
    for name, value in SAFETY_SETTINGS.items():
        print(f"  {name}: {value}") 