//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/InputActions/KeyboardInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputActions/KeyboardInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @KeyboardInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @KeyboardInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardInput"",
    ""maps"": [
        {
            ""name"": ""Keyboard Control"",
            ""id"": ""47ab8a32-04ae-4f6a-82e0-0bff67ef05a3"",
            ""actions"": [
                {
                    ""name"": ""CameraLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d64c5698-9d31-48db-b2cd-ca49b69dcef1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRight"",
                    ""type"": ""Button"",
                    ""id"": ""151a9ec5-a8a8-49fa-a439-d1858b2eed1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedUp"",
                    ""type"": ""Value"",
                    ""id"": ""bf8a8aaa-d661-49ba-86d0-2a481e8cd278"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpeedDown"",
                    ""type"": ""Value"",
                    ""id"": ""8cd70312-ecb8-452c-b2e7-7a4910d445b5"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Settings"",
                    ""type"": ""Button"",
                    ""id"": ""a016ae8f-2282-43b2-b206-a9f553374d32"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftFrontKey"",
                    ""type"": ""Button"",
                    ""id"": ""47ec79ec-f059-448f-8fc1-6f635cc7cfed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftBackKey"",
                    ""type"": ""Button"",
                    ""id"": ""03b83956-e3ca-4277-90e4-9f771b942fbf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightFrontKey"",
                    ""type"": ""Button"",
                    ""id"": ""44a4a83a-4fe7-4b1d-8f4f-843ff709e747"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightBackKey"",
                    ""type"": ""Button"",
                    ""id"": ""66518414-a144-453c-b9b2-de3fe9d5393d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc6a0112-f438-4647-980b-d3d89ed15a1d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""493b1695-0ff0-4003-8d19-ce75f9f5da4e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e75e19fc-34c6-42c8-93d9-16ccabf57c8a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c0ca070-e420-4924-a290-54fc79d6a93a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ff0eeb5-59c8-412d-af3e-029adf36338d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59ec1b40-ce48-4423-b1f2-14b240498f6a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFrontKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30029fff-8817-4ddd-a53c-338124419662"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftBackKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41438ad9-219d-4724-bed2-bcc50eb4ef90"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightBackKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a912a2ee-5830-4f0c-a559-5dab7fa3ed1f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFrontKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard Control
        m_KeyboardControl = asset.FindActionMap("Keyboard Control", throwIfNotFound: true);
        m_KeyboardControl_CameraLeft = m_KeyboardControl.FindAction("CameraLeft", throwIfNotFound: true);
        m_KeyboardControl_CameraRight = m_KeyboardControl.FindAction("CameraRight", throwIfNotFound: true);
        m_KeyboardControl_SpeedUp = m_KeyboardControl.FindAction("SpeedUp", throwIfNotFound: true);
        m_KeyboardControl_SpeedDown = m_KeyboardControl.FindAction("SpeedDown", throwIfNotFound: true);
        m_KeyboardControl_Settings = m_KeyboardControl.FindAction("Settings", throwIfNotFound: true);
        m_KeyboardControl_LeftFrontKey = m_KeyboardControl.FindAction("LeftFrontKey", throwIfNotFound: true);
        m_KeyboardControl_LeftBackKey = m_KeyboardControl.FindAction("LeftBackKey", throwIfNotFound: true);
        m_KeyboardControl_RightFrontKey = m_KeyboardControl.FindAction("RightFrontKey", throwIfNotFound: true);
        m_KeyboardControl_RightBackKey = m_KeyboardControl.FindAction("RightBackKey", throwIfNotFound: true);
    }

    ~@KeyboardInput()
    {
        UnityEngine.Debug.Assert(!m_KeyboardControl.enabled, "This will cause a leak and performance issues, KeyboardInput.KeyboardControl.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard Control
    private readonly InputActionMap m_KeyboardControl;
    private List<IKeyboardControlActions> m_KeyboardControlActionsCallbackInterfaces = new List<IKeyboardControlActions>();
    private readonly InputAction m_KeyboardControl_CameraLeft;
    private readonly InputAction m_KeyboardControl_CameraRight;
    private readonly InputAction m_KeyboardControl_SpeedUp;
    private readonly InputAction m_KeyboardControl_SpeedDown;
    private readonly InputAction m_KeyboardControl_Settings;
    private readonly InputAction m_KeyboardControl_LeftFrontKey;
    private readonly InputAction m_KeyboardControl_LeftBackKey;
    private readonly InputAction m_KeyboardControl_RightFrontKey;
    private readonly InputAction m_KeyboardControl_RightBackKey;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard Control".
    /// </summary>
    public struct KeyboardControlActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public KeyboardControlActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/CameraLeft".
        /// </summary>
        public InputAction @CameraLeft => m_Wrapper.m_KeyboardControl_CameraLeft;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/CameraRight".
        /// </summary>
        public InputAction @CameraRight => m_Wrapper.m_KeyboardControl_CameraRight;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/SpeedUp".
        /// </summary>
        public InputAction @SpeedUp => m_Wrapper.m_KeyboardControl_SpeedUp;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/SpeedDown".
        /// </summary>
        public InputAction @SpeedDown => m_Wrapper.m_KeyboardControl_SpeedDown;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/Settings".
        /// </summary>
        public InputAction @Settings => m_Wrapper.m_KeyboardControl_Settings;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/LeftFrontKey".
        /// </summary>
        public InputAction @LeftFrontKey => m_Wrapper.m_KeyboardControl_LeftFrontKey;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/LeftBackKey".
        /// </summary>
        public InputAction @LeftBackKey => m_Wrapper.m_KeyboardControl_LeftBackKey;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/RightFrontKey".
        /// </summary>
        public InputAction @RightFrontKey => m_Wrapper.m_KeyboardControl_RightFrontKey;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardControl/RightBackKey".
        /// </summary>
        public InputAction @RightBackKey => m_Wrapper.m_KeyboardControl_RightBackKey;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_KeyboardControl; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="KeyboardControlActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(KeyboardControlActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="KeyboardControlActions" />
        public void AddCallbacks(IKeyboardControlActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardControlActionsCallbackInterfaces.Add(instance);
            @CameraLeft.started += instance.OnCameraLeft;
            @CameraLeft.performed += instance.OnCameraLeft;
            @CameraLeft.canceled += instance.OnCameraLeft;
            @CameraRight.started += instance.OnCameraRight;
            @CameraRight.performed += instance.OnCameraRight;
            @CameraRight.canceled += instance.OnCameraRight;
            @SpeedUp.started += instance.OnSpeedUp;
            @SpeedUp.performed += instance.OnSpeedUp;
            @SpeedUp.canceled += instance.OnSpeedUp;
            @SpeedDown.started += instance.OnSpeedDown;
            @SpeedDown.performed += instance.OnSpeedDown;
            @SpeedDown.canceled += instance.OnSpeedDown;
            @Settings.started += instance.OnSettings;
            @Settings.performed += instance.OnSettings;
            @Settings.canceled += instance.OnSettings;
            @LeftFrontKey.started += instance.OnLeftFrontKey;
            @LeftFrontKey.performed += instance.OnLeftFrontKey;
            @LeftFrontKey.canceled += instance.OnLeftFrontKey;
            @LeftBackKey.started += instance.OnLeftBackKey;
            @LeftBackKey.performed += instance.OnLeftBackKey;
            @LeftBackKey.canceled += instance.OnLeftBackKey;
            @RightFrontKey.started += instance.OnRightFrontKey;
            @RightFrontKey.performed += instance.OnRightFrontKey;
            @RightFrontKey.canceled += instance.OnRightFrontKey;
            @RightBackKey.started += instance.OnRightBackKey;
            @RightBackKey.performed += instance.OnRightBackKey;
            @RightBackKey.canceled += instance.OnRightBackKey;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="KeyboardControlActions" />
        private void UnregisterCallbacks(IKeyboardControlActions instance)
        {
            @CameraLeft.started -= instance.OnCameraLeft;
            @CameraLeft.performed -= instance.OnCameraLeft;
            @CameraLeft.canceled -= instance.OnCameraLeft;
            @CameraRight.started -= instance.OnCameraRight;
            @CameraRight.performed -= instance.OnCameraRight;
            @CameraRight.canceled -= instance.OnCameraRight;
            @SpeedUp.started -= instance.OnSpeedUp;
            @SpeedUp.performed -= instance.OnSpeedUp;
            @SpeedUp.canceled -= instance.OnSpeedUp;
            @SpeedDown.started -= instance.OnSpeedDown;
            @SpeedDown.performed -= instance.OnSpeedDown;
            @SpeedDown.canceled -= instance.OnSpeedDown;
            @Settings.started -= instance.OnSettings;
            @Settings.performed -= instance.OnSettings;
            @Settings.canceled -= instance.OnSettings;
            @LeftFrontKey.started -= instance.OnLeftFrontKey;
            @LeftFrontKey.performed -= instance.OnLeftFrontKey;
            @LeftFrontKey.canceled -= instance.OnLeftFrontKey;
            @LeftBackKey.started -= instance.OnLeftBackKey;
            @LeftBackKey.performed -= instance.OnLeftBackKey;
            @LeftBackKey.canceled -= instance.OnLeftBackKey;
            @RightFrontKey.started -= instance.OnRightFrontKey;
            @RightFrontKey.performed -= instance.OnRightFrontKey;
            @RightFrontKey.canceled -= instance.OnRightFrontKey;
            @RightBackKey.started -= instance.OnRightBackKey;
            @RightBackKey.performed -= instance.OnRightBackKey;
            @RightBackKey.canceled -= instance.OnRightBackKey;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="KeyboardControlActions.UnregisterCallbacks(IKeyboardControlActions)" />.
        /// </summary>
        /// <seealso cref="KeyboardControlActions.UnregisterCallbacks(IKeyboardControlActions)" />
        public void RemoveCallbacks(IKeyboardControlActions instance)
        {
            if (m_Wrapper.m_KeyboardControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="KeyboardControlActions.AddCallbacks(IKeyboardControlActions)" />
        /// <seealso cref="KeyboardControlActions.RemoveCallbacks(IKeyboardControlActions)" />
        /// <seealso cref="KeyboardControlActions.UnregisterCallbacks(IKeyboardControlActions)" />
        public void SetCallbacks(IKeyboardControlActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="KeyboardControlActions" /> instance referencing this action map.
    /// </summary>
    public KeyboardControlActions @KeyboardControl => new KeyboardControlActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard Control" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="KeyboardControlActions.AddCallbacks(IKeyboardControlActions)" />
    /// <seealso cref="KeyboardControlActions.RemoveCallbacks(IKeyboardControlActions)" />
    public interface IKeyboardControlActions
    {
        /// <summary>
        /// Method invoked when associated input action "CameraLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCameraLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CameraRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCameraRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SpeedUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpeedUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SpeedDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpeedDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Settings" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSettings(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftFrontKey" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftFrontKey(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftBackKey" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftBackKey(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightFrontKey" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightFrontKey(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightBackKey" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightBackKey(InputAction.CallbackContext context);
    }
}
