//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions/GamepadInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamepadInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamepadInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamepadInput"",
    ""maps"": [
        {
            ""name"": ""Gamepad Control"",
            ""id"": ""47ab8a32-04ae-4f6a-82e0-0bff67ef05a3"",
            ""actions"": [
                {
                    ""name"": ""LeftStickMove"",
                    ""type"": ""Value"",
                    ""id"": ""cc25db88-c5b7-4ff6-bad7-8f7166d239a8"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStickMove"",
                    ""type"": ""Value"",
                    ""id"": ""7ed2abd1-45d5-4f88-b6d7-1f658c300379"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d64c5698-9d31-48db-b2cd-ca49b69dcef1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRight"",
                    ""type"": ""Button"",
                    ""id"": ""151a9ec5-a8a8-49fa-a439-d1858b2eed1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedUp"",
                    ""type"": ""Button"",
                    ""id"": ""bf8a8aaa-d661-49ba-86d0-2a481e8cd278"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedDown"",
                    ""type"": ""Button"",
                    ""id"": ""f8cfbbca-fa76-4bd0-a104-1a54b8021253"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Settings"",
                    ""type"": ""Button"",
                    ""id"": ""a016ae8f-2282-43b2-b206-a9f553374d32"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61aa2ce7-1d12-4fe5-ba96-9a0f586251b3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30c9decb-6e92-4808-a464-1ae4da83cdb1"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc94cf10-ca98-4142-8bad-3afbdc685e4f"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02dd4472-7f07-41b8-97c5-7c49fcfb0d1f"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a06429d5-e049-47c5-b4bb-7a67df87cedf"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d1b80e4-4bdd-4121-808a-07a4e004386d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbd5bebb-112f-46bc-953e-10145da5acb3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gamepad Control
        m_GamepadControl = asset.FindActionMap("Gamepad Control", throwIfNotFound: true);
        m_GamepadControl_LeftStickMove = m_GamepadControl.FindAction("LeftStickMove", throwIfNotFound: true);
        m_GamepadControl_RightStickMove = m_GamepadControl.FindAction("RightStickMove", throwIfNotFound: true);
        m_GamepadControl_CameraLeft = m_GamepadControl.FindAction("CameraLeft", throwIfNotFound: true);
        m_GamepadControl_CameraRight = m_GamepadControl.FindAction("CameraRight", throwIfNotFound: true);
        m_GamepadControl_SpeedUp = m_GamepadControl.FindAction("SpeedUp", throwIfNotFound: true);
        m_GamepadControl_SpeedDown = m_GamepadControl.FindAction("SpeedDown", throwIfNotFound: true);
        m_GamepadControl_Settings = m_GamepadControl.FindAction("Settings", throwIfNotFound: true);
    }

    ~@GamepadInput()
    {
        UnityEngine.Debug.Assert(!m_GamepadControl.enabled, "This will cause a leak and performance issues, GamepadInput.GamepadControl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gamepad Control
    private readonly InputActionMap m_GamepadControl;
    private List<IGamepadControlActions> m_GamepadControlActionsCallbackInterfaces = new List<IGamepadControlActions>();
    private readonly InputAction m_GamepadControl_LeftStickMove;
    private readonly InputAction m_GamepadControl_RightStickMove;
    private readonly InputAction m_GamepadControl_CameraLeft;
    private readonly InputAction m_GamepadControl_CameraRight;
    private readonly InputAction m_GamepadControl_SpeedUp;
    private readonly InputAction m_GamepadControl_SpeedDown;
    private readonly InputAction m_GamepadControl_Settings;
    public struct GamepadControlActions
    {
        private @GamepadInput m_Wrapper;
        public GamepadControlActions(@GamepadInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStickMove => m_Wrapper.m_GamepadControl_LeftStickMove;
        public InputAction @RightStickMove => m_Wrapper.m_GamepadControl_RightStickMove;
        public InputAction @CameraLeft => m_Wrapper.m_GamepadControl_CameraLeft;
        public InputAction @CameraRight => m_Wrapper.m_GamepadControl_CameraRight;
        public InputAction @SpeedUp => m_Wrapper.m_GamepadControl_SpeedUp;
        public InputAction @SpeedDown => m_Wrapper.m_GamepadControl_SpeedDown;
        public InputAction @Settings => m_Wrapper.m_GamepadControl_Settings;
        public InputActionMap Get() { return m_Wrapper.m_GamepadControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadControlActions set) { return set.Get(); }
        public void AddCallbacks(IGamepadControlActions instance)
        {
            if (instance == null || m_Wrapper.m_GamepadControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamepadControlActionsCallbackInterfaces.Add(instance);
            @LeftStickMove.started += instance.OnLeftStickMove;
            @LeftStickMove.performed += instance.OnLeftStickMove;
            @LeftStickMove.canceled += instance.OnLeftStickMove;
            @RightStickMove.started += instance.OnRightStickMove;
            @RightStickMove.performed += instance.OnRightStickMove;
            @RightStickMove.canceled += instance.OnRightStickMove;
            @CameraLeft.started += instance.OnCameraLeft;
            @CameraLeft.performed += instance.OnCameraLeft;
            @CameraLeft.canceled += instance.OnCameraLeft;
            @CameraRight.started += instance.OnCameraRight;
            @CameraRight.performed += instance.OnCameraRight;
            @CameraRight.canceled += instance.OnCameraRight;
            @SpeedUp.started += instance.OnSpeedUp;
            @SpeedUp.performed += instance.OnSpeedUp;
            @SpeedUp.canceled += instance.OnSpeedUp;
            @SpeedDown.started += instance.OnSpeedDown;
            @SpeedDown.performed += instance.OnSpeedDown;
            @SpeedDown.canceled += instance.OnSpeedDown;
            @Settings.started += instance.OnSettings;
            @Settings.performed += instance.OnSettings;
            @Settings.canceled += instance.OnSettings;
        }

        private void UnregisterCallbacks(IGamepadControlActions instance)
        {
            @LeftStickMove.started -= instance.OnLeftStickMove;
            @LeftStickMove.performed -= instance.OnLeftStickMove;
            @LeftStickMove.canceled -= instance.OnLeftStickMove;
            @RightStickMove.started -= instance.OnRightStickMove;
            @RightStickMove.performed -= instance.OnRightStickMove;
            @RightStickMove.canceled -= instance.OnRightStickMove;
            @CameraLeft.started -= instance.OnCameraLeft;
            @CameraLeft.performed -= instance.OnCameraLeft;
            @CameraLeft.canceled -= instance.OnCameraLeft;
            @CameraRight.started -= instance.OnCameraRight;
            @CameraRight.performed -= instance.OnCameraRight;
            @CameraRight.canceled -= instance.OnCameraRight;
            @SpeedUp.started -= instance.OnSpeedUp;
            @SpeedUp.performed -= instance.OnSpeedUp;
            @SpeedUp.canceled -= instance.OnSpeedUp;
            @SpeedDown.started -= instance.OnSpeedDown;
            @SpeedDown.performed -= instance.OnSpeedDown;
            @SpeedDown.canceled -= instance.OnSpeedDown;
            @Settings.started -= instance.OnSettings;
            @Settings.performed -= instance.OnSettings;
            @Settings.canceled -= instance.OnSettings;
        }

        public void RemoveCallbacks(IGamepadControlActions instance)
        {
            if (m_Wrapper.m_GamepadControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamepadControlActions instance)
        {
            foreach (var item in m_Wrapper.m_GamepadControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamepadControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamepadControlActions @GamepadControl => new GamepadControlActions(this);
    public interface IGamepadControlActions
    {
        void OnLeftStickMove(InputAction.CallbackContext context);
        void OnRightStickMove(InputAction.CallbackContext context);
        void OnCameraLeft(InputAction.CallbackContext context);
        void OnCameraRight(InputAction.CallbackContext context);
        void OnSpeedUp(InputAction.CallbackContext context);
        void OnSpeedDown(InputAction.CallbackContext context);
        void OnSettings(InputAction.CallbackContext context);
    }
}
