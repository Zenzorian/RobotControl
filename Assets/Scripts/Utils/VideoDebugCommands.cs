using UnityEngine;
using Scripts.Services;

namespace Scripts.Utils
{
    public class VideoDebugCommands : MonoBehaviour
    {
        private IWebRTCVideoService _videoService;
        
        private void Start()
        {
            FindVideoService();
        }
        
        private void FindVideoService()
        {
            var videoServiceObj = GameObject.FindObjectOfType<WebRTCVideoService>();
            if (videoServiceObj != null)
            {
                _videoService = videoServiceObj;
                Debug.Log("VideoDebugCommands: WebRTC –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –Ω–∞–π–¥–µ–Ω");
            }
        }
        
        private void Update()
        {
            // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ WebRTC
            if (Input.GetKeyDown(KeyCode.F1))
            {
                CheckWebRTCStatus();
            }
            
            if (Input.GetKeyDown(KeyCode.F2))
            {
                LogDetailedWebRTCStats();
            }
            
            if (Input.GetKeyDown(KeyCode.F3))
            {
                ResetWebRTCStats();
            }
            
            if (Input.GetKeyDown(KeyCode.F4))
            {
                StartWebRTCConnection();
            }
            
            if (Input.GetKeyDown(KeyCode.F5))
            {
                StopWebRTCConnection();
            }
        }
        
        [ContextMenu("Check WebRTC Status")]
        public void CheckWebRTCStatus()
        {
            if (_videoService == null)
            {
                FindVideoService();
            }
            
            if (_videoService == null)
            {
                Debug.LogError("‚ùå WebRTC –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            string status = $"üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê WEBRTC:\n" +
                          $"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {(_videoService.IsConnected ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢")}\n" +
                          $"‚Ä¢ –°—Ç—Ä–∏–º–∏–Ω–≥: {(_videoService.IsStreaming ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢")}\n" +
                          $"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {_videoService.ConnectionState}\n" +
                          $"‚Ä¢ FPS: {_videoService.CurrentFPS:F1}\n" +
                          $"‚Ä¢ –ö–∞–¥—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {_videoService.ReceivedFrames}\n" +
                          $"‚Ä¢ –ë–∞–π—Ç –ø–æ–ª—É—á–µ–Ω–æ: {_videoService.BytesReceived:N0}";
            
            Debug.Log(status);
            
            if (!_videoService.IsConnected)
            {
                Debug.LogWarning("‚ö†Ô∏è WebRTC –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ F4 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.");
            }
            else if (!_videoService.IsStreaming)
            {
                Debug.LogWarning("‚ö†Ô∏è WebRTC –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.");
            }
        }
        
        [ContextMenu("Log Detailed WebRTC Stats")]
        public void LogDetailedWebRTCStats()
        {
            if (_videoService == null)
            {
                FindVideoService();
            }
            
            if (_videoService != null)
            {
                string report = _videoService.GetStatusReport();
                Debug.Log("üìä –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ WEBRTC:\n" + report);
            }
            else
            {
                Debug.LogError("‚ùå WebRTC –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        [ContextMenu("Reset WebRTC Stats")]
        public void ResetWebRTCStats()
        {
            if (_videoService == null)
            {
                FindVideoService();
            }
            
            if (_videoService != null)
            {
                _videoService.ResetStatistics();
                Debug.Log("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WebRTC —Å–±—Ä–æ—à–µ–Ω–∞");
            }
            else
            {
                Debug.LogError("‚ùå WebRTC –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        [ContextMenu("Start WebRTC Connection")]
        public void StartWebRTCConnection()
        {
            if (_videoService == null)
            {
                FindVideoService();
            }
            
            if (_videoService != null)
            {
                _videoService.StartConnection();
                Debug.Log("üöÄ –ó–∞–ø—É—Å–∫ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
            }
            else
            {
                Debug.LogError("‚ùå WebRTC –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        [ContextMenu("Stop WebRTC Connection")]
        public void StopWebRTCConnection()
        {
            if (_videoService == null)
            {
                FindVideoService();
            }
            
            if (_videoService != null)
            {
                _videoService.StopConnection();
                Debug.Log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
            }
            else
            {
                Debug.LogError("‚ùå WebRTC –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        private void OnGUI()
        {
            // –ü—Ä–æ—Å—Ç–æ–π GUI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ WebRTC
            GUILayout.BeginArea(new Rect(10, 10, 350, 250));
            GUILayout.Label("üé• –û–¢–õ–ê–î–ö–ê WEBRTC");
            
            if (GUILayout.Button("F1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å WebRTC"))
            {
                CheckWebRTCStatus();
            }
            
            if (GUILayout.Button("F2: –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
            {
                LogDetailedWebRTCStats();
            }
            
            if (GUILayout.Button("F3: –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
            {
                ResetWebRTCStats();
            }
            
            if (GUILayout.Button("F4: –ó–∞–ø—É—Å—Ç–∏—Ç—å WebRTC"))
            {
                StartWebRTCConnection();
            }
            
            if (GUILayout.Button("F5: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebRTC"))
            {
                StopWebRTCConnection();
            }
            
            // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å
            if (_videoService != null)
            {
                GUILayout.Space(10);
                GUILayout.Label($"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {(_videoService.IsConnected ? "‚úÖ" : "‚ùå")} | " +
                              $"–°—Ç—Ä–∏–º–∏–Ω–≥: {(_videoService.IsStreaming ? "‚úÖ" : "‚ùå")}");
                GUILayout.Label($"FPS: {_videoService.CurrentFPS:F1} | " +
                              $"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {_videoService.ConnectionState}");
                GUILayout.Label($"–ö–∞–¥—Ä–æ–≤: {_videoService.ReceivedFrames} | " +
                              $"–ë–∞–π—Ç: {_videoService.BytesReceived:N0}");
            }
            else
            {
                GUILayout.Space(10);
                GUILayout.Label("‚ùå WebRTC —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
            
            GUILayout.EndArea();
        }
    }
} 