using Scripts.Services;
using Scripts.UI.Markers;
using UnityEngine;
using Scripts.UI;
using System.Collections;

namespace Scripts.Infrastructure
{
    public class Bootstrapper : MonoBehaviour
    {     
        [SerializeField] private ServerAddressField _serverAddressField;
        private IInputManagerService _inputManagerService;  
        private IStatus _status;
        private IWebSocketClient _webSocketClient;
        private ICommandSenderService _commandSenderService;
        private IWebRTCVideoService _videoService;

        //private const string SERVER_THUMBPRINT = "65863CD6EF075DF79E002205FCAB4FC2B4DD2223E6B3CAB7B8730EE307E79B57";
        //private float _logStatusTimer = 0f;
        //private bool _previousConnectionStatus = false;

        private void Awake()
        {
            var uiSliders = FindFirstObjectByType<UISliders>();

            InitializeInputManagerService();

            InitializeStatus();

            InitializeSliderHandlerService(uiSliders, _inputManagerService);          

            InitializeSettingsHandlerService();
            
            Debug.Log("Bootstrapper: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }

        private void InitializeInputManagerService()
        {           
            _inputManagerService = new GamepadInputManagerService();
            _inputManagerService.Reset();
        }
        private void InitializeSliderHandlerService(UISliders uiSliders, IInputManagerService inputManagerService)
        {
           var sliderHandlerService = new SliderHandlerService(uiSliders, inputManagerService);
            sliderHandlerService.Initialize();
        }
        private void InitializeStatus()
        {
            var statusMarker = FindFirstObjectByType<StatusMarker>();
            _status = new Status(statusMarker);
        }
        private void InitializeWebSocketService(string serverAddress, int serverPort)
        {
            if (_webSocketClient != null) _webSocketClient.Dispose();
            
            _webSocketClient = new WebSocketClient(_status);

            _commandSenderService = new CommandSenderService(_inputManagerService, _webSocketClient, _status);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å
            InitializeVideoService();
        }

        private void InitializeVideoService()
        {
            Debug.Log("InitializeVideoService –≤—ã–∑–≤–∞–Ω");
            
            // –ò—â–µ–º WebRTCVideoService –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ —Å—Ü–µ–Ω–µ
            var videoServiceComponent = FindFirstObjectByType<WebRTCVideoService>();
            if (videoServiceComponent != null)
            {
                Debug.Log($"WebRTCVideoService –Ω–∞–π–¥–µ–Ω: {videoServiceComponent.name}");
                _videoService = videoServiceComponent; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                
                try
                {
                    Debug.Log("–í—ã–∑—ã–≤–∞–µ–º _videoService.Initialize...");
                    _videoService.Initialize(_webSocketClient);
                    Debug.Log("_videoService.Initialize –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    
                    // –ò—â–µ–º RawImage –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ
                    var videoDisplay = FindFirstObjectByType<UnityEngine.UI.RawImage>();
                    if (videoDisplay != null)
                    {
                        Debug.Log($"üé¨ RawImage –Ω–∞–π–¥–µ–Ω: {videoDisplay.name}");
                        _videoService.SetVideoOutput(videoDisplay);
                        _status.Info($"–í–∏–¥–µ–æ –≤—ã—Ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω: {videoDisplay.name}");
                    }
                    else
                    {
                        Debug.LogWarning("üé¨ ‚ö†Ô∏è RawImage –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è");
                        _status.Warning("RawImage –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è");
                    }
                    
                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–µ–æ
                    _videoService.OnConnectionStateChanged += OnVideoConnectionChanged;
                    _status.Info("WebRTC –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    StartCoroutine(StartWebRTCAfterRegistration());
                }
                catch (System.Exception ex)
                {
                    _status.Error($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC –≤–∏–¥–µ–æ—Å–µ—Ä–≤–∏—Å–∞: {ex.Message}");
                    Debug.LogError($"InitializeVideoService error: {ex}");
                }
            }
            else
            {
                _status.Error("WebRTCVideoService –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ü–µ–Ω–µ");
                Debug.LogError("WebRTCVideoService –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ü–µ–Ω–µ! –°–æ–∑–¥–∞–π—Ç–µ GameObject —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º WebRTCVideoService.");
            }
        }

        private void OnVideoConnectionChanged(bool isConnected)
        {
            if (isConnected)
            {
                _status.Info("WebRTC –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω");
            }
            else
            {
                _status.Info("WebRTC –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
            }
        }
        
        private IEnumerator StartWebRTCAfterRegistration()
        {
            // –ñ–¥–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            yield return new WaitForSeconds(1f);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω
            if (_webSocketClient != null && _webSocketClient.IsConnected)
            {
                // –ó–∞–ø—É—Å–∫–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if (_videoService != null)
                {
                    _videoService.StartConnection();
                    _status.Info("WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...");
                }
            }
            else
            {
                _status.Warning("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ");
            }
        }
        private void InitializeSettingsHandlerService()
        {
            var settingsMarkers = FindFirstObjectByType<SettingsMarkers>();
            var settingsHandlerService = new SettingsHandlerService(_inputManagerService, settingsMarkers, InitializeWebSocketService);
            
        }
        private void Update()
        {
            _inputManagerService?.Update();
            _webSocketClient?.Update();
            _commandSenderService?.Update(Time.deltaTime);
        }
    }
}
