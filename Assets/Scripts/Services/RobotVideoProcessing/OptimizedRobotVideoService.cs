using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System;
using System.Collections.Generic;

namespace Scripts.Services
{
    [Serializable]
    public class VideoFrameData
    {
        public string type;
        public string data;
        public float timestamp;
        public int frame_number;
    }

    public interface IOptimizedRobotVideoService
    {
        bool IsVideoConnected { get; }
        float CurrentFPS { get; }
        int ReceivedFrames { get; }
        bool VideoReceived { get; }
        int TotalMessages { get; }
        int VideoMessages { get; }
        
        event Action<bool> OnVideoConnectionChanged;
        event Action<Texture2D> OnVideoFrameReceived;
        
        void Initialize(IWebSocketClient webSocketClient, IStatus status);
        void RequestVideoStream();
        void StopVideoStream();
        void SetVideoOutput(RawImage videoOutput);
        void ResetStats();
        void GetDetailedVideoStats(out bool videoReceived, out int totalMessages, out int videoMessages, out int invalidFrames);
        string GetVideoStatusReport();
        void ForceVideoStatusLog();
    }
    
    public class OptimizedRobotVideoService : MonoBehaviour, IOptimizedRobotVideoService
    {
        [Header("Video Settings")]
        [SerializeField] private RawImage _videoOutput;
        [SerializeField] private bool _showDebugInfo = true;
        [SerializeField] private int _maxTexturePoolSize = 3;
        
        [Header("Performance")]
        [SerializeField] private bool _enableFrameSkipping = true;
        [SerializeField] private float _targetFPS = 15f;
        
        private IWebSocketClient _webSocketClient;
        private IStatus _status;
        private bool _isInitialized = false;
        private bool _isVideoStreaming = false;
        
        // –¢–µ–∫—Å—Ç—É—Ä—ã –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        private Queue<Texture2D> _texturePool = new Queue<Texture2D>();
        private Texture2D _currentTexture;
        private Coroutine _videoUpdateCoroutine;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        private int _receivedFrames = 0;
        private float _lastFrameTime = 0f;
        private float _currentFPS = 0f;
        private int _fpsCounter = 0;
        private float _lastFPSTime = 0f;
        private Queue<float> _frameTimes = new Queue<float>();
        private int _droppedFrames = 0;
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ
        private bool _videoReceived = false;
        private float _firstFrameTime = 0f;
        private float _lastVideoCheckTime = 0f;
        private int _totalReceivedMessages = 0;
        private int _videoFrameMessages = 0;
        private int _invalidFrames = 0;
        private float _videoCheckInterval = 2f;
        
        // –°–æ–±—ã—Ç–∏—è
        public event Action<bool> OnVideoConnectionChanged;
        public event Action<Texture2D> OnVideoFrameReceived;
        
        // –°–≤–æ–π—Å—Ç–≤–∞
        public bool IsVideoConnected => _isVideoStreaming;
        public float CurrentFPS => _currentFPS;
        public int ReceivedFrames => _receivedFrames;
        public bool VideoReceived => _videoReceived;
        public int TotalMessages => _totalReceivedMessages;
        public int VideoMessages => _videoFrameMessages;
        
        public void Initialize(IWebSocketClient webSocketClient, IStatus status)
        {
            if (_isInitialized) return;

            _webSocketClient = webSocketClient ?? throw new ArgumentNullException(nameof(webSocketClient));
            _status = status ?? throw new ArgumentNullException(nameof(status));

            _webSocketClient.OnMessageReceived += OnWebSocketMessage;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Ç–µ–∫—Å—Ç—É—Ä
            InitializeTexturePool();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if (_videoOutput == null)
            {
                _status.Error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: RawImage –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
                Debug.LogError("OptimizedRobotVideoService: _videoOutput is null!");
            }
            else
            {
                _status.Info($"RawImage –Ω–∞–π–¥–µ–Ω: {_videoOutput.name}");
                SetupVideoOutput();
            }
            
            _isInitialized = true;
            _status.Info("OptimizedRobotVideoService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤–∏–¥–µ–æ
            StartVideoMonitoring();
        }
        
        public void SetVideoOutput(RawImage videoOutput)
        {
            _videoOutput = videoOutput;
            if (_videoOutput != null)
            {
                SetupVideoOutput();
            }
        }
        
        private void SetupVideoOutput()
        {
            if (_videoOutput != null)
            {
                var size = _videoOutput.rectTransform.sizeDelta;
                if (size.x == 0 || size.y == 0)
                {
                    _videoOutput.rectTransform.sizeDelta = new Vector2(640, 480);
                    _status.Info("–†–∞–∑–º–µ—Ä RawImage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 640x480");
                }
            }
        }
        
        private void InitializeTexturePool()
        {
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –ø—É–ª —Ç–µ–∫—Å—Ç—É—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            for (int i = 0; i < _maxTexturePoolSize; i++)
            {
                var texture = new Texture2D(640, 480, TextureFormat.RGB24, false);
                texture.filterMode = FilterMode.Bilinear;
                texture.wrapMode = TextureWrapMode.Clamp;
                _texturePool.Enqueue(texture);
            }
            
            Debug.Log($"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É–ª —Ç–µ–∫—Å—Ç—É—Ä: {_maxTexturePoolSize} —Ç–µ–∫—Å—Ç—É—Ä");
        }
        
        public void RequestVideoStream()
        {
            if (_webSocketClient != null)
            {
                _webSocketClient.SendMessage("REQUEST_VIDEO_STREAM");
                _status.Info("–ó–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
                if (_videoUpdateCoroutine == null)
                {
                    _videoUpdateCoroutine = StartCoroutine(VideoUpdateLoop());
                }
            }
        }
        
        public void StopVideoStream()
        {
            if (_webSocketClient != null)
            {
                _webSocketClient.SendMessage("STOP_VIDEO_STREAM");
                _status.Info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞");
            }
            
            _isVideoStreaming = false;
            OnVideoConnectionChanged?.Invoke(false);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
            if (_videoUpdateCoroutine != null)
            {
                StopCoroutine(_videoUpdateCoroutine);
                _videoUpdateCoroutine = null;
            }
        }
        
        private void OnWebSocketMessage(string message)
        {
            try
            {
                if (string.IsNullOrEmpty(message))
                    return;
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                _totalReceivedMessages++;
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∫–∞–¥—Ä—ã
                if (message.StartsWith("VIDEO_FRAME!"))
                {
                    _videoFrameMessages++;
                    string jsonData = message.Substring(12); // –£–±–∏—Ä–∞–µ–º "VIDEO_FRAME!"
                    Debug.Log($"üé• –ü–æ–ª—É—á–µ–Ω VIDEO_FRAME! —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª–∏–Ω–∞ JSON: {jsonData.Length}");
                    HandleVideoFrame(jsonData);
                }
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –≤–∏–¥–µ–æ –∫–∞–¥—Ä—ã
                else if (message.StartsWith("{") && message.Contains("video_frame"))
                {
                    _videoFrameMessages++;
                    Debug.Log($"üé• –ü–æ–ª—É—á–µ–Ω JSON –≤–∏–¥–µ–æ –∫–∞–¥—Ä, –¥–ª–∏–Ω–∞: {message.Length}");
                    HandleVideoFrame(message);
                }
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
                else if (message == "REGISTERED!CONTROLLER")
                {
                    _status.Info("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–∏–¥–µ–æ");
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                    Invoke(nameof(RequestVideoStream), 1f);
                }
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
                else if (message == "VIDEO_STREAM_STARTED")
                {
                    _status.Info("–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Ä–æ–±–æ—Ç–µ");
                }
                else if (message == "VIDEO_STREAM_STOPPED")
                {
                    _status.Info("–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä–æ–±–æ—Ç–µ");
                    _isVideoStreaming = false;
                    OnVideoConnectionChanged?.Invoke(false);
                }
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∏–¥–µ–æ
                else if (message.StartsWith("VIDEO_ERROR!"))
                {
                    string errorMsg = message.Substring(12);
                    _status.Error($"–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: {errorMsg}");
                }
                // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                else
                {
                    if (message.Length > 100)
                    {
                        Debug.Log($"üì® –ü–æ–ª—É—á–µ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({message.Length} —Å–∏–º–≤–æ–ª–æ–≤): {message.Substring(0, 100)}...");
                    }
                    else
                    {
                        Debug.Log($"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}");
                    }
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                CheckVideoReceptionStatus();
                
            }
            catch (Exception ex)
            {
                _status.Error($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                Debug.LogError($"OptimizedRobotVideoService error: {ex}");
            }
        }
        
        private void HandleVideoFrame(string jsonData)
        {
            try
            {
                var frameData = JsonUtility.FromJson<VideoFrameData>(jsonData);
                
                if (frameData != null && !string.IsNullOrEmpty(frameData.data))
                {
                    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–≤—ã–π –≤–∏–¥–µ–æ –∫–∞–¥—Ä
                    if (!_videoReceived)
                    {
                        _videoReceived = true;
                        _firstFrameTime = Time.time;
                        _status.Info("‚úÖ –ü–ï–†–í–´–ô –í–ò–î–ï–û –ö–ê–î–† –ü–û–õ–£–ß–ï–ù!");
                        Debug.Log("üé• –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç —Ä–æ–±–æ—Ç–∞");
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    UpdateFrameStats();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–¥—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    if (_enableFrameSkipping && ShouldSkipFrame())
                    {
                        _droppedFrames++;
                        return;
                    }
                    
                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–¥—Ä
                    DecodeAndDisplayFrame(frameData);
                    
                    if (!_isVideoStreaming)
                    {
                        _isVideoStreaming = true;
                        OnVideoConnectionChanged?.Invoke(true);
                        _status.Info("–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω");
                    }
                }
                else
                {
                    _invalidFrames++;
                    _status.Warning($"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–∏–¥–µ–æ –∫–∞–¥—Ä (–≤—Å–µ–≥–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {_invalidFrames})");
                }
            }
            catch (Exception ex)
            {
                _invalidFrames++;
                _status.Error($"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∫–∞–¥—Ä–∞: {ex.Message}");
                Debug.LogError($"Video frame decode error: {ex}");
            }
        }
        
        private bool ShouldSkipFrame()
        {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä—ã –µ—Å–ª–∏ FPS —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π
            float currentTime = Time.time;
            float targetInterval = 1f / _targetFPS;
            
            if (currentTime - _lastFrameTime < targetInterval)
            {
                return true;
            }
            
            _lastFrameTime = currentTime;
            return false;
        }
        
        private void DecodeAndDisplayFrame(VideoFrameData frameData)
        {
            try
            {
                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∞–π—Ç—ã
                byte[] imageData = Convert.FromBase64String(frameData.data);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ –ø—É–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                Texture2D texture = GetTextureFromPool();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º JPEG –¥–∞–Ω–Ω—ã–µ
                if (texture.LoadImage(imageData))
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    if (_videoOutput != null)
                    {
                        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
                        if (_currentTexture != null)
                        {
                            ReturnTextureToPool(_currentTexture);
                        }
                        
                        _currentTexture = texture;
                        _videoOutput.texture = texture;
                        
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –∫–∞–¥—Ä–µ
                        OnVideoFrameReceived?.Invoke(texture);
                    }
                    else
                    {
                        ReturnTextureToPool(texture);
                    }
                }
                else
                {
                    _status.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
                    ReturnTextureToPool(texture);
                }
            }
            catch (Exception ex)
            {
                _status.Error($"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {ex.Message}");
                Debug.LogError($"Image decode error: {ex}");
            }
        }
        
        private Texture2D GetTextureFromPool()
        {
            if (_texturePool.Count > 0)
            {
                return _texturePool.Dequeue();
            }
            else
            {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –µ—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç
                var texture = new Texture2D(640, 480, TextureFormat.RGB24, false);
                texture.filterMode = FilterMode.Bilinear;
                texture.wrapMode = TextureWrapMode.Clamp;
                return texture;
            }
        }
        
        private void ReturnTextureToPool(Texture2D texture)
        {
            if (texture != null && _texturePool.Count < _maxTexturePoolSize)
            {
                _texturePool.Enqueue(texture);
            }
        }
        
        private void UpdateFrameStats()
        {
            _receivedFrames++;
            _fpsCounter++;
            
            float currentTime = Time.time;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º FPS –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            if (currentTime - _lastFPSTime >= 1f)
            {
                _currentFPS = _fpsCounter / (currentTime - _lastFPSTime);
                _fpsCounter = 0;
                _lastFPSTime = currentTime;
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if (_showDebugInfo)
                {
                    Debug.Log($"Video FPS: {_currentFPS:F1}, Frames: {_receivedFrames}, Dropped: {_droppedFrames}");
                }
            }
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
            _frameTimes.Enqueue(currentTime);
            while (_frameTimes.Count > 30) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∫–∞–¥—Ä–æ–≤
            {
                _frameTimes.Dequeue();
            }
        }
        
        private void StartVideoMonitoring()
        {
            _lastVideoCheckTime = Time.time;
            InvokeRepeating(nameof(LogVideoStatus), 5f, 5f); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        }
        
        private void CheckVideoReceptionStatus()
        {
            float currentTime = Time.time;
            
            if (currentTime - _lastVideoCheckTime >= _videoCheckInterval)
            {
                _lastVideoCheckTime = currentTime;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞–µ–º –ª–∏ –º—ã –≤–∏–¥–µ–æ
                if (!_videoReceived && _totalReceivedMessages > 0)
                {
                    _status.Warning($"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {_totalReceivedMessages} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ –ù–ï–¢ –í–ò–î–ï–û –∫–∞–¥—Ä–æ–≤!");
                    Debug.LogWarning($"Video check: {_totalReceivedMessages} messages, {_videoFrameMessages} video frames");
                }
                else if (_videoReceived)
                {
                    float timeSinceFirstFrame = currentTime - _firstFrameTime;
                    _status.Info($"‚úÖ –í–∏–¥–µ–æ –∞–∫—Ç–∏–≤–Ω–æ: {_receivedFrames} –∫–∞–¥—Ä–æ–≤ –∑–∞ {timeSinceFirstFrame:F1}—Å");
                }
            }
        }
        
        private void LogVideoStatus()
        {
            string status = $"üìä –í–ò–î–ï–û –°–¢–ê–¢–£–°:\n" +
                          $"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {_totalReceivedMessages}\n" +
                          $"‚Ä¢ –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {_videoFrameMessages}\n" +
                          $"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {_receivedFrames}\n" +
                          $"‚Ä¢ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤: {_invalidFrames}\n" +
                          $"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: {_droppedFrames}\n" +
                          $"‚Ä¢ –¢–µ–∫—É—â–∏–π FPS: {_currentFPS:F1}\n" +
                          $"‚Ä¢ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ: {(_videoReceived ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢")}";
            
            Debug.Log(status);
            
            if (_videoReceived)
            {
                _status.Info($"–í–∏–¥–µ–æ: {_currentFPS:F1} FPS, {_receivedFrames} –∫–∞–¥—Ä–æ–≤");
            }
            else
            {
                _status.Warning("‚ùå –í–ò–î–ï–û –ù–ï –ü–û–õ–£–ß–ï–ù–û!");
            }
        }
        
        private IEnumerator VideoUpdateLoop()
        {
            while (true)
            {
                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–µ–æ
                if (_isVideoStreaming)
                {
                    float timeSinceLastFrame = Time.time - _lastFrameTime;
                    
                    // –ï—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∫–∞–¥—Ä–æ–≤ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ
                    if (timeSinceLastFrame > 5f)
                    {
                        _status.Warning("–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω - –Ω–µ—Ç –∫–∞–¥—Ä–æ–≤ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥");
                        _isVideoStreaming = false;
                        _videoReceived = false;
                        OnVideoConnectionChanged?.Invoke(false);
                    }
                }
                
                yield return new WaitForSeconds(1f);
            }
        }
        
        private void OnDestroy()
        {
            if (_videoUpdateCoroutine != null)
            {
                StopCoroutine(_videoUpdateCoroutine);
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            CancelInvoke(nameof(LogVideoStatus));
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
            if (_currentTexture != null)
            {
                Destroy(_currentTexture);
            }
            
            while (_texturePool.Count > 0)
            {
                var texture = _texturePool.Dequeue();
                if (texture != null)
                {
                    Destroy(texture);
                }
            }
            
            if (_webSocketClient != null)
            {
                _webSocketClient.OnMessageReceived -= OnWebSocketMessage;
            }
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        public void GetVideoStats(out float fps, out int frames, out int dropped)
        {
            fps = _currentFPS;
            frames = _receivedFrames;
            dropped = _droppedFrames;
        }
        
        public void GetDetailedVideoStats(out bool videoReceived, out int totalMessages, out int videoMessages, out int invalidFrames)
        {
            videoReceived = _videoReceived;
            totalMessages = _totalReceivedMessages;
            videoMessages = _videoFrameMessages;
            invalidFrames = _invalidFrames;
        }
        
        public string GetVideoStatusReport()
        {
            return $"üìä –û–¢–ß–ï–¢ –û –í–ò–î–ï–û:\n" +
                   $"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {(_isVideoStreaming ? "–î–ê" : "–ù–ï–¢")}\n" +
                   $"üé• –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ: {(_videoReceived ? "–î–ê" : "–ù–ï–¢")}\n" +
                   $"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {_totalReceivedMessages}\n" +
                   $"üé¨ –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {_videoFrameMessages}\n" +
                   $"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {_receivedFrames}\n" +
                   $"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤: {_invalidFrames}\n" +
                   $"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: {_droppedFrames}\n" +
                   $"üìä –¢–µ–∫—É—â–∏–π FPS: {_currentFPS:F1}\n" +
                   $"‚è±Ô∏è –í—Ä–µ–º—è —Å –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞: {(_videoReceived ? (Time.time - _firstFrameTime).ToString("F1") + "—Å" : "N/A")}";
        }
        
        public void ForceVideoStatusLog()
        {
            LogVideoStatus();
        }
        
        public void ResetStats()
        {
            _receivedFrames = 0;
            _droppedFrames = 0;
            _invalidFrames = 0;
            _fpsCounter = 0;
            _lastFPSTime = Time.time;
            _frameTimes.Clear();
            _totalReceivedMessages = 0;
            _videoFrameMessages = 0;
            _videoReceived = false;
            _firstFrameTime = 0f;
        }
        
        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        public void SetTargetFPS(float targetFPS)
        {
            _targetFPS = Mathf.Clamp(targetFPS, 1f, 60f);
        }
        
        public void SetFrameSkipping(bool enabled)
        {
            _enableFrameSkipping = enabled;
        }
        
        public void SetTexturePoolSize(int size)
        {
            _maxTexturePoolSize = Mathf.Clamp(size, 1, 10);
        }
    }
} 