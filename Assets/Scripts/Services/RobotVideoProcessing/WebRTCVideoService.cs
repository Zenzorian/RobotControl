using System;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using System.Text;
using Unity.WebRTC;
using System.Collections.Generic;
using System.Linq;

namespace Scripts.Services
{
    public class WebRTCVideoService : MonoBehaviour, IWebRTCVideoService
    {
        [Header("WebRTC Settings")]
        [SerializeField] private RawImage _videoOutput;
        [SerializeField] private bool _enableDebugLogs = true;        
        
        private IWebSocketClient _webSocketClient;
        private bool _isInitialized = false;
        private bool _isConnected = false;
        private bool _isStreaming = false;
        private string _connectionState = "Disconnected";
        private string _currentSessionId = "";
        
        // Unity WebRTC –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        private RTCPeerConnection _peerConnection;
        private RTCConfiguration _rtcConfiguration;
        private MediaStream _remoteStream;
        private VideoStreamTrack _remoteVideoTrack;
        
        // TURN/ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        private ICEServerConfiguration _iceConfiguration;
        private bool _iceConfigurationLoaded = false;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        private float _currentFPS = 0f;
        private int _receivedFrames = 0;
        private long _bytesReceived = 0;
        private DateTime _connectionStartTime;
        private DateTime _lastFrameTime;
        private int _fpsCounter = 0;
        private float _lastFpsTime = 0f;
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        private int _webrtcSignalsReceived = 0;
        private int _offersReceived = 0;
        
        // –°–æ–±—ã—Ç–∏—è
        public event Action<bool> OnConnectionStateChanged;
        public event Action<string> OnError;
        
        // –°–≤–æ–π—Å—Ç–≤–∞
        public bool IsConnected => _isConnected;
        public bool IsStreaming => _isStreaming;
        public string ConnectionState => _connectionState;
        public float CurrentFPS => _currentFPS;
        public int ReceivedFrames => _receivedFrames;
        public long BytesReceived => _bytesReceived;
        public TimeSpan ConnectionTime => _isConnected ? DateTime.Now - _connectionStartTime : TimeSpan.Zero;
        public string CurrentSessionId => _currentSessionId;
        
        
        public void Initialize(IWebSocketClient webSocketClient)
        {
            if (_isInitialized) return;
            
            _webSocketClient = webSocketClient ?? throw new ArgumentNullException(nameof(webSocketClient));
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
            _webSocketClient.OnMessageReceived += OnWebSocketMessage;
            
            _isInitialized = true;
            LogDebug("WebRTC –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π TURN/—Å–µ—Å—Å–∏–π");
        }
        
        public async void StartConnection()
        {
            if (!_isInitialized)
            {
                LogError("–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
                return;
            }
            
            LogDebug("–ó–∞–ø—É—Å–∫ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∏–¥–µ–æ - ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–¥–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ
            RequestVideoStream();
            
            _connectionState = "Connecting";
            _connectionStartTime = DateTime.Now;
            OnConnectionStateChanged?.Invoke(false);
        }
        

        
        private void SetupFallbackICEConfiguration()
        {
            LogDebug("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ STUN)");
            _iceConfiguration = new ICEServerConfiguration
            {
                iceServers = new ICEServer[]
                {
                    new ICEServer { urls = "stun:stun.l.google.com:19302", username = "", credential = "" },
                    new ICEServer { urls = "stun:stun1.l.google.com:19302", username = "", credential = "" }
                },
                iceCandidatePoolSize = 10,
                bundlePolicy = "max-bundle",
                rtcpMuxPolicy = "require"
            };
            _iceConfigurationLoaded = true;
        }
        
        private void SetupWebRTCConfiguration()
        {
            if (!_iceConfigurationLoaded || _iceConfiguration?.iceServers == null)
            {
                LogError("ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
                return;
            }
            
            var iceServers = new List<RTCIceServer>();
            
            foreach (var iceServer in _iceConfiguration.iceServers)
            {
                var rtcIceServer = new RTCIceServer
                {
                    urls = new string[] { iceServer.urls }
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º credentials –¥–ª—è TURN —Å–µ—Ä–≤–µ—Ä–æ–≤
                if (!string.IsNullOrEmpty(iceServer.username) && !string.IsNullOrEmpty(iceServer.credential))
                {
                    rtcIceServer.username = iceServer.username;
                    rtcIceServer.credential = iceServer.credential;
                    LogDebug($"üîê TURN —Å–µ—Ä–≤–µ—Ä: {iceServer.urls} —Å credentials");
                }
                else
                {
                    LogDebug($"üì° STUN —Å–µ—Ä–≤–µ—Ä: {iceServer.urls}");
                }
                
                iceServers.Add(rtcIceServer);
            }
            
            _rtcConfiguration = default;
            _rtcConfiguration.iceServers = iceServers.ToArray();
            _rtcConfiguration.iceCandidatePoolSize = _iceConfiguration.iceCandidatePoolSize;
            
            LogDebug($"‚úÖ WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {iceServers.Count} ICE —Å–µ—Ä–≤–µ—Ä–æ–≤");
        }
        
        private void RequestVideoStream()
        {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π sessionId –¥–ª—è Unity –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            _currentSessionId = System.Guid.NewGuid().ToString();
            
            var requestMessage = new WebRTCSignalMessage
            {
                type = "webrtc-signal",
                signalType = "request_video",
                sessionId = _currentSessionId,
                data = "{\"clientType\":\"unity-controller\"}"
            };
            
            var json = JsonUtility.ToJson(requestMessage);
            
            _webSocketClient.SendMessage(json);
            LogDebug($"üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ —Å sessionId: {_currentSessionId}");
        }
        
        private void HandleSessionReady(SessionReadyMessage message)
        {
            try
            {
                LogDebug($"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ session_ready –¥–ª—è —Å–µ—Å—Å–∏–∏: {message.sessionId}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ —Å–µ—Å—Å–∏—è
                if (message.sessionId != _currentSessionId)
                {
                    LogError($"‚ùå –ü–æ–ª—É—á–µ–Ω session_ready –¥–ª—è —á—É–∂–æ–π —Å–µ—Å—Å–∏–∏: {message.sessionId} (–æ–∂–∏–¥–∞–ª–∞—Å—å: {_currentSessionId})");
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                _iceConfiguration = message.data.iceConfiguration;
                _iceConfigurationLoaded = true;
                
                LogDebug($"‚úÖ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ session_ready: STUN: {_iceConfiguration?.iceServers?.Count(s => s.urls.Contains("stun:"))} —Å–µ—Ä–≤–µ—Ä–æ–≤, TURN: {_iceConfiguration?.iceServers?.Count(s => s.urls.Contains("turn:"))} —Å–µ—Ä–≤–µ—Ä–æ–≤");
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                SetupWebRTCConfiguration();
                
                // –°–æ–∑–¥–∞–µ–º RTCPeerConnection
                CreatePeerConnection();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PeerConnection —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
                if (_peerConnection == null)
                {
                    LogError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PeerConnection. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.");
                    return;
                }
                
                LogDebug($"‚úÖ WebRTC –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é offer –æ—Ç —Ä–æ–±–æ—Ç–∞ (session: {_currentSessionId})");
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
                if (message.data.sessionInfo != null)
                {
                    LogDebug($"üìä –°—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∞: –¥–æ—Å—Ç—É–ø–µ–Ω={message.data.sessionInfo.robotAvailable}, –∫–∞–º–µ—Ä–∞={message.data.sessionInfo.cameraActive}");
                }
            }
            catch (Exception ex)
            {
                LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ session_ready: {ex.Message}");
                OnError?.Invoke($"Session ready error: {ex.Message}");
            }
        }
        
        private void CreatePeerConnection()
        {
            try
            {
                if (_peerConnection != null)
                {
                    LogDebug("Disposing existing PeerConnection");
                    _peerConnection.Dispose();
                    _peerConnection = null;
                }
                
                LogDebug("Creating new RTCPeerConnection");
                _peerConnection = new RTCPeerConnection(ref _rtcConfiguration);
                
                if (_peerConnection == null)
                {
                    LogError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å RTCPeerConnection!");
                    return;
                }
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event handlers
                _peerConnection.OnIceCandidate = OnIceCandidate;
                _peerConnection.OnIceConnectionChange = OnIceConnectionChange;
                _peerConnection.OnConnectionStateChange = OnConnectionStateChange;
                _peerConnection.OnTrack = OnTrack;
                
                LogDebug("‚úÖ RTCPeerConnection —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                LogError($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTCPeerConnection: {ex.Message}");
                _peerConnection = null;
            }
        }
        
        private void OnIceCandidate(RTCIceCandidate candidate)
        {
            LogDebug("–ü–æ–ª—É—á–µ–Ω ICE candidate");
            
            var candidateData = new IceCandidateData
            {
                candidate = candidate.Candidate,
                sdpMid = candidate.SdpMid,
                sdpMLineIndex = candidate.SdpMLineIndex ?? 0
            };
            
            SendWebRTCSignal("ice-candidate", JsonUtility.ToJson(candidateData));
        }
        
        private void OnIceConnectionChange(RTCIceConnectionState state)
        {
            LogDebug($"ICE Connection State: {state}");
            
            switch (state)
            {
                case RTCIceConnectionState.Connected:
                case RTCIceConnectionState.Completed:
                    _isConnected = true;
                    _connectionState = "Connected";
                    OnConnectionStateChanged?.Invoke(true);
                    break;
                case RTCIceConnectionState.Disconnected:
                case RTCIceConnectionState.Failed:
                case RTCIceConnectionState.Closed:
                    _isConnected = false;
                    _isStreaming = false;
                    _connectionState = "Disconnected";
                    OnConnectionStateChanged?.Invoke(false);
                    break;
            }
        }
        
        private void OnConnectionStateChange(RTCPeerConnectionState state)
        {
            LogDebug($"Peer Connection State: {state}");
        }
        
        private void OnTrack(RTCTrackEvent e)
        {
            LogDebug("üé¨ === OnTrack –≤—ã–∑–≤–∞–Ω ===");
            LogDebug($"üé¨ Track Type: {e.Track?.GetType()?.Name ?? "null"}");
            LogDebug($"üé¨ Track Kind: {(e.Track?.Kind.ToString() ?? "null")}");
            LogDebug($"üé¨ Streams Count: {e.Streams?.Count() ?? 0}");
            LogDebug($"üé¨ VideoOutput Status: {(_videoOutput != null ? $"‚úÖ {_videoOutput.name}" : "‚ùå null")}");
            
            if (e.Track is VideoStreamTrack videoTrack)
            {
                LogDebug("üé¨ ‚úÖ –≠—Ç–æ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫!");
                _remoteVideoTrack = videoTrack;
                _remoteStream = e.Streams.FirstOrDefault();
                
                LogDebug($"üé¨ VideoTrack.Texture: {(videoTrack.Texture != null ? $"‚úÖ {videoTrack.Texture.width}x{videoTrack.Texture.height}" : "‚ùå null (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–¥—Ä–æ–≤)")}");
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∫ UI
                if (_videoOutput != null)
                {
                    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É
                    if (videoTrack.Texture != null)
                    {
                        _videoOutput.texture = videoTrack.Texture;
                        _isStreaming = true;
                        _connectionState = "Streaming";
                        LogDebug($"üé¨ ‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Ä–∞–∑—É! –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {videoTrack.Texture.width}x{videoTrack.Texture.height}");
                    }
                    else
                    {
                        LogDebug("üé¨ ‚è≥ –¢–µ–∫—Å—Ç—É—Ä–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–≤—ã—Ö –∫–∞–¥—Ä–æ–≤...");
                        LogDebug("üé¨ üì∫ Update() –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –∫–æ–≥–¥–∞ –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π");
                    }
                }
                else
                {
                    LogError("üé¨ ‚ùå _videoOutput –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è");
                }
            }
            else
            {
                LogDebug($"üé¨ ‚ùå –≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫: {e.Track?.GetType()?.Name}");
            }
        }
        
        public void StopConnection()
        {
            LogDebug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
            
            _isConnected = false;
            _isStreaming = false;
            _connectionState = "Disconnected";
            
            // –û—á–∏—Å—Ç–∫–∞ WebRTC —Ä–µ—Å—É—Ä—Å–æ–≤
            if (_peerConnection != null)
            {
                _peerConnection.Close();
                _peerConnection.Dispose();
                _peerConnection = null;
            }
            
            if (_videoOutput != null)
            {
                _videoOutput.texture = null;
            }
            
            _remoteVideoTrack = null;
            _remoteStream = null;
            
            OnConnectionStateChanged?.Invoke(false);
        }
        
        public void SetVideoOutput(RawImage videoOutput)
        {
            _videoOutput = videoOutput;
            LogDebug($"–í–∏–¥–µ–æ –≤—ã—Ö–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {(_videoOutput != null ? _videoOutput.name : "null")}");
        }
        
        public void HandleWebRTCSignal(string signalType, string data)
        {
            LogDebug($"üöÄ === HANDLING WebRTC SIGNAL ===");
            LogDebug($"üöÄ Signal Type: '{signalType}'");
            LogDebug($"üöÄ Data Length: {data?.Length ?? 0} chars");
            LogDebug($"üöÄ Data Content: {data}");
            LogDebug($"üöÄ PeerConnection Status: {(_peerConnection != null ? "‚úÖ Active" : "‚ùå Null")}");
            
            if (string.IsNullOrEmpty(signalType))
            {
                LogError("‚ùå Signal type –ø—É—Å—Ç!");
                return;
            }
            
            switch (signalType)
            {
                case "offer":
                    LogDebug($"üî• === STARTING OFFER PROCESSING ===");
                    LogDebug($"üî• Offer #{_offersReceived} processing started");
                    StartCoroutine(HandleOfferCoroutine(data));
                    break;
                case "answer":
                    LogDebug($"üìù === STARTING ANSWER PROCESSING ===");
                    StartCoroutine(HandleAnswerCoroutine(data));
                    break;
                case "ice-candidate":
                    LogDebug($"üßä === STARTING ICE CANDIDATE PROCESSING ===");
                    HandleIceCandidate(data);
                    break;
                default:
                    LogDebug($"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebRTC —Å–∏–≥–Ω–∞–ª–∞: '{signalType}'");
                    break;
            }
        }
        
        private IEnumerator HandleOfferCoroutine(string offerData)
        {
            LogDebug($"üî• === OFFER COROUTINE STARTED ===");
            LogDebug($"üî• Offer Data Received: {offerData}");
            LogDebug($"üî• Thread: {System.Threading.Thread.CurrentThread.ManagedThreadId}");
            LogDebug($"üî• Time: {DateTime.Now:HH:mm:ss.fff}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º PeerConnection
            if (_peerConnection == null)
            {
                LogError("‚ùå PeerConnection –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
                LogError("‚ùå Offer processing FAILED - no PeerConnection");
                yield break;
            }
            LogDebug($"‚úÖ PeerConnection is available");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (string.IsNullOrEmpty(offerData))
            {
                LogError("‚ùå Offer –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã!");
                LogError("‚ùå Offer processing FAILED - empty offer data");
                yield break;
            }
            LogDebug($"‚úÖ Offer data is not empty ({offerData.Length} chars)");
            
            SdpData offerObj;
            RTCSessionDescription offer;
            
            LogDebug($"üîÑ Starting JSON parsing...");
            try
            {
                offerObj = JsonUtility.FromJson<SdpData>(offerData);
                LogDebug($"‚úÖ JSON parsing completed");
                
                if (offerObj == null)
                {
                    LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å offer JSON - result is null");
                    LogError("‚ùå Offer processing FAILED - JSON parse returned null");
                    yield break;
                }
                LogDebug($"‚úÖ Parsed SdpData object is not null");
                
                LogDebug($"üìã Parsed offer - type: '{offerObj.type}', sdp length: {offerObj.sdp?.Length ?? 0}");
                
                if (string.IsNullOrEmpty(offerObj.sdp))
                {
                    LogError("‚ùå SDP –≤ offer –ø—É—Å—Ç");
                    LogError("‚ùå Offer processing FAILED - SDP is empty");
                    yield break;
                }
                LogDebug($"‚úÖ SDP is not empty");
                
                offer = new RTCSessionDescription
                {
                    type = RTCSdpType.Offer,
                    sdp = offerObj.sdp
                };
                LogDebug($"‚úÖ RTCSessionDescription created successfully");
                
                var sdpPreview = offerObj.sdp.Length > 200 ? offerObj.sdp.Substring(0, 200) + "..." : offerObj.sdp;
                LogDebug($"üìÑ Offer SDP Preview: {sdpPreview}");
            }
            catch (Exception ex)
            {
                LogError($"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ offer: {ex.Message}");
                LogError($"üí• Stack trace: {ex.StackTrace}");
                LogError($"üí• Offer data: {offerData}");
                LogError($"üí• Offer processing FAILED - JSON parsing exception");
                yield break;
            }
            
            LogDebug($"üîÑ JSON parsing completed successfully, proceeding to setRemoteDescription...");
            LogDebug($"üîÑ This is where offer processing continues...");
            
            var setRemoteOp = _peerConnection.SetRemoteDescription(ref offer);
            yield return setRemoteOp;
            
            if (setRemoteOp.IsError)
            {
                LogError($"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote description: {setRemoteOp.Error.message}");
                yield break;
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ answer
            var answerOp = _peerConnection.CreateAnswer();
            yield return answerOp;
            
            if (answerOp.IsError)
            {
                LogError($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer: {answerOp.Error.message}");
                yield break;
            }
            
            var answer = answerOp.Desc;
            var setLocalOp = _peerConnection.SetLocalDescription(ref answer);
            yield return setLocalOp;
            
            if (setLocalOp.IsError)
            {
                LogError($"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ local description: {setLocalOp.Error.message}");
                yield break;
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ answer
            var answerData = new SdpData
            {
                type = "answer",
                sdp = answer.sdp
            };
            
            SendWebRTCSignal("answer", JsonUtility.ToJson(answerData));
            LogDebug("WebRTC answer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
        }
        
        private IEnumerator HandleAnswerCoroutine(string answerData)
        {
            LogDebug("–û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC answer...");
            
            SdpData answerObj;
            RTCSessionDescription answer;
            
            try
            {
                answerObj = JsonUtility.FromJson<SdpData>(answerData);
                answer = new RTCSessionDescription
                {
                    type = RTCSdpType.Answer,
                    sdp = answerObj.sdp
                };
            }
            catch (Exception ex)
            {
                LogError($"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ answer: {ex.Message}");
                yield break;
            }
            
            var setRemoteOp = _peerConnection.SetRemoteDescription(ref answer);
            yield return setRemoteOp;
            
            if (setRemoteOp.IsError)
            {
                LogError($"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote answer: {setRemoteOp.Error.message}");
            }
            else
            {
                LogDebug("WebRTC answer –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            }
        }
        
        private void HandleIceCandidate(string candidateData)
        {
            LogDebug("–û–±—Ä–∞–±–æ—Ç–∫–∞ ICE candidate...");
            
            try
            {
                var candidateObj = JsonUtility.FromJson<IceCandidateData>(candidateData);
                var candidate = new RTCIceCandidate(new RTCIceCandidateInit
                {
                    candidate = candidateObj.candidate,
                    sdpMid = candidateObj.sdpMid,
                    sdpMLineIndex = candidateObj.sdpMLineIndex
                });
                
                _peerConnection.AddIceCandidate(candidate);
                LogDebug("ICE candidate –¥–æ–±–∞–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                LogError($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE candidate: {ex.Message}");
            }
        }
        
        private void Update()
        {
            if (_isStreaming && _remoteVideoTrack != null)
            {
                UpdateFrameStatistics();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—ã –≤–∏–¥–µ–æ
            CheckVideoTextureAvailability();
        }
        
        private void CheckVideoTextureAvailability()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞ –æ—Ç –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞
            if (_remoteVideoTrack != null && _videoOutput != null)
            {
                // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ UI
                if (_remoteVideoTrack.Texture != null && _videoOutput.texture != _remoteVideoTrack.Texture)
                {
                    LogDebug($"üé¨ ‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π! –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ UI: {_remoteVideoTrack.Texture.width}x{_remoteVideoTrack.Texture.height}");
                    LogDebug($"üé¨ üìä Texture type: {_remoteVideoTrack.Texture.GetType().Name}");
                    if (_remoteVideoTrack.Texture is RenderTexture rt)
                    {
                        LogDebug($"üé¨ üìä RenderTexture format: {rt.format}");
                    }
                    
                    _videoOutput.texture = _remoteVideoTrack.Texture;
                    _isStreaming = true;
                    _connectionState = "Streaming";
                    LogDebug("üé¨ ‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RawImage!");
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    InvokeRepeating(nameof(LogVideoStatus), 5f, 5f);
                }
            }
        }
        
        private void LogVideoStatus()
        {
            if (_remoteVideoTrack?.Texture != null)
            {
                LogDebug($"üé¨ üìä –í–ò–î–ï–û –°–¢–ê–¢–£–°: –†–∞–∑–º–µ—Ä={_remoteVideoTrack.Texture.width}x{_remoteVideoTrack.Texture.height}, " +
                        $"FPS={_currentFPS:F1}, –ö–∞–¥—Ä–æ–≤={_receivedFrames}");
                LogDebug($"üé¨ üìä –¢–µ–∫—Å—Ç—É—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ UI: {(_videoOutput?.texture == _remoteVideoTrack.Texture ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢")}");
            }
        }
        
        private void UpdateFrameStatistics()
        {
            _fpsCounter++;
            _receivedFrames++;
            
            if (Time.time - _lastFpsTime >= 1f)
            {
                _currentFPS = _fpsCounter / (Time.time - _lastFpsTime);
                _fpsCounter = 0;
                _lastFpsTime = Time.time;
            }
            
            _lastFrameTime = DateTime.Now;
            
            // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –±–∞–π—Ç–æ–≤ (–æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –≤–∏–¥–µ–æ)
            if (_remoteVideoTrack?.Texture != null)
            {
                var texture = _remoteVideoTrack.Texture;
                _bytesReceived += (long)(texture.width * texture.height * 3); // RGB
            }
        }
        
        private void OnWebSocketMessage(string message)
        {
            try
            {
                LogDebug($"üì® WebSocket Message received");
                LogDebug($"üì® Content: {message}");
                
                if (string.IsNullOrEmpty(message))
                {
                    LogDebug("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ");
                    return;
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
                if (message.StartsWith("REGISTERED!"))
                {
                    LogDebug($"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {message}");
                    return; // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ WebSocketClient
                }
                
                if (message.StartsWith("TELEMETRY!"))
                {
                    string telemetryJson = message.Substring("TELEMETRY!".Length);
                    LogDebug($"üìä –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è: {telemetryJson.Substring(0, Math.Min(100, telemetryJson.Length))}...");
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∑–¥–µ—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '{')
                if (!message.StartsWith("{"))
                {
                    LogDebug($"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º: {message.Substring(0, Math.Min(50, message.Length))}...");
                    return;
                }
                
                // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                var basicMessage = JsonUtility.FromJson<BasicWebRTCMessage>(message);
                
                if (basicMessage == null)
                {
                    LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –±–∞–∑–æ–≤–æ–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}");
                    return;
                }
                
                LogDebug($"‚úÖ Parsed message - type: '{basicMessage.type}', signalType: '{basicMessage.signalType}'");
                
                if (basicMessage.type == "webrtc_signal" || basicMessage.type == "webrtc-signal")
                {
                    _webrtcSignalsReceived++;
                    LogDebug($"üéØ WebRTC Signal #{_webrtcSignalsReceived}: {basicMessage.signalType}");
                    
                    if (string.IsNullOrEmpty(basicMessage.signalType))
                    {
                        LogError("‚ùå Signal type –ø—É—Å—Ç –≤ WebRTC —Å–æ–æ–±—â–µ–Ω–∏–∏");
                        return;
                    }
                    
                    string dataJson = null;
                    
                    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
                    switch (basicMessage.signalType)
                    {
                        case "offer":
                        case "answer":
                            var offerMessage = JsonUtility.FromJson<WebRTCOfferAnswerMessage>(message);
                            if (offerMessage?.data != null)
                            {
                                dataJson = JsonUtility.ToJson(offerMessage.data);
                                
                                if (basicMessage.signalType == "offer")
                                {
                                    _offersReceived++;
                                    LogDebug($"üî• OFFER RECEIVED #{_offersReceived}");
                                    LogDebug($"üî• Offer SDP length: {offerMessage.data.sdp?.Length ?? 0}");
                                }
                                else // answer
                                {
                                    LogDebug($"üìù Answer received");
                                    LogDebug($"üìù Answer SDP length: {offerMessage.data.sdp?.Length ?? 0}");
                                }
                            }
                            else
                            {
                                LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å offer/answer –¥–∞–Ω–Ω—ã–µ");
                                return;
                            }
                            break;
                            
                        case "ice-candidate":
                            var iceMessage = JsonUtility.FromJson<WebRTCIceCandidateMessage>(message);
                            if (iceMessage?.data != null)
                            {
                                dataJson = JsonUtility.ToJson(iceMessage.data);
                                LogDebug($"üßä ICE candidate received");
                            }
                            else
                            {
                                LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ICE candidate –¥–∞–Ω–Ω—ã–µ");
                                return;
                            }
                            break;
                            
                        case "session_ready":
                            LogDebug($"üéØ –ü–æ–ª—É—á–µ–Ω session_ready");
                            var sessionReadyMessage = JsonUtility.FromJson<SessionReadyMessage>(message);
                            if (sessionReadyMessage?.data != null)
                            {
                                HandleSessionReady(sessionReadyMessage);
                            }
                            return; // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ HandleWebRTCSignal
                            
                        default:
                            LogError($"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebRTC —Å–∏–≥–Ω–∞–ª–∞: {basicMessage.signalType}");
                            return;
                    }
                    
                    if (!string.IsNullOrEmpty(dataJson))
                    {
                        LogDebug($"‚úÖ Successfully parsed {basicMessage.signalType} data: {dataJson.Length} chars");
                        HandleWebRTCSignal(basicMessage.signalType, dataJson);
                    }
                    else
                    {
                        LogError($"‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {basicMessage.signalType}");
                    }
                }
                else
                {
                    LogDebug($"‚è≠Ô∏è –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º: '{basicMessage.type}'");
                }
            }
            catch (Exception ex)
            {
                LogError($"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                LogError($"üí• Stack trace: {ex.StackTrace}");
                LogError($"üí• –°–æ–æ–±—â–µ–Ω–∏–µ: {message}");
            }
        }
        
        private void SendWebRTCSignal(string signalType, string data)
        {
            if (_webSocketClient == null) return;
            
            var message = new WebRTCSignalMessage
            {
                type = "webrtc-signal",
                signalType = signalType,
                sessionId = _currentSessionId,
                data = data
            };
            
            var json = JsonUtility.ToJson(message);
            _webSocketClient.SendMessage(json);
            
            LogDebug($"üì° WebRTC —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {signalType} (session: {_currentSessionId})");
        }
        
        public string GetStatusReport()
        {
            var report = new StringBuilder();
            report.AppendLine($"üìä === WebRTC Video Service Status ===");
            report.AppendLine($"- Initialized: {(_isInitialized ? "‚úÖ" : "‚ùå")} {_isInitialized}");
            report.AppendLine($"- Connected: {(_isConnected ? "‚úÖ" : "‚ùå")} {_isConnected}");
            report.AppendLine($"- Streaming: {(_isStreaming ? "‚úÖ" : "‚ùå")} {_isStreaming}");
            report.AppendLine($"- State: {_connectionState}");
            report.AppendLine($"- Session ID: {_currentSessionId}");
            report.AppendLine($"- PeerConnection: {(_peerConnection != null ? "‚úÖ Active" : "‚ùå Null")}");
            report.AppendLine();
            
            report.AppendLine($"üìä === Basic Statistics ===");
            report.AppendLine($"- WebRTC Signals: {_webrtcSignalsReceived}");
            report.AppendLine($"- Offers Received: {_offersReceived} üî•");
            report.AppendLine();
            
            report.AppendLine($"üìä === Video Statistics ===");
            report.AppendLine($"- FPS: {_currentFPS:F1}");
            report.AppendLine($"- Frames: {_receivedFrames}");
            report.AppendLine($"- Bytes: {_bytesReceived:N0}");
            report.AppendLine($"- Connection Time: {ConnectionTime:hh\\:mm\\:ss}");
            report.AppendLine($"- Video Output: {(_videoOutput != null ? _videoOutput.name : "None")}");
            report.AppendLine($"- Remote Track: {(_remoteVideoTrack != null ? "‚úÖ Active" : "‚ùå None")}");
            
            return report.ToString();
        }
        
        public string GetMessageDiagnostics()
        {
            var diag = new StringBuilder();
            diag.AppendLine($"üîç === MESSAGE DIAGNOSTICS ===");
            diag.AppendLine($"üéØ WebRTC Signals: {_webrtcSignalsReceived}");
            diag.AppendLine($"üî• Offers: {_offersReceived}");
            diag.AppendLine();
            
            if (_webrtcSignalsReceived == 0)
            {
                diag.AppendLine("‚ùå NO WEBRTC SIGNALS RECEIVED!");
                diag.AppendLine("   Check WebSocket connection");
            }
            else if (_offersReceived == 0)
            {
                diag.AppendLine("‚ùå NO OFFERS RECEIVED!");
                diag.AppendLine("   Check robot offer generation");
            }
            else
            {
                diag.AppendLine("‚úÖ OFFERS ARE BEING RECEIVED!");
            }
            
            return diag.ToString();
        }
        
        public void ResetStatistics()
        {
            _receivedFrames = 0;
            _bytesReceived = 0;
            _currentFPS = 0f;
            _fpsCounter = 0;
            _lastFpsTime = Time.time;
            _webrtcSignalsReceived = 0;
            _offersReceived = 0;
            
            LogDebug("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
        }
        

        
        private void LogDebug(string message)
        {
            if (_enableDebugLogs)
            {
                Debug.Log($"[WebRTCVideoService] {message}");
            }
        }
        
        private void LogError(string message)
        {
            Debug.LogError($"[WebRTCVideoService] {message}");
            OnError?.Invoke(message);
        }
        
        private void OnDestroy()
        {
            StopConnection();
            
            if (_webSocketClient != null)
            {
                _webSocketClient.OnMessageReceived -= OnWebSocketMessage;
            }
        }
    }
    
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—â–∏—Ö –ø–æ–ª–µ–π WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π
    [Serializable]
    public class BasicWebRTCMessage
    {
        public string type;
        public string signalType;
        // data –ø–æ–ª–µ –Ω–µ –≤–∫–ª—é—á–∞–µ–º - –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    }

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è offer/answer —Å–æ–æ–±—â–µ–Ω–∏–π
    [Serializable] 
    public class WebRTCOfferAnswerMessage
    {
        public string type;
        public string signalType;
        public SdpData data;
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Å—Ç—Ä–æ–∫–æ–≤—ã–º data (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
    [Serializable]
    public class WebRTCSignalMessage
    {
        public string type;
        public string signalType;
        public string sessionId;
        public string data;
    }
    
    [Serializable]
    public class WebRTCIceCandidateMessage
    {
        public string type;
        public string signalType;
        public IceCandidateData data;
    }
    
    [Serializable]
    public class SdpData
    {
        public string type;
        public string sdp;
        public long timestamp;
    }
    
    [Serializable]
    public class IceCandidateData
    {
        public string candidate;
        public string sdpMid;
        public int sdpMLineIndex;
    }
    
    // –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    [Serializable]
    public class ICEServerConfiguration
    {
        public ICEServer[] iceServers;
        public int iceCandidatePoolSize;
        public string bundlePolicy;
        public string rtcpMuxPolicy;
    }
    
    [Serializable]
    public class ICEServer
    {
        public string urls;
        public string username;
        public string credential;
    }
    
    [Serializable]
    public class SessionReadyMessage
    {
        public string type;
        public string signalType;
        public string sessionId;
        public SessionReadyData data;
    }
    
    [Serializable]
    public class SessionReadyData
    {
        public ICEServerConfiguration iceConfiguration;
        public SessionInfo sessionInfo;
    }
    
    [Serializable]
    public class SessionInfo
    {
        public bool robotAvailable;
        public bool cameraActive;
    }
} 