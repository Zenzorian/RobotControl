#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ WebSocket
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∏–¥–µ–æ —Å —Ä–æ–±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
"""

import asyncio
import websockets
import json
import cv2
import base64
import time
import argparse
from datetime import datetime

class VideoSignalTester:
    def __init__(self, server_url, camera_index=0, test_mode=False):
        self.server_url = server_url
        self.camera_index = camera_index
        self.test_mode = test_mode
        self.camera = None
        self.frame_count = 0
        self.bytes_sent = 0
        self.start_time = time.time()
        
    def initialize_camera(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã"""
        if self.test_mode:
            print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–¥—Ä—ã")
            return True
            
        print(f"üé• –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ {self.camera_index}...")
        self.camera = cv2.VideoCapture(self.camera_index)
        
        if not self.camera.isOpened():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ {self.camera_index}")
            return False
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
        self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        self.camera.set(cv2.CAP_PROP_FPS, 15)
        self.camera.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        
        print("‚úÖ –ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    
    def create_test_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞"""
        import numpy as np
        
        frame = np.zeros((480, 640, 3), np.uint8)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for y in range(480):
            for x in range(640):
                frame[y, x] = [
                    int(255 * x / 640),
                    int(255 * y / 480),
                    int(255 * ((x + y + self.frame_count) % 256) / 256)
                ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        cv2.putText(frame, f"TEST FRAME", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        cv2.putText(frame, f"Frame: {self.frame_count}", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(frame, datetime.now().strftime("%H:%M:%S"), (50, 130), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        
        return frame
    
    def capture_frame(self):
        """–ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞"""
        if self.test_mode:
            return self.create_test_frame()
            
        if not self.camera or not self.camera.isOpened():
            return None
            
        ret, frame = self.camera.read()
        return frame if ret else None
    
    def encode_frame(self, frame):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–¥—Ä–∞ –≤ JPEG + Base64"""
        if frame is None:
            return None
            
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ JPEG
        encode_params = [cv2.IMWRITE_JPEG_QUALITY, 75]
        success, buffer = cv2.imencode('.jpg', frame, encode_params)
        
        if not success:
            return None
            
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Base64
        encoded = base64.b64encode(buffer).decode('utf-8')
        return encoded
    
    async def test_video_transmission(self, duration=30):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏–¥–µ–æ"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏–¥–µ–æ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
        print(f"üåê –°–µ—Ä–≤–µ—Ä: {self.server_url}")
        
        try:
            async with websockets.connect(self.server_url) as websocket:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ —Ä–æ–±–æ—Ç
                await websocket.send("REGISTER!ROBOT")
                print("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ROBOT")
                
                start_time = time.time()
                last_stats_time = start_time
                
                while time.time() - start_time < duration:
                    # –ó–∞—Ö–≤–∞—Ç –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–¥—Ä–∞
                    frame = self.capture_frame()
                    if frame is None:
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞")
                        await asyncio.sleep(0.1)
                        continue
                    
                    encoded_frame = self.encode_frame(frame)
                    if encoded_frame is None:
                        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–¥—Ä–∞")
                        await asyncio.sleep(0.1)
                        continue
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    video_message = {
                        'type': 'video_frame',
                        'data': encoded_frame,
                        'timestamp': time.time(),
                        'frame_number': self.frame_count
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞
                    try:
                        await websocket.send(json.dumps(video_message))
                        self.frame_count += 1
                        self.bytes_sent += len(encoded_frame)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                        current_time = time.time()
                        if current_time - last_stats_time >= 5.0:
                            elapsed = current_time - start_time
                            fps = self.frame_count / elapsed
                            mbps = (self.bytes_sent * 8) / (elapsed * 1024 * 1024)
                            
                            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.frame_count} –∫–∞–¥—Ä–æ–≤, {fps:.1f} FPS, {mbps:.2f} Mbps")
                            last_stats_time = current_time
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è FPS
                    await asyncio.sleep(1/15)  # ~15 FPS
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_time = time.time() - start_time
                avg_fps = self.frame_count / total_time
                avg_mbps = (self.bytes_sent * 8) / (total_time * 1024 * 1024)
                
                print("\n" + "="*50)
                print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time:.1f} —Å–µ–∫")
                print(f"üé¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: {self.frame_count}")
                print(f"üìä –°—Ä–µ–¥–Ω–∏–π FPS: {avg_fps:.1f}")
                print(f"üíæ –ü–µ—Ä–µ–¥–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {self.bytes_sent / 1024 / 1024:.1f} –ú–ë")
                print(f"üåê –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_mbps:.2f} Mbps")
                print("="*50)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        finally:
            if self.camera:
                self.camera.release()

async def main():
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Å–∏–≥–Ω–∞–ª–∞')
    parser.add_argument('--server', default='ws://localhost:3000', 
                       help='URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--camera', type=int, default=0, 
                       help='–ò–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã')
    parser.add_argument('--test-mode', action='store_true', 
                       help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –∫–∞–º–µ—Ä—ã')
    parser.add_argument('--duration', type=int, default=30, 
                       help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    
    args = parser.parse_args()
    
    print("ü§ñ –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò –í–ò–î–ï–û –°–ò–ì–ù–ê–õ–ê")
    print("="*50)
    
    tester = VideoSignalTester(args.server, args.camera, args.test_mode)
    
    if not tester.initialize_camera():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å --test-mode –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        return
    
    await tester.test_video_transmission(args.duration)

if __name__ == "__main__":
    asyncio.run(main()) 