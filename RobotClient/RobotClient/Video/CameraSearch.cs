using System.Text.RegularExpressions;

namespace RobotClient.Video
{
    /// <summary>
    /// –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±-–∫–∞–º–µ—Ä–∞—Ö, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ USB –≤ Linux
    /// </summary>
    public class CameraSearch
    {
        /// <summary>
        /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–µ–±-–∫–∞–º–µ—Ä–µ
        /// </summary>
        public class CameraInfo
        {
            public string Name { get; set; } = string.Empty;
            public string DeviceID { get; set; } = string.Empty;
            public string PnpDeviceID { get; set; } = string.Empty;
            public bool IsConnected { get; set; }
            public string Description { get; set; } = string.Empty;
            public string DevicePath { get; set; } = string.Empty; // /dev/video0, etc.
            public string Capabilities { get; set; } = string.Empty;
            public bool SupportsVideoCapture { get; set; }
            public bool SupportsStreaming { get; set; }
            public List<string> SupportedFormats { get; set; } = new List<string>();
            public string DeviceType { get; set; } = string.Empty; // Camera, Metadata, etc.
        }

        /// <summary>
        /// –ò—â–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö USB –≤–µ–±-–∫–∞–º–µ—Ä
        /// </summary>
        /// <returns>–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–µ–±-–∫–∞–º–µ—Ä</returns>
        public List<CameraInfo> FindUsbWebCameras()
        {
            var cameras = new List<CameraInfo>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ v4l2-ctl
                bool hasV4l2Utils = CheckV4l2Utils();
                if (!hasV4l2Utils)
                {
                    Console.WriteLine("‚ö†Ô∏è  v4l2-ctl –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install v4l-utils");
                    Console.WriteLine("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...");
                    Console.WriteLine();
                    return FindBasicCameras();
                }

                // –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ /dev/video*
                var videoDevices = Directory.GetFiles("/dev", "video*")
                    .Where(f => Regex.IsMatch(Path.GetFileName(f), @"^video\d+$"))
                    .OrderBy(f => f)
                    .ToList();

                Console.WriteLine($"üîç –ù–∞–π–¥–µ–Ω–æ {videoDevices.Count} –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤: {string.Join(", ", videoDevices.Select(Path.GetFileName))}");
                Console.WriteLine(new string('=', 80));

                foreach (var devicePath in videoDevices)
                {
                    try
                    {
                        var deviceInfo = GetDeviceInfo(devicePath);
                        if (deviceInfo != null)
                        {
                            Console.WriteLine($"üìπ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {devicePath}:");
                            Console.WriteLine($"   üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {deviceInfo.Name}");
                            Console.WriteLine($"   üè∑Ô∏è  –¢–∏–ø: {deviceInfo.DeviceType}");
                            Console.WriteLine($"   üì∫ –ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ: {(deviceInfo.SupportsVideoCapture ? "‚úÖ" : "‚ùå")}");
                            Console.WriteLine($"   üåä –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–∏–¥–µ–æ: {(deviceInfo.SupportsStreaming ? "‚úÖ" : "‚ùå")}");
                            Console.WriteLine($"   üé® –§–æ—Ä–º–∞—Ç—ã: {(deviceInfo.SupportedFormats.Count > 0 ? string.Join(", ", deviceInfo.SupportedFormats) : "‚ùå –ù–µ—Ç")}");
                            Console.WriteLine($"   ‚öôÔ∏è  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {deviceInfo.Capabilities}");
                            Console.WriteLine();

                            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –∑–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ
                            if (deviceInfo.SupportsVideoCapture && (IsUsbDevice(deviceInfo) || IsLikelyCamera(deviceInfo)))
                            {
                                cameras.Add(deviceInfo);
                                Console.WriteLine($"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∫–∞–º–µ—Ä–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ");
                            }
                            else
                            {
                                string reason = "";
                                if (!deviceInfo.SupportsVideoCapture) reason += "–Ω–µ—Ç –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ; ";
                                if (!IsUsbDevice(deviceInfo) && !IsLikelyCamera(deviceInfo)) reason += "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –∫–∞–º–µ—Ä–∞; ";
                                Console.WriteLine($"   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {reason.TrimEnd(';', ' ')}");
                            }
                            Console.WriteLine();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {devicePath}: {ex.Message}");
                        Console.WriteLine();
                    }
                }

                Console.WriteLine(new string('=', 80));
                Console.WriteLine($"üéØ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –∫–∞–º–µ—Ä: {cameras.Count}");
                
                if (cameras.Count > 0)
                {
                    Console.WriteLine("üì∑ –ü—Ä–∏–≥–æ–¥–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã:");
                    for (int i = 0; i < cameras.Count; i++)
                    {
                        var cam = cameras[i];
                        Console.WriteLine($"   {i + 1}. {cam.DevicePath} - {cam.Name} ({cam.DeviceType})");
                    }
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä, –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ!");
                    Console.WriteLine("üí° –°–æ–≤–µ—Ç—ã:");
                    Console.WriteLine("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ USB –∫–∞–º–µ—Ä—ã");
                    Console.WriteLine("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ v4l-utils: sudo apt install v4l-utils");
                    Console.WriteLine("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: ls -la /dev/video*");
                }
                Console.WriteLine();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–µ–±-–∫–∞–º–µ—Ä: {ex.Message}");
            }

            return cameras;
        }

        /// <summary>
        /// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ)
        /// </summary>
        /// <returns>–°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –∑–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ</returns>
        public List<CameraInfo> FindWorkingCameras()
        {
            var cameras = new List<CameraInfo>();

            try
            {
                var videoDevices = Directory.GetFiles("/dev", "video*")
                    .Where(f => Regex.IsMatch(Path.GetFileName(f), @"^video\d+$"))
                    .OrderBy(f => f)
                    .ToList();

                foreach (var devicePath in videoDevices)
                {
                    try
                    {
                        var deviceInfo = GetDeviceInfo(devicePath);
                        if (deviceInfo != null && deviceInfo.SupportsVideoCapture && 
                            (IsUsbDevice(deviceInfo) || IsLikelyCamera(deviceInfo)))
                        {
                            cameras.Add(deviceInfo);
                        }
                    }
                    catch
                    {
                        // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ
                    }
                }

                // Fallback: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ v4l2-ctl, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±
                if (cameras.Count == 0)
                {
                    cameras.AddRange(FindBasicCameras());
                }
            }
            catch
            {
                // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ
            }

            return cameras;
        }

        /// <summary>
        /// –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫–∞–º–µ—Ä –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è v4l2-ctl (fallback –º–µ—Ç–æ–¥)
        /// </summary>
        /// <returns>–°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∫–∞–º–µ—Ä</returns>
        public List<CameraInfo> FindBasicCameras()
        {
            var cameras = new List<CameraInfo>();

            try
            {
                // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö /dev/video* —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                var videoDevices = Directory.GetFiles("/dev", "video*")
                    .Where(f => Regex.IsMatch(Path.GetFileName(f), @"^video\d+$"))
                    .OrderBy(f => f)
                    .ToList();

                Console.WriteLine($"üîß Fallback: –Ω–∞–π–¥–µ–Ω–æ {videoDevices.Count} –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π");

                foreach (var devicePath in videoDevices)
                {
                    try
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –æ—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
                        if (File.Exists(devicePath))
                        {
                            var deviceNumber = Path.GetFileName(devicePath);
                            var basicCamera = new CameraInfo
                            {
                                Name = $"–í–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {deviceNumber}",
                                DevicePath = devicePath,
                                Description = "–ë–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ v4l2)",
                                DeviceType = "Basic Camera",
                                IsConnected = true,
                                SupportsVideoCapture = true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
                                SupportsStreaming = true,
                                SupportedFormats = new List<string> { "Unknown" },
                                Capabilities = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (v4l2-ctl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                            };

                            cameras.Add(basicCamera);
                            Console.WriteLine($"   üìπ {devicePath} - –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –±–∞–∑–æ–≤–∞—è –∫–∞–º–µ—Ä–∞");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"   ‚ùå {devicePath} - –æ—à–∏–±–∫–∞: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞–º–µ—Ä: {ex.Message}");
            }

            return cameras;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤ Linux
        /// </summary>
        private CameraInfo? GetDeviceInfo(string devicePath)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ v4l2-ctl –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                var v4lInfo = ExecuteCommand($"v4l2-ctl --device={devicePath} --info");
                var v4lCapabilities = ExecuteCommand($"v4l2-ctl --device={devicePath} --list-formats-ext");
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ udevadm
                var udevInfo = ExecuteCommand($"udevadm info --name={devicePath}");

                var name = ExtractDeviceName(v4lInfo, udevInfo, devicePath);
                var description = ExtractDeviceDescription(v4lInfo, udevInfo);
                var usbInfo = ExtractUsbInfo(udevInfo);
                var capabilities = ExtractCapabilities(v4lInfo);
                var formats = ExtractSupportedFormats(v4lCapabilities);
                var deviceType = DetermineDeviceType(v4lInfo, v4lCapabilities, name);

                return new CameraInfo
                {
                    Name = name,
                    DevicePath = devicePath,
                    Description = description,
                    DeviceID = usbInfo.DeviceId,
                    PnpDeviceID = usbInfo.PnpId,
                    IsConnected = File.Exists(devicePath),
                    Capabilities = capabilities,
                    SupportsVideoCapture = capabilities.Contains("Video Capture") || capabilities.Contains("video-capture"),
                    SupportsStreaming = capabilities.Contains("Streaming") || capabilities.Contains("streaming"),
                    SupportedFormats = formats,
                    DeviceType = deviceType
                };
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {devicePath}: {ex.Message}");
            }

            return null;
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ Linux
        /// </summary>
        private string ExecuteCommand(string command)
        {
            try
            {
                var process = new System.Diagnostics.Process
                {
                    StartInfo = new System.Diagnostics.ProcessStartInfo
                    {
                        FileName = "/bin/bash",
                        Arguments = $"-c \"{command}\"",
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    }
                };

                process.Start();
                var output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();

                return output;
            }
            catch
            {
                return string.Empty;
            }
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        /// </summary>
        private string ExtractDeviceName(string v4lInfo, string udevInfo, string devicePath)
        {
            // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ v4l2-ctl
            var v4lMatch = Regex.Match(v4lInfo, @"Card type\s*:\s*(.+)", RegexOptions.IgnoreCase);
            if (v4lMatch.Success)
            {
                return v4lMatch.Groups[1].Value.Trim();
            }

            // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏–∑ udev ID_MODEL
            var udevMatch = Regex.Match(udevInfo, @"ID_MODEL=(.+)", RegexOptions.IgnoreCase);
            if (udevMatch.Success)
            {
                return udevMatch.Groups[1].Value.Trim().Replace("_", " ");
            }

            // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏–∑ udev ID_V4L_PRODUCT
            var v4lProductMatch = Regex.Match(udevInfo, @"ID_V4L_PRODUCT=(.+)", RegexOptions.IgnoreCase);
            if (v4lProductMatch.Success)
            {
                return v4lProductMatch.Groups[1].Value.Trim();
            }

            // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏–∑ udev ID_VENDOR_ENC –∏ ID_MODEL_ENC
            var vendorMatch = Regex.Match(udevInfo, @"ID_VENDOR_ENC=(.+)", RegexOptions.IgnoreCase);
            var modelMatch = Regex.Match(udevInfo, @"ID_MODEL_ENC=(.+)", RegexOptions.IgnoreCase);
            
            if (vendorMatch.Success && modelMatch.Success)
            {
                var vendor = Uri.UnescapeDataString(vendorMatch.Groups[1].Value.Replace(@"\x20", " "));
                var model = Uri.UnescapeDataString(modelMatch.Groups[1].Value.Replace(@"\x20", " "));
                return $"{vendor} {model}".Trim();
            }

            return $"–ö–∞–º–µ—Ä–∞ {Path.GetFileName(devicePath)}";
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        private string ExtractDeviceDescription(string v4lInfo, string udevInfo)
        {
            var driverMatch = Regex.Match(v4lInfo, @"Driver name\s*:\s*(.+)", RegexOptions.IgnoreCase);
            if (driverMatch.Success)
            {
                return $"Video4Linux —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ({driverMatch.Groups[1].Value.Trim()})";
            }

            // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä –≤ udev
            var udevDriverMatch = Regex.Match(udevInfo, @"ID_V4L_CAPABILITIES=(.+)", RegexOptions.IgnoreCase);
            if (udevDriverMatch.Success)
            {
                return $"Video4Linux —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {udevDriverMatch.Groups[1].Value.Trim()})";
            }

            return "USB –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ";
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ USB –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        /// </summary>
        private (string DeviceId, string PnpId) ExtractUsbInfo(string udevInfo)
        {
            var vendorMatch = Regex.Match(udevInfo, @"ID_VENDOR_ID=([0-9a-fA-F]+)");
            var productMatch = Regex.Match(udevInfo, @"ID_MODEL_ID=([0-9a-fA-F]+)");

            if (vendorMatch.Success && productMatch.Success)
            {
                var vendorId = vendorMatch.Groups[1].Value;
                var productId = productMatch.Groups[1].Value;
                var deviceId = $"USB\\VID_{vendorId}&PID_{productId}";
                return (deviceId, deviceId);
            }

            return (string.Empty, string.Empty);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ USB
        /// </summary>
        private bool IsUsbDevice(CameraInfo deviceInfo)
        {
            return !string.IsNullOrEmpty(deviceInfo.DeviceID) && 
                   deviceInfo.DeviceID.Contains("USB", StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ö–æ–∂–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –∫–∞–º–µ—Ä—É
        /// </summary>
        private bool IsLikelyCamera(CameraInfo deviceInfo)
        {
            var nameAndDesc = $"{deviceInfo.Name} {deviceInfo.Description}".ToLower();
            
            var cameraKeywords = new[] { "camera", "webcam", "usb", "video", "cam", "capture" };
            
            return cameraKeywords.Any(keyword => nameAndDesc.Contains(keyword));
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ v4l2-ctl --info
        /// </summary>
        private string ExtractCapabilities(string v4lInfo)
        {
            var capabilitiesMatch = Regex.Match(v4lInfo, @"Device Caps\s*:\s*(.+)", RegexOptions.IgnoreCase);
            if (capabilitiesMatch.Success)
            {
                return capabilitiesMatch.Groups[1].Value.Trim();
            }

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            var altMatch = Regex.Match(v4lInfo, @"Capabilities\s*:\s*(.+)", RegexOptions.IgnoreCase);
            if (altMatch.Success)
            {
                return altMatch.Groups[1].Value.Trim();
            }

            return string.Empty;
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑ v4l2-ctl --list-formats-ext
        /// </summary>
        private List<string> ExtractSupportedFormats(string v4lFormats)
        {
            var formats = new List<string>();
            
            // –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∏–ø–∞ YUYV, MJPG, H264, etc.
            var formatMatches = Regex.Matches(v4lFormats, @"'([A-Z0-9]{4})'", RegexOptions.IgnoreCase);
            
            foreach (Match match in formatMatches)
            {
                var format = match.Groups[1].Value;
                if (!formats.Contains(format))
                {
                    formats.Add(format);
                }
            }

            // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
            if (formats.Count == 0)
            {
                var pixelFormatMatches = Regex.Matches(v4lFormats, @"Pixel Format\s*:\s*'([^']+)'", RegexOptions.IgnoreCase);
                foreach (Match match in pixelFormatMatches)
                {
                    var format = match.Groups[1].Value;
                    if (!formats.Contains(format))
                    {
                        formats.Add(format);
                    }
                }
            }

            return formats;
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (Camera, Metadata, etc.)
        /// </summary>
        private string DetermineDeviceType(string v4lInfo, string v4lFormats, string deviceName)
        {
            var capabilities = ExtractCapabilities(v4lInfo).ToLower();
            var formats = ExtractSupportedFormats(v4lFormats);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ metadata —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if (capabilities.Contains("metadata") || deviceName.ToLower().Contains("metadata"))
            {
                return "Metadata";
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—É—é –∫–∞–º–µ—Ä—É
            if (capabilities.Contains("video capture") || capabilities.Contains("video-capture"))
            {
                if (formats.Count > 0)
                {
                    return "Camera";
                }
                else
                {
                    return "Video Device";
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
            if (capabilities.Contains("video output"))
            {
                return "Video Output";
            }

            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
            return "Unknown";
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—Ç–∏–ª–∏—Ç—ã v4l2-ctl
        /// </summary>
        private bool CheckV4l2Utils()
        {
            try
            {
                var result = ExecuteCommand("which v4l2-ctl");
                return !string.IsNullOrWhiteSpace(result);
            }
            catch
            {
                return false;
            }
        }
    }
}
