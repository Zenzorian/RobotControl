using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using RobotClient.Config;

namespace RobotClient.Video
{
    /// <summary>
    /// –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public class WebSocketClient : IDisposable
    {
        private ClientWebSocket? _webSocket;
        private CancellationTokenSource? _cancellationTokenSource;
        private readonly string _serverUrl;
        private bool _isConnected;
        private bool _isRegistered;
        
        public event Action<string>? MessageReceived;
        public event Action? Connected;
        public event Action? Disconnected;
        public event Action<string>? ConnectionError;

        public bool IsConnected => _isConnected && _webSocket?.State == WebSocketState.Open;
        public bool IsRegistered => _isRegistered && IsConnected;

        public WebSocketClient(string? serverUrl = null)
        {
            _serverUrl = serverUrl ?? ServerConfig.WebSocketUrl;
            _isConnected = false;
            _isRegistered = false;
            
            Console.WriteLine($"üîå WebSocket –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: {_serverUrl}");
        }

        /// <summary>
        /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
        /// </summary>
        public async Task<bool> ConnectAsync()
        {
            try
            {
                if (_webSocket?.State == WebSocketState.Open)
                {
                    Console.WriteLine("‚ö†Ô∏è WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
                    return true;
                }

                _webSocket?.Dispose();
                _webSocket = new ClientWebSocket();
                _cancellationTokenSource = new CancellationTokenSource();

                Console.WriteLine($"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {_serverUrl}");
                
                using var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(ServerConfig.CONNECTION_TIMEOUT_SECONDS));
                using var combinedCts = CancellationTokenSource.CreateLinkedTokenSource(_cancellationTokenSource.Token, timeoutCts.Token);
                
                await _webSocket.ConnectAsync(new Uri(_serverUrl), combinedCts.Token);
                
                _isConnected = true;
                Console.WriteLine("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
                
                Connected?.Invoke();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                _ = Task.Run(ListenForMessages);
                
                return true;
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine($"‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É ({ServerConfig.CONNECTION_TIMEOUT_SECONDS}s)");
                _isConnected = false;
                return false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {ex.Message}");
                ConnectionError?.Invoke(ex.Message);
                _isConnected = false;
                return false;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ–±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        /// </summary>
        public async Task<bool> RegisterAsRobotAsync()
        {
            if (!IsConnected)
            {
                Console.WriteLine("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
                return false;
            }

            try
            {
                Console.WriteLine("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ ROBOT...");
                await SendMessageAsync("REGISTER!ROBOT");
                
                // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                var registrationResult = await WaitForRegistrationConfirmation();
                
                if (registrationResult)
                {
                    _isRegistered = true;
                    Console.WriteLine("‚úÖ –†–æ–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
                }
                else
                {
                    Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–±–æ—Ç–∞");
                }
                
                return registrationResult;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        /// </summary>
        public async Task<bool> SendMessageAsync(string message)
        {
            if (!IsConnected)
            {
                Console.WriteLine("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
                return false;
            }

            try
            {
                var buffer = Encoding.UTF8.GetBytes(message);
                await _webSocket!.SendAsync(
                    new ArraySegment<byte>(buffer),
                    WebSocketMessageType.Text,
                    true,
                    _cancellationTokenSource!.Token
                );
                
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ JSON —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è WebRTC)
        /// </summary>
        public async Task<bool> SendJsonMessageAsync(object messageObject)
        {
            try
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                };
                var json = JsonSerializer.Serialize(messageObject, options);
                Console.WriteLine($"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π JSON: {json}");
                return await SendMessageAsync(json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        /// </summary>
        public async Task<bool> SendTelemetryAsync(object telemetryData)
        {
            try
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                };
                var telemetryJson = JsonSerializer.Serialize(telemetryData, options);
                var message = $"TELEMETRY!{telemetryJson}";
                return await SendMessageAsync(message);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        /// </summary>
        private async Task<bool> WaitForRegistrationConfirmation()
        {
            var timeoutTask = Task.Delay(5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            var registrationTask = WaitForMessage("REGISTERED!ROBOT");

            var completedTask = await Task.WhenAny(timeoutTask, registrationTask);

            if (completedTask == registrationTask)
            {
                return await registrationTask;
            }
            else
            {
                Console.WriteLine("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
                return false;
            }
        }

        /// <summary>
        /// –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        /// </summary>
        private async Task<bool> WaitForMessage(string expectedMessage)
        {
            var tcs = new TaskCompletionSource<bool>();
            
            void OnMessageReceived(string message)
            {
                if (message == expectedMessage)
                {
                    MessageReceived -= OnMessageReceived;
                    tcs.SetResult(true);
                }
            }

            MessageReceived += OnMessageReceived;
            
            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç
            _ = Task.Delay(10000).ContinueWith(_ => {
                MessageReceived -= OnMessageReceived;
                tcs.TrySetResult(false);
            });

            return await tcs.Task;
        }

        /// <summary>
        /// –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        /// </summary>
        private async Task ListenForMessages()
        {
            var buffer = new byte[4096];
            
            try
            {
                while (IsConnected && !_cancellationTokenSource!.Token.IsCancellationRequested)
                {
                    var result = await _webSocket!.ReceiveAsync(
                        new ArraySegment<byte>(buffer),
                        _cancellationTokenSource.Token
                    );

                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        var message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        
                        Console.WriteLine($"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}");
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è WebRTC —Å–æ–æ–±—â–µ–Ω–∏–π
                        if (message.Contains("webrtc"))
                        {
                            Console.WriteLine($"üîç WebRTC —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!");
                        }
                        
                        MessageReceived?.Invoke(message);
                    }
                    else if (result.MessageType == WebSocketMessageType.Close)
                    {
                        Console.WriteLine("üîå –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
                        break;
                    }
                }
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine("üõë –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏: {ex.Message}");
                ConnectionError?.Invoke(ex.Message);
            }
            finally
            {
                _isConnected = false;
                _isRegistered = false;
                Disconnected?.Invoke();
            }
        }

        /// <summary>
        /// –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        /// </summary>
        public async Task<bool> ReconnectAsync()
        {
            for (int attempt = 1; attempt <= ServerConfig.MAX_RECONNECT_ATTEMPTS; attempt++)
            {
                Console.WriteLine($"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt}/{ServerConfig.MAX_RECONNECT_ATTEMPTS}...");
                
                if (await ConnectAsync())
                {
                    if (await RegisterAsRobotAsync())
                    {
                        Console.WriteLine("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
                        return true;
                    }
                }
                
                if (attempt < ServerConfig.MAX_RECONNECT_ATTEMPTS)
                {
                    Console.WriteLine($"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {ServerConfig.RECONNECT_DELAY_SECONDS}s –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...");
                    await Task.Delay(TimeSpan.FromSeconds(ServerConfig.RECONNECT_DELAY_SECONDS));
                }
            }
            
            Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            return false;
        }

        /// <summary>
        /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        /// </summary>
        public async Task DisconnectAsync()
        {
            try
            {
                _cancellationTokenSource?.Cancel();
                
                if (_webSocket?.State == WebSocketState.Open)
                {
                    await _webSocket.CloseAsync(
                        WebSocketCloseStatus.NormalClosure,
                        "Client disconnecting",
                        CancellationToken.None
                    );
                }
                
                Console.WriteLine("‚úÖ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {ex.Message}");
            }
        }

        public void Dispose()
        {
            _cancellationTokenSource?.Cancel();
            _webSocket?.Dispose();
            _cancellationTokenSource?.Dispose();
        }
    }
} 