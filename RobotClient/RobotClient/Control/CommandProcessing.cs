using System.Text.Json;
using RobotClient.Core;

namespace RobotClient.Control
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
    /// </summary>
    public class CommandProcessing
    {
        private readonly PixhawkControl _pixhawkControl;
        private readonly WebSocketClient _webSocketService;
        private bool _isProcessing;

        public event Action<string>? CommandReceived;
        public event Action<string>? CommandProcessed;
        public event Action<string>? ProcessingError;

        public bool IsProcessing => _isProcessing;

        public CommandProcessing(PixhawkControl pixhawkControl, WebSocketClient webSocketService)
        {
            _pixhawkControl = pixhawkControl ?? throw new ArgumentNullException(nameof(pixhawkControl));
            _webSocketService = webSocketService ?? throw new ArgumentNullException(nameof(webSocketService));
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
            _webSocketService.MessageReceived += OnMessageReceived;
            
            Console.WriteLine("üéÆ –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        /// </summary>
        public void StartProcessing()
        {
            if (_isProcessing)
            {
                Console.WriteLine("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞");
                return;
            }

            _isProcessing = true;
            Console.WriteLine("‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        /// </summary>
        public void StopProcessing()
        {
            _isProcessing = false;
            
            // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤
            try
            {
                _pixhawkControl.StopMotors();
                Console.WriteLine("üõë –ú–æ—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ—Ç–æ—Ä–æ–≤: {ex.Message}");
            }
            
            Console.WriteLine("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        /// </summary>
        private async void OnMessageReceived(string message)
        {
            if (!_isProcessing)
                return;

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                if (message.StartsWith("COMMAND!"))
                {
                    await ProcessControlCommand(message);
                }
                else if (message.StartsWith("ERROR!"))
                {
                    ProcessErrorMessage(message);
                }
                else if (message == "SERVER_SHUTDOWN")
                {
                    ProcessServerShutdown();
                }
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏)
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
                ProcessingError?.Invoke(ex.Message);
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private async Task ProcessControlCommand(string message)
        {
            try
            {
                CommandReceived?.Invoke(message);
                
                // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é CommandConverter
                var command = CommandConverter.ParseCommand(message);
                
                if (!command.HasValue)
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥—É");
                    return;
                }

                var cmd = command.Value;
                Console.WriteLine($"üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: L({cmd.leftStickValue.x:F2},{cmd.leftStickValue.y:F2}) R({cmd.rightStickValue.x:F2},{cmd.rightStickValue.y:F2})");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Pixhawk
                if (!_pixhawkControl.IsConnected())
                {
                    Console.WriteLine("‚ùå Pixhawk –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
                    await SendStatusUpdate("PIXHAWK_DISCONNECTED");
                    return;
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è
                await ProcessMovementCommand(cmd);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–∞–º–µ—Ä—ã
                await ProcessCameraCommand(cmd.cameraAngle);

                CommandProcessed?.Invoke(message);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                await SendCommandAck(cmd);
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {ex.Message}");
                ProcessingError?.Invoke(ex.Message);
                await SendStatusUpdate($"COMMAND_ERROR: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–≤–∏–∂–µ–Ω–∏—è
        /// </summary>
        private async Task ProcessMovementCommand(Command command)
        {
            try
            {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∏–∫–æ–≤ –≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–ª–µ—Å
                var (leftSpeed, rightSpeed) = ConvertSticksToWheelSpeeds(
                    command.leftStickValue, 
                    command.rightStickValue
                );

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
                leftSpeed = Math.Clamp(leftSpeed, -1.0f, 1.0f);
                rightSpeed = Math.Clamp(rightSpeed, -1.0f, 1.0f);

                Console.WriteLine($"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –∫–æ–ª–µ—Å: L={leftSpeed:F2}, R={rightSpeed:F2}");
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ Pixhawk
                _pixhawkControl.SetWheelSpeeds(leftSpeed, rightSpeed);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
                await SendMovementTelemetry(leftSpeed, rightSpeed);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å—Ç–∏–∫–æ–≤ –≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–ª–µ—Å
        /// </summary>
        private (float leftSpeed, float rightSpeed) ConvertSticksToWheelSpeeds(
            Vector2 leftStick, 
            Vector2 rightStick)
        {
            // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç –ª–µ–≤–æ–≥–æ —Å—Ç–∏–∫–∞ (–≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥)
            float forwardSpeed = leftStick.y;
            
            // –ü–æ–≤–æ—Ä–æ—Ç –æ—Ç –ø—Ä–∞–≤–æ–≥–æ —Å—Ç–∏–∫–∞ (–∏–ª–∏ –ª–µ–≤–æ–≥–æ —Å—Ç–∏–∫–∞ –ø–æ X)
            float turnSpeed = rightStick.x != 0 ? rightStick.x : leftStick.x;

            // –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            float leftSpeed = forwardSpeed - turnSpeed;
            float rightSpeed = forwardSpeed + turnSpeed;

            return (leftSpeed, rightSpeed);
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–∞–º–µ—Ä—ã
        /// </summary>
        private async Task ProcessCameraCommand(float angle)
        {
            try
            {
                Console.WriteLine($"üì∑ –ö–æ–º–∞–Ω–¥–∞ –∫–∞–º–µ—Ä—ã: –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ {angle}¬∞");
                
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–∞–º–µ—Ä—ã
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–º –∫–∞–º–µ—Ä—ã
                
                await SendCameraTelemetry(angle);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–∞–º–µ—Ä—ã: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        /// </summary>
        private void ProcessErrorMessage(string message)
        {
            Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {message}");
            
            if (message.Contains("TARGET_DISCONNECTED"))
            {
                Console.WriteLine("üîå –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Ç–æ—Ä—ã");
                _pixhawkControl.StopMotors();
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        /// </summary>
        private void ProcessServerShutdown()
        {
            Console.WriteLine("üõë –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");
            StopProcessing();
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        /// </summary>
        private async Task SendCommandAck(Command command)
        {
            try
            {
                var ackData = new
                {
                    type = "command_ack",
                    timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                    command = new
                    {
                        leftStick = command.leftStickValue,
                        rightStick = command.rightStickValue,
                        cameraAngle = command.cameraAngle
                    }
                };

                await _webSocketService.SendTelemetryAsync(ackData);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        /// </summary>
        private async Task SendMovementTelemetry(float leftSpeed, float rightSpeed)
        {
            try
            {
                var telemetry = new
                {
                    type = "movement_telemetry",
                    timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                    wheelSpeeds = new { left = leftSpeed, right = rightSpeed },
                    pixhawkConnected = _pixhawkControl.IsConnected()
                };

                await _webSocketService.SendTelemetryAsync(telemetry);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∫–∞–º–µ—Ä—ã
        /// </summary>
        private async Task SendCameraTelemetry(float angle)
        {
            try
            {
                var telemetry = new
                {
                    type = "camera_telemetry",
                    timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                    cameraAngle = angle
                };

                await _webSocketService.SendTelemetryAsync(telemetry);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∫–∞–º–µ—Ä—ã: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        /// </summary>
        private async Task SendStatusUpdate(string status)
        {
            try
            {
                var statusData = new
                {
                    type = "status_update",
                    timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                    status = status,
                    pixhawkConnected = _pixhawkControl.IsConnected(),
                    processingActive = _isProcessing
                };

                await _webSocketService.SendTelemetryAsync(statusData);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        public void Dispose()
        {
            StopProcessing();
            _webSocketService.MessageReceived -= OnMessageReceived;
        }
    }
} 