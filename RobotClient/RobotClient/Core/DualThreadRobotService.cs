using RobotClient.Config;
using RobotClient.Video;
using RobotClient.Control;

namespace RobotClient.Core
{
    /// <summary>
    /// –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–æ–±–æ—Ç–∞ —Å –¥–≤—É–º—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏:
    /// 1. –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º (–∫–æ–º–∞–Ω–¥—ã, —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è, Pixhawk)
    /// 2. –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ (–∫–∞–º–µ—Ä–∞, WebRTC, –≤–∏–¥–µ–æ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥)
    /// </summary>
    public class DualThreadRobotService : IDisposable
    {
        private readonly WebSocketClient _webSocketService;
        private readonly RobotControlThread _controlThread;
        private readonly VideoStreamingThread _videoThread;
        
        private bool _isRunning;
        private readonly string _serverUrl;

        public bool IsRunning => _isRunning;
        public bool IsConnected => _webSocketService.IsConnected;
        public bool IsRegistered => _webSocketService.IsRegistered;
        
        // –°—Ç–∞—Ç—É—Å—ã –ø–æ—Ç–æ–∫–æ–≤
        public bool IsControlThreadRunning => _controlThread.IsRunning;
        public bool IsVideoThreadRunning => _videoThread.IsRunning;
        public bool IsPixhawkConnected => _controlThread.IsPixhawkConnected;
        public bool IsVideoInitialized => _videoThread.IsVideoInitialized;

        public DualThreadRobotService(string? serverUrl = null)
        {
            _serverUrl = serverUrl ?? ServerConfig.WebSocketUrl;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–∏—Å–∞
            _webSocketService = new WebSocketClient(_serverUrl);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
            _controlThread = new RobotControlThread(_webSocketService);
            _videoThread = new VideoStreamingThread(_webSocketService);
            
            Console.WriteLine("ü§ñ –î–≤—É—Ö–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–æ–±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            Console.WriteLine($"üì° –°–µ—Ä–≤–µ—Ä: {_serverUrl}");
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ä–æ–±–æ—Ç–∞
        /// </summary>
        public async Task<bool> StartAsync()
        {
            try
            {
                if (_isRunning)
                {
                    Console.WriteLine("‚ö†Ô∏è –î–≤—É—Ö–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–æ–±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
                    return true;
                }

                Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ä–æ–±–æ—Ç–∞...");

                // –≠–¢–ê–ü 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
                Console.WriteLine(new string('=', 50));
                Console.WriteLine("üì° –≠–¢–ê–ü 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É");
                Console.WriteLine(new string('=', 50));

                Console.WriteLine($"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {_serverUrl}...");
                if (!await _webSocketService.ConnectAsync())
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
                    return false;
                }
                Console.WriteLine("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

                Console.WriteLine("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ–±–æ—Ç–∞...");
                if (!await _webSocketService.RegisterAsRobotAsync())
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–±–æ—Ç–∞");
                    await _webSocketService.DisconnectAsync();
                    return false;
                }
                Console.WriteLine("‚úÖ –†–æ–±–æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");

                // –≠–¢–ê–ü 2: –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
                Console.WriteLine("\n" + new string('=', 50));
                Console.WriteLine("üîÑ –≠–¢–ê–ü 2: –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ (–ø–æ—Ç–æ–∫–æ–≤)");
                Console.WriteLine(new string('=', 50));

                // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –ø–æ—Ç–æ–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                var controlTask = StartControlThreadAsync();
                var videoTask = StartVideoThreadAsync();

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
                var results = await Task.WhenAll(controlTask, videoTask);
                
                bool controlStarted = results[0];
                bool videoStarted = results[1];

                Console.WriteLine("\n" + new string('=', 50));
                Console.WriteLine("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ü–£–°–ö–ê:");
                Console.WriteLine(new string('=', 50));
                Console.WriteLine($"üéÆ –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º: {(controlStarted ? "‚úÖ –ó–ê–ü–£–©–ï–ù" : "‚ùå –û–®–ò–ë–ö–ê")}");
                Console.WriteLine($"üìπ –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ: {(videoStarted ? "‚úÖ –ó–ê–ü–£–©–ï–ù" : "‚ùå –û–®–ò–ë–ö–ê")}");

                if (controlStarted || videoStarted)
                {
                    _isRunning = true;
                    Console.WriteLine("\nüü¢ –î–≤—É—Ö–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–æ–±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω!");
                    Console.WriteLine("üîÑ –†–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã:");
                    if (controlStarted) Console.WriteLine("   üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–æ–º");
                    if (videoStarted) Console.WriteLine("   üìπ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≤–∏–¥–µ–æ");
                    return true;
                }
                else
                {
                    Console.WriteLine("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –ø–æ—Ç–æ–∫");
                    await StopAsync();
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {ex.Message}");
                await StopAsync();
                return false;
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
        /// </summary>
        private async Task<bool> StartControlThreadAsync()
        {
            try
            {
                Console.WriteLine("üéÆ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º...");
                bool result = await _controlThread.StartAsync();
                
                if (result)
                {
                    Console.WriteLine("‚úÖ –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                }
                else
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º");
                }
                
                return result;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ
        /// </summary>
        private async Task<bool> StartVideoThreadAsync()
        {
            try
            {
                Console.WriteLine("üìπ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ...");
                bool result = await _videoThread.StartAsync();
                
                if (result)
                {
                    Console.WriteLine("‚úÖ –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                }
                else
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ");
                }
                
                return result;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –≤–∏–¥–µ–æ: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ä–æ–±–æ—Ç–∞
        /// </summary>
        public async Task StopAsync()
        {
            try
            {
                if (!_isRunning)
                    return;

                Console.WriteLine("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ä–æ–±–æ—Ç–∞...");
                _isRunning = false;

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                var controlStopTask = _controlThread.StopAsync();
                var videoStopTask = _videoThread.StopAsync();

                await Task.WhenAll(controlStopTask, videoStopTask);

                // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
                await _webSocketService.DisconnectAsync();
                Console.WriteLine("‚úÖ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω");

                Console.WriteLine("üî¥ –î–≤—É—Ö–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–æ–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        /// </summary>
        public object GetStatus()
        {
            return new
            {
                service = new
                {
                    isRunning = _isRunning,
                    serverUrl = _serverUrl
                },
                webSocket = new
                {
                    connected = _webSocketService.IsConnected,
                    registered = _webSocketService.IsRegistered
                },
                controlThread = _controlThread.GetStatus(),
                videoThread = _videoThread.GetStatus(),
                summary = new
                {
                    threadsRunning = new
                    {
                        control = _controlThread.IsRunning,
                        video = _videoThread.IsRunning
                    },
                    capabilities = new
                    {
                        robotControl = _controlThread.IsRunning && _controlThread.IsPixhawkConnected,
                        videoStreaming = _videoThread.IsRunning && _videoThread.IsVideoInitialized
                    }
                }
            };
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        /// </summary>
        public async Task SendStatusTelemetryAsync()
        {
            try
            {
                if (!_webSocketService.IsRegistered || !_isRunning)
                    return;

                var status = new
                {
                    type = "robot_dual_thread_status",
                    timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                    robotStatus = GetStatus()
                };

                await _webSocketService.SendTelemetryAsync(status);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø–æ—Ç–æ–∫–æ–≤
        /// </summary>
        public async Task RunAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                if (!await StartAsync())
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–æ–±–æ—Ç–∞");
                    return;
                }

                Console.WriteLine("üîÑ –î–≤—É—Ö–ø–æ—Ç–æ—á–Ω—ã–π —Ä–æ–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");

                // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                var telemetryTimer = new Timer(async _ =>
                {
                    await SendStatusTelemetryAsync();
                    MonitorThreads();
                }, null, TimeSpan.Zero, TimeSpan.FromSeconds(45));

                // –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                try
                {
                    await Task.Delay(Timeout.Infinite, cancellationToken);
                }
                catch (OperationCanceledException)
                {
                    Console.WriteLine("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞");
                }

                telemetryTimer.Dispose();
            }
            finally
            {
                await StopAsync();
            }
        }

        /// <summary>
        /// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        /// </summary>
        private void MonitorThreads()
        {
            try
            {
                if (!_isRunning)
                    return;

                var controlRunning = _controlThread.IsRunning;
                var videoRunning = _videoThread.IsRunning;
                var pixhawkConnected = _controlThread.IsPixhawkConnected;
                var videoInitialized = _videoThread.IsVideoInitialized;

                Console.WriteLine($"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Ç–æ–∫–æ–≤: üéÆ Control:{(controlRunning ? "‚úÖ" : "‚ùå")} | " +
                               $"üìπ Video:{(videoRunning ? "‚úÖ" : "‚ùå")} | " +
                               $"üîß Pixhawk:{(pixhawkConnected ? "‚úÖ" : "‚ùå")} | " +
                               $"üì∑ Camera:{(videoInitialized ? "‚úÖ" : "‚ùå")}");

                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ç–æ–∫–æ–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞
        /// </summary>
        public async Task<bool> ReinitializeVideoAsync()
        {
            return await _videoThread.ReinitializeVideoAsync();
        }

        public void Dispose()
        {
            _ = StopAsync();
            _webSocketService?.Dispose();
            _controlThread?.Dispose();
            _videoThread?.Dispose();
        }
    }
} 