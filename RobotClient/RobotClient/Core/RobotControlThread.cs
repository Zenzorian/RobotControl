using RobotClient.Control;
using RobotClient.Config;
using RobotClient.Video;

namespace RobotClient.Core
{
    /// <summary>
    /// –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º
    /// </summary>
    public class RobotControlThread : IDisposable
    {
        private readonly WebSocketClient _webSocketService;
        private readonly CommandProcessing _commandProcessingService;
        private readonly PixhawkControl _pixhawkControl;
        
        private bool _isRunning;
        private CancellationTokenSource? _cancellationTokenSource;
        private Task? _controlTask;
        private Timer? _telemetryTimer;

        public bool IsRunning => _isRunning;
        public bool IsPixhawkConnected => _pixhawkControl.IsConnected();

        public RobotControlThread(WebSocketClient webSocketService)
        {
            _webSocketService = webSocketService ?? throw new ArgumentNullException(nameof(webSocketService));
            _pixhawkControl = new PixhawkControl();
            _commandProcessingService = new CommandProcessing(_pixhawkControl, _webSocketService);
            
            Console.WriteLine("üéÆ –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
        /// </summary>
        public async Task<bool> StartAsync()
        {
            try
            {
                if (_isRunning)
                {
                    Console.WriteLine("‚ö†Ô∏è –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
                    return true;
                }

                Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º...");

                // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pixhawk
                Console.WriteLine("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pixhawk...");
                if (!_pixhawkControl.IsConnected())
                {
                    if (!_pixhawkControl.Connect())
                    {
                        Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pixhawk");
                        return false;
                    }
                }
                Console.WriteLine("‚úÖ Pixhawk –ø–æ–¥–∫–ª—é—á–µ–Ω");

                // 2. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
                Console.WriteLine("üéÆ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥...");
                _commandProcessingService.StartProcessing();
                Console.WriteLine("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—â–µ–Ω–∞");

                // 3. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                _cancellationTokenSource = new CancellationTokenSource();
                _controlTask = Task.Run(() => ControlLoopAsync(_cancellationTokenSource.Token));

                // 4. –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
                _telemetryTimer = new Timer(async _ => await SendTelemetryAsync(), 
                                          null, TimeSpan.Zero, TimeSpan.FromSeconds(30));

                _isRunning = true;
                Console.WriteLine("üü¢ –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º: {ex.Message}");
                await StopAsync();
                return false;
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
        /// </summary>
        public async Task StopAsync()
        {
            try
            {
                if (!_isRunning)
                    return;

                Console.WriteLine("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º...");
                _isRunning = false;

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
                _telemetryTimer?.Dispose();
                _telemetryTimer = null;

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                _cancellationTokenSource?.Cancel();
                
                if (_controlTask != null)
                {
                    try
                    {
                        await _controlTask;
                    }
                    catch (OperationCanceledException)
                    {
                        // –û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                    }
                }

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
                _commandProcessingService.StopProcessing();
                Console.WriteLine("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ Pixhawk
                if (_pixhawkControl.IsConnected())
                {
                    _pixhawkControl.StopMotors();
                    _pixhawkControl.Dispose();
                    Console.WriteLine("‚úÖ Pixhawk –æ—Ç–∫–ª—é—á–µ–Ω");
                }

                _cancellationTokenSource?.Dispose();
                _cancellationTokenSource = null;
                _controlTask = null;

                Console.WriteLine("üî¥ –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ex.Message}");
            }
        }

        /// <summary>
        /// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
        /// </summary>
        private async Task ControlLoopAsync(CancellationToken cancellationToken)
        {
            Console.WriteLine("üîÑ –ó–∞–ø—É—â–µ–Ω –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º");

            try
            {
                while (!cancellationToken.IsCancellationRequested && _isRunning)
                {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                    if (!_webSocketService.IsConnected)
                    {
                        Console.WriteLine("‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
                        await Task.Delay(5000, cancellationToken);
                        continue;
                    }

                    if (!_pixhawkControl.IsConnected())
                    {
                        Console.WriteLine("‚ö†Ô∏è Pixhawk –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
                        _pixhawkControl.Connect();
                        await Task.Delay(5000, cancellationToken);
                        continue;
                    }

                    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
                    await Task.Delay(1000, cancellationToken);
                }
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine("üõë –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private async Task SendTelemetryAsync()
        {
            try
            {
                if (!_webSocketService.IsRegistered || !_isRunning)
                    return;

                var controlStatus = new
                {
                    type = "robot_control_status",
                    timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                    control = new
                    {
                        pixhawk = new
                        {
                            connected = _pixhawkControl.IsConnected(),
                            connectionInfo = _pixhawkControl.CurrentConnection?.ToString()
                        },
                        commandProcessing = new
                        {
                            active = _commandProcessingService.IsProcessing
                        },
                        thread = new
                        {
                            running = _isRunning,
                            threadId = Environment.CurrentManagedThreadId
                        }
                    }
                };

                await _webSocketService.SendTelemetryAsync(controlStatus);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        public object GetStatus()
        {
            return new
            {
                isRunning = _isRunning,
                pixhawk = new
                {
                    connected = _pixhawkControl.IsConnected(),
                    connectionInfo = _pixhawkControl.CurrentConnection?.ToString()
                },
                commandProcessing = new
                {
                    active = _commandProcessingService.IsProcessing
                }
            };
        }

        public void Dispose()
        {
            _ = StopAsync();
            _telemetryTimer?.Dispose();
            _cancellationTokenSource?.Dispose();
            _commandProcessingService?.Dispose();
            _pixhawkControl?.Dispose();
        }
    }
} 