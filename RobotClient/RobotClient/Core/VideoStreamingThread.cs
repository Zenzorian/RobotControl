using RobotClient.Config;
using RobotClient.Video;

namespace RobotClient.Core
{
    /// <summary>
    /// –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π, WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥, –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∏
    /// </summary>
    public class VideoStreamingThread : IDisposable
    {
        private readonly WebSocketClient _webSocketService;
        private readonly WebRTC _webRTCService;
        private readonly VideoStreaming _videoStreamingService;
        
        private bool _isRunning;
        private CancellationTokenSource? _cancellationTokenSource;
        private Task? _streamingTask;
        private Timer? _statusTimer;

        public bool IsRunning => _isRunning;
        public bool IsVideoInitialized { get; private set; }
        public bool IsWebRTCActive => _webRTCService.IsActive;
        public int ActiveSessions => _webRTCService.ActiveSessionsCount;

        public VideoStreamingThread(WebSocketClient webSocketService)
        {
            _webSocketService = webSocketService ?? throw new ArgumentNullException(nameof(webSocketService));
            _videoStreamingService = new VideoStreaming();
            _webRTCService = new WebRTC(_webSocketService, _videoStreamingService);
            
            Console.WriteLine("üìπ –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ
        /// </summary>
        public async Task<bool> StartAsync()
        {
            try
            {
                if (_isRunning)
                {
                    Console.WriteLine("‚ö†Ô∏è –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
                    return true;
                }

                Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ...");

                // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞
                Console.WriteLine("üìπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞...");
                IsVideoInitialized = await _videoStreamingService.InitializeAsync();
                if (!IsVideoInitialized)
                {
                    Console.WriteLine("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞), –Ω–æ –ø–æ—Ç–æ–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω");
                }
                else
                {
                    Console.WriteLine("‚úÖ –í–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                }

                // 2. –ó–∞–ø—É—Å–∫ WebRTC —Å–µ—Ä–≤–∏—Å–∞
                Console.WriteLine("üé• –ó–∞–ø—É—Å–∫ WebRTC —Å–µ—Ä–≤–∏—Å–∞...");
                if (!await _webRTCService.StartAsync())
                {
                    Console.WriteLine("‚ö†Ô∏è WebRTC —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø–æ—Ç–æ–∫ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å");
                }
                else
                {
                    Console.WriteLine($"‚úÖ WebRTC —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω, –∞–∫—Ç–∏–≤–µ–Ω: {_webRTCService.IsActive}");
                }

                // 3. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤–∏–¥–µ–æ
                _cancellationTokenSource = new CancellationTokenSource();
                _streamingTask = Task.Run(() => StreamingLoopAsync(_cancellationTokenSource.Token));

                // 4. –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ
                _statusTimer = new Timer(async _ => await SendVideoStatusAsync(), 
                                       null, TimeSpan.Zero, TimeSpan.FromSeconds(60));

                _isRunning = true;
                Console.WriteLine("üü¢ –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ: {ex.Message}");
                await StopAsync();
                return false;
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ
        /// </summary>
        public async Task StopAsync()
        {
            try
            {
                if (!_isRunning)
                    return;

                Console.WriteLine("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ...");
                _isRunning = false;

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
                _statusTimer?.Dispose();
                _statusTimer = null;

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                _cancellationTokenSource?.Cancel();
                
                if (_streamingTask != null)
                {
                    try
                    {
                        await _streamingTask;
                    }
                    catch (OperationCanceledException)
                    {
                        // –û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                    }
                }

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebRTC —Å–µ—Ä–≤–∏—Å–∞
                await _webRTCService.StopAsync();
                Console.WriteLine("‚úÖ WebRTC —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞
                await _videoStreamingService.StopAsync();
                Console.WriteLine("‚úÖ –í–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

                _cancellationTokenSource?.Dispose();
                _cancellationTokenSource = null;
                _streamingTask = null;
                IsVideoInitialized = false;

                Console.WriteLine("üî¥ –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ: {ex.Message}");
            }
        }

        /// <summary>
        /// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ
        /// </summary>
        private async Task StreamingLoopAsync(CancellationToken cancellationToken)
        {
            Console.WriteLine("üîÑ –ó–∞–ø—É—â–µ–Ω –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ");

            try
            {
                while (!cancellationToken.IsCancellationRequested && _isRunning)
                {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if (!_webSocketService.IsConnected)
                    {
                        Console.WriteLine("‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è...");
                        await Task.Delay(10000, cancellationToken);
                        continue;
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    if (!IsVideoInitialized)
                    {
                        Console.WriteLine("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞...");
                        IsVideoInitialized = await _videoStreamingService.InitializeAsync();
                        
                        if (IsVideoInitialized)
                        {
                            Console.WriteLine("‚úÖ –í–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                        }
                        else
                        {
                            await Task.Delay(30000, cancellationToken); // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                            continue;
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ WebRTC —Å–µ—Å—Å–∏–π
                    if (_webRTCService.IsActive && _webRTCService.ActiveSessionsCount > 0)
                    {
                        // –í–∏–¥–µ–æ –∞–∫—Ç–∏–≤–Ω–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç—Å—è
                        Console.WriteLine($"üîÑ WebRTC –∞–∫—Ç–∏–≤–µ–Ω, —Å–µ—Å—Å–∏–π: {_webRTCService.ActiveSessionsCount}");
                        await Task.Delay(5000, cancellationToken);
                    }
                    else
                    {
                        // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π, –∂–¥–µ–º –¥–æ–ª—å—à–µ
                        Console.WriteLine($"üí§ WebRTC: –∞–∫—Ç–∏–≤–µ–Ω={_webRTCService.IsActive}, —Å–µ—Å—Å–∏–π={_webRTCService.ActiveSessionsCount}");
                        await Task.Delay(10000, cancellationToken);
                    }
                }
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine("üõë –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
        /// </summary>
        private async Task SendVideoStatusAsync()
        {
            try
            {
                if (!_webSocketService.IsRegistered || !_isRunning)
                    return;

                var videoStatus = new
                {
                    type = "robot_video_status",
                    timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
                    video = new
                    {
                        initialized = IsVideoInitialized,
                        webRTC = new
                        {
                            active = _webRTCService.IsActive,
                            activeSessions = _webRTCService.ActiveSessionsCount
                        },
                        streaming = new
                        {
                            available = IsVideoInitialized && _webRTCService.IsActive
                        },
                        thread = new
                        {
                            running = _isRunning,
                            threadId = Environment.CurrentManagedThreadId
                        }
                    }
                };

                await _webSocketService.SendTelemetryAsync(videoStatus);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ç–æ–∫–∞ –≤–∏–¥–µ–æ
        /// </summary>
        public object GetStatus()
        {
            return new
            {
                isRunning = _isRunning,
                videoInitialized = IsVideoInitialized,
                webRTC = new
                {
                    active = _webRTCService.IsActive,
                    activeSessions = _webRTCService.ActiveSessionsCount
                },
                streaming = new
                {
                    available = IsVideoInitialized && _webRTCService.IsActive
                }
            };
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞
        /// </summary>
        public async Task<bool> ReinitializeVideoAsync()
        {
            try
            {
                Console.WriteLine("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞...");
                
                // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞
                await _videoStreamingService.StopAsync();
                IsVideoInitialized = false;

                // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
                await Task.Delay(2000);

                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                IsVideoInitialized = await _videoStreamingService.InitializeAsync();
                
                if (IsVideoInitialized)
                {
                    Console.WriteLine("‚úÖ –í–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                    return true;
                }
                else
                {
                    Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å–µ—Ä–≤–∏—Å–∞: {ex.Message}");
                return false;
            }
        }

        public void Dispose()
        {
            _ = StopAsync();
            _statusTimer?.Dispose();
            _cancellationTokenSource?.Dispose();
            _webRTCService?.Dispose();
        }
    }
} 