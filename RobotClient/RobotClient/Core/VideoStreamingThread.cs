using RobotClient.Control;
using RobotClient.Video;
using SIPSorcery.Net;
using SIPSorcery.SIP.App;
using System.Net;
using System.Threading;
using System.Text.Json;
using Microsoft.Extensions.Logging;

namespace RobotClient.Core
{
    /// <summary>
    /// –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FFmpeg, WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥, –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∏ (Linux)
    /// </summary>
    public class VideoStreamingThread : IDisposable
    {
        private readonly WebSocketClient _webSocketClient;
        private RTCPeerConnection? _peerConnection;
        private FFmpegProcessing? _ffmpegProcessing;
        private CancellationTokenSource? _cancellationTokenSource;
        private readonly ILogger<VideoStreamingThread> _logger;
        private string? _currentSessionId;
        private bool _isDisposed = false;
        private readonly string[] _ffmpegArgs;
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∏–¥–µ–æ
        public event Action<bool>? VideoStreamingStateChanged;
        public event Action<string>? Error;
        
        public bool IsStreaming { get; private set; }
        
        public VideoStreamingThread(WebSocketClient webSocketClient, string[]? ffmpegArgs = null)
        {
            _webSocketClient = webSocketClient ?? throw new ArgumentNullException(nameof(webSocketClient));
            _ffmpegArgs = ffmpegArgs ?? Array.Empty<string>();
            _logger = LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<VideoStreamingThread>();
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
            _webSocketClient.MessageReceived += HandleWebSocketMessage;
            
            Console.WriteLine("üìπ VideoStreamingThread —Å–æ–∑–¥–∞–Ω –¥–ª—è Linux/FFmpeg");
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –≤–∏–¥–µ–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
        /// </summary>
        public async Task StartAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                _cancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
                
                Console.WriteLine("üìπ –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞ (Linux/FFmpeg)...");
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FFmpeg
                await InitializeFFmpegAsync();
                
                Console.WriteLine("‚úÖ –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –≥–æ—Ç–æ–≤ –∫ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º");
                
                // –û–∂–∏–¥–∞–µ–º –æ—Ç–º–µ–Ω—ã
                await Task.Delay(Timeout.Infinite, _cancellationTokenSource.Token);
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine("üõë –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–µ: {ex.Message}");
                Error?.Invoke(ex.Message);
                throw;
            }
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FFmpeg –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ
        /// </summary>
        private async Task InitializeFFmpegAsync()
        {
            try
            {
                Console.WriteLine("üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FFmpeg –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ...");
                
                _ffmpegProcessing = new FFmpegProcessing();
                await _ffmpegProcessing.Initialize(_ffmpegArgs);
                
                Console.WriteLine("‚úÖ FFmpeg –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                Console.WriteLine($"üì∫ –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç: {_ffmpegProcessing.videoFormat.Name()}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FFmpeg: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
        /// </summary>
        private async void HandleWebSocketMessage(string message)
        {
            try
            {
                if (message.StartsWith("{"))
                {
                    var jsonDoc = JsonDocument.Parse(message);
                    if (jsonDoc.RootElement.TryGetProperty("type", out var typeElement) && 
                        typeElement.GetString() == "webrtc-signal")
                    {
                        if (jsonDoc.RootElement.TryGetProperty("signalType", out var signalTypeElement))
                        {
                            var signalType = signalTypeElement.GetString();
                            if (signalType == "request_video")
                            {
                                // –î–ª—è request_video —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º session ID –æ—Ç Unity
                                var sessionId = jsonDoc.RootElement.GetProperty("sessionId").GetString();
                                _currentSessionId = sessionId;
                                Console.WriteLine($"üìπ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ –æ—Ç Unity, session ID: {sessionId}");
                                await HandleVideoRequest();
                            }
                            else
                            {
                                await HandleWebRTCSignal(jsonDoc.RootElement);
                            }
                        }
                        else
                        {
                            await HandleWebRTCSignal(jsonDoc.RootElement);
                        }
                    }
                }
                else if (message == "REQUEST_VIDEO")
                {
                    await HandleVideoRequest();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–µ–æ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        /// </summary>
        private async Task HandleVideoRequest()
        {
            try
            {
                Console.WriteLine("üìπ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞");
                await CreateWebRTCOffer();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebRTC offer: {ex.Message}");
                Error?.Invoke(ex.Message);
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ WebRTC offer —Å FFmpeg RTP –ø–æ—Ç–æ–∫–æ–º
        /// </summary>
        private async Task CreateWebRTCOffer()
        {
            try
            {
                if (_peerConnection != null)
                {
                    Console.WriteLine("‚ö†Ô∏è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ");
                    _peerConnection.Close("new connection");
                    _peerConnection = null;
                }

                if (_ffmpegProcessing?.listener == null)
                {
                    throw new InvalidOperationException("FFmpeg RTP listener –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                }

                Console.WriteLine("üéØ –°–æ–∑–¥–∞–Ω–∏–µ WebRTC offer —Å FFmpeg –ø–æ—Ç–æ–∫–æ–º...");
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                var config = new RTCConfiguration
                {
                    iceServers = new List<RTCIceServer>
                    {
                        new RTCIceServer { urls = "stun:stun.l.google.com:19302" },
                        // TURN —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    }
                };

                _peerConnection = new RTCPeerConnection(config);
                
                // Session ID —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ HandleWebSocketMessage
                if (string.IsNullOrEmpty(_currentSessionId))
                {
                    _currentSessionId = Guid.NewGuid().ToString();
                    Console.WriteLine($"üÜî –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π session ID: {_currentSessionId}");
                }
                else
                {
                    Console.WriteLine($"üÜî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è session ID –æ—Ç Unity: {_currentSessionId}");
                }

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                _peerConnection.onicecandidate += async (candidate) =>
                {
                    if (candidate != null)
                    {
                        Console.WriteLine($"üßä –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate.candidate}");
                        await SendICECandidate(candidate);
                    }
                };

                _peerConnection.onconnectionstatechange += (state) =>
                {
                    Console.WriteLine($"üîó WebRTC —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {state}");
                    IsStreaming = state == RTCPeerConnectionState.connected;
                    VideoStreamingStateChanged?.Invoke(IsStreaming);
                    
                    if (state == RTCPeerConnectionState.connected)
                    {
                        // –ü–æ–¥–∫–ª—é—á–∞–µ–º FFmpeg RTP –ø–æ—Ç–æ–∫ –∫ WebRTC
                        ConnectFFmpegToWebRTC();
                    }
                };

                _peerConnection.onicegatheringstatechange += (state) =>
                {
                    Console.WriteLine($"üßä ICE gathering —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}");
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç FFmpeg
              
                var videoTrack = new MediaStreamTrack(SDPMediaTypesEnum.video, false, 
                    new List<SDPAudioVideoMediaFormat> { _ffmpegProcessing.videoFormat }, 
                    MediaStreamStatusEnum.SendOnly);
                    
                _peerConnection.addTrack(videoTrack);
                Console.WriteLine($"üì∫ –î–æ–±–∞–≤–ª–µ–Ω –≤–∏–¥–µ–æ —Ç—Ä–µ–∫: {_ffmpegProcessing.videoFormat.Name()}");
                

                // –°–æ–∑–¥–∞–µ–º offer
                var offer = _peerConnection.createOffer();
                Task setLocalResult = _peerConnection.setLocalDescription(offer);
                
                if (setLocalResult == Task.CompletedTask)
                {
                    Console.WriteLine("‚úÖ Local description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ setLocalDescription: {setLocalResult}");
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ WebSocket
                var offerMessage = new
                {
                    type = "webrtc-signal",
                    signalType = "offer",
                    sessionId = _currentSessionId,
                    data = new
                    {
                        sdp = offer.sdp,
                        type = offer.type.ToString().ToLower(),
                        sessionId = _currentSessionId
                    }
                };

                await _webSocketClient.SendJsonMessageAsync(offerMessage);
                Console.WriteLine("‚úÖ WebRTC offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebRTC offer: {ex.Message}");
                Error?.Invoke(ex.Message);
                throw;
            }
        }

        /// <summary>
        /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ FFmpeg RTP –ø–æ—Ç–æ–∫–∞ –∫ WebRTC
        /// </summary>
        private void ConnectFFmpegToWebRTC()
        {
            try
            {
                if (_ffmpegProcessing?.listener == null || _peerConnection == null)
                {
                    Console.WriteLine("‚ùå FFmpeg listener –∏–ª–∏ PeerConnection –Ω–µ –≥–æ—Ç–æ–≤—ã");
                    return;
                }

                Console.WriteLine("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ FFmpeg RTP –ø–æ—Ç–æ–∫–∞ –∫ WebRTC...");

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ RTP –ø–∞–∫–µ—Ç—ã –æ—Ç FFmpeg –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ WebRTC
                _ffmpegProcessing.listener.OnRtpPacketReceived += (ep, mediaType, rtpPacket) =>
                {
                    if (mediaType == SDPMediaTypesEnum.video && _peerConnection != null)
                    {
                        try
                        {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º RTP –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ WebRTC
                            _peerConnection.SendRtpRaw(mediaType, rtpPacket.Payload, rtpPacket.Header.Timestamp, rtpPacket.Header.MarkerBit, (int)rtpPacket.Header.PayloadType);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ RTP –ø–∞–∫–µ—Ç–∞: {ex.Message}");
                        }
                    }
                };

                Console.WriteLine("‚úÖ FFmpeg –ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebRTC");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è FFmpeg –∫ WebRTC: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
        /// </summary>
        private async Task HandleWebRTCSignal(JsonElement signalElement)
        {
            try
            {
                if (!signalElement.TryGetProperty("signalType", out var signalTypeElement))
                    return;

                var signalType = signalTypeElement.GetString();
                var sessionId = signalElement.GetProperty("sessionId").GetString();
                var data = signalElement.GetProperty("data");

                if (sessionId != _currentSessionId)
                {
                    Console.WriteLine($"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏: {sessionId}");
                    return;
                }

                Console.WriteLine($"üì° WebRTC —Å–∏–≥–Ω–∞–ª: {signalType}");

                switch (signalType)
                {
                    case "answer":
                        HandleWebRTCAnswer(data);
                        break;
                    case "ice-candidate":
                        HandleWebRTCIceCandidate(data);
                        break;
                    default:
                        Console.WriteLine($"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π WebRTC —Å–∏–≥–Ω–∞–ª: {signalType}");
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebRTC —Å–∏–≥–Ω–∞–ª–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC answer
        /// </summary>
        private void HandleWebRTCAnswer(JsonElement answerData)
        {
            try
            {
                if (_peerConnection == null)
                {
                    Console.WriteLine("‚ùå PeerConnection –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è answer");
                    return;
                }

                var sdp = answerData.GetProperty("sdp").GetString();
                var answer = new RTCSessionDescriptionInit
                {
                    type = RTCSdpType.answer,
                    sdp = sdp
                };

                var setRemoteResult = _peerConnection.setRemoteDescription(answer);
                
                if (setRemoteResult == SetDescriptionResultEnum.OK)
                {
                    Console.WriteLine("‚úÖ Remote description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                    Console.WriteLine("‚úÖ WebRTC answer –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ setRemoteDescription: {setRemoteResult}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebRTC answer: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        /// </summary>
        private void HandleWebRTCIceCandidate(JsonElement candidateData)
        {
            try
            {
                if (_peerConnection == null)
                {
                    Console.WriteLine("‚ùå PeerConnection –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞");
                    return;
                }

                var candidate = candidateData.GetProperty("candidate").GetString();
                var sdpMid = candidateData.GetProperty("sdpMid").GetString();
                var sdpMLineIndex = (ushort)candidateData.GetProperty("sdpMLineIndex").GetInt32();

                var iceCandidateInit = new RTCIceCandidateInit
                {
                    candidate = candidate,
                    sdpMid = sdpMid,
                    sdpMLineIndex = sdpMLineIndex
                };

                try
                {
                    _peerConnection.addIceCandidate(iceCandidateInit);
                    Console.WriteLine($"üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {candidate}");
                }
                catch (Exception icEx)
                {
                    Console.WriteLine($"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {icEx.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        /// </summary>
        private async Task SendICECandidate(RTCIceCandidate candidate)
        {
            try
            {
                var candidateMessage = new
                {
                    type = "webrtc-signal",
                    signalType = "ice-candidate",
                    sessionId = _currentSessionId,
                    data = new
                    {
                        candidate = candidate.candidate,
                        sdpMid = candidate.sdpMid,
                        sdpMLineIndex = (int)candidate.sdpMLineIndex,
                        sessionId = _currentSessionId
                    }
                };

                await _webSocketClient.SendJsonMessageAsync(candidateMessage);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
        /// </summary>
        public async Task StopAsync()
        {
            try
            {
                Console.WriteLine("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞...");
                
                _cancellationTokenSource?.Cancel();
                
                if (_peerConnection != null)
                {
                    _peerConnection.Close("stopping");
                    _peerConnection = null;
                }
                
                if (_ffmpegProcessing != null)
                {
                    _ffmpegProcessing.exitCts?.Cancel();
                    _ffmpegProcessing = null;
                }
                
                IsStreaming = false;
                VideoStreamingStateChanged?.Invoke(false);
                
                Console.WriteLine("‚úÖ –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        public void Dispose()
        {
            if (!_isDisposed)
            {
                _webSocketClient.MessageReceived -= HandleWebSocketMessage;
                StopAsync().Wait();
                _cancellationTokenSource?.Dispose();
                _isDisposed = true;
            }
        }
    }
}
