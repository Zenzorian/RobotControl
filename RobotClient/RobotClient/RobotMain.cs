using RobotClient.Core;
using RobotClient.Config;

namespace RobotClient
{
    /// <summary>
    /// –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∞ —Å –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:
    /// - –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º (–∫–æ–º–∞–Ω–¥—ã, —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è, Pixhawk)
    /// - –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ (–∫–∞–º–µ—Ä–∞, WebRTC, –≤–∏–¥–µ–æ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥)
    /// </summary>
    class RobotMain
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("=== Robot Client —Å –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π ===");
            Console.WriteLine("üîÑ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket –∑–∞–ø—É—Å—Ç—è—Ç—Å—è –¥–≤–∞ –ø–æ—Ç–æ–∫–∞:");
            Console.WriteLine("   üéÆ –ü–æ—Ç–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º");
            Console.WriteLine("   üìπ –ü–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤–∏–¥–µ–æ");
            Console.WriteLine();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ctrl+C
            var cancellationTokenSource = new CancellationTokenSource();
            Console.CancelKeyPress += (_, e) =>
            {
                e.Cancel = true;
                cancellationTokenSource.Cancel();
                Console.WriteLine("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞...");
            };

            // –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            string serverUrl = GetServerUrl(args);
            Console.WriteLine($"üîó –°–µ—Ä–≤–µ—Ä: {serverUrl}");
            Console.WriteLine();

            // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ä–æ–±–æ—Ç–∞
            using var dualThreadRobotService = new DualThreadRobotService(args,serverUrl);

            try
            {
                // –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                await dualThreadRobotService.RunAsync(cancellationTokenSource.Token);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–≤—É—Ö–ø–æ—Ç–æ—á–Ω–æ–º —Ä–æ–±–æ—Ç–µ: {ex.Message}");
                Environment.Exit(1);
            }

            Console.WriteLine("‚úÖ –î–≤—É—Ö–ø–æ—Ç–æ—á–Ω—ã–π —Ä–æ–±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        /// </summary>
        private static string GetServerUrl(string[] args)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            if (args.Length > 0 && !string.IsNullOrEmpty(args[0]))
            {
                return args[0];
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            string? envUrl = Environment.GetEnvironmentVariable("ROBOT_SERVER_URL");
            if (!string.IsNullOrEmpty(envUrl))
            {
                return envUrl;
            }

            // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            return ServerConfig.WebSocketUrl;
        }
    }
} 